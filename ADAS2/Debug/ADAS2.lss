
ADAS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000156  00800060  00004372  00004406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  008001b6  008001b6  0000455c  2**0
                  ALLOC
  3 .stab         00004ad0  00000000  00000000  0000455c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ec5  00000000  00000000  0000902c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000aef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000022e  00000000  00000000  0000b0d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002909  00000000  00000000  0000b2ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000163a  00000000  00000000  0000dc08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000137c  00000000  00000000  0000f242  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  000105c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000306  00000000  00000000  000107c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009e6  00000000  00000000  00010ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000114ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__vector_1>
       8:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__vector_2>
       c:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__vector_3>
      10:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_4>
      14:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__vector_5>
      18:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__vector_6>
      1c:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__vector_7>
      20:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__vector_8>
      24:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__vector_9>
      28:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__vector_10>
      2c:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <main>
      8a:	0c 94 b7 21 	jmp	0x436e	; 0x436e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3b 21 	jmp	0x4276	; 0x4276 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e9       	ldi	r26, 0x9D	; 157
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 57 21 	jmp	0x42ae	; 0x42ae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 47 21 	jmp	0x428e	; 0x428e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 63 21 	jmp	0x42c6	; 0x42c6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 47 21 	jmp	0x428e	; 0x428e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 63 21 	jmp	0x42c6	; 0x42c6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3b 21 	jmp	0x4276	; 0x4276 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e9       	ldi	r24, 0x9D	; 157
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 57 21 	jmp	0x42ae	; 0x42ae <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 43 21 	jmp	0x4286	; 0x4286 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e9       	ldi	r22, 0x9D	; 157
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5f 21 	jmp	0x42be	; 0x42be <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 47 21 	jmp	0x428e	; 0x428e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 63 21 	jmp	0x42c6	; 0x42c6 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 47 21 	jmp	0x428e	; 0x428e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 63 21 	jmp	0x42c6	; 0x42c6 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 47 21 	jmp	0x428e	; 0x428e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 63 21 	jmp	0x42c6	; 0x42c6 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 47 21 	jmp	0x428e	; 0x428e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 63 21 	jmp	0x42c6	; 0x42c6 <__epilogue_restores__+0x18>

0000090a <__lesf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 47 21 	jmp	0x428e	; 0x428e <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__lesf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__lesf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__lesf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 63 21 	jmp	0x42c6	; 0x42c6 <__epilogue_restores__+0x18>

0000096a <__fixsfsi>:
     96a:	ac e0       	ldi	r26, 0x0C	; 12
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 4b 21 	jmp	0x4296	; 0x4296 <__prologue_saves__+0x20>
     976:	69 83       	std	Y+1, r22	; 0x01
     978:	7a 83       	std	Y+2, r23	; 0x02
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	be 01       	movw	r22, r28
     984:	6b 5f       	subi	r22, 0xFB	; 251
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__unpack_f>
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	61 f1       	breq	.+88     	; 0x9ea <__fixsfsi+0x80>
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	50 f1       	brcs	.+84     	; 0x9ea <__fixsfsi+0x80>
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	21 f4       	brne	.+8      	; 0x9a2 <__fixsfsi+0x38>
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
     99c:	88 23       	and	r24, r24
     99e:	51 f1       	breq	.+84     	; 0x9f4 <__fixsfsi+0x8a>
     9a0:	2e c0       	rjmp	.+92     	; 0x9fe <__fixsfsi+0x94>
     9a2:	2f 81       	ldd	r18, Y+7	; 0x07
     9a4:	38 85       	ldd	r19, Y+8	; 0x08
     9a6:	37 fd       	sbrc	r19, 7
     9a8:	20 c0       	rjmp	.+64     	; 0x9ea <__fixsfsi+0x80>
     9aa:	6e 81       	ldd	r22, Y+6	; 0x06
     9ac:	2f 31       	cpi	r18, 0x1F	; 31
     9ae:	31 05       	cpc	r19, r1
     9b0:	1c f0       	brlt	.+6      	; 0x9b8 <__fixsfsi+0x4e>
     9b2:	66 23       	and	r22, r22
     9b4:	f9 f0       	breq	.+62     	; 0x9f4 <__fixsfsi+0x8a>
     9b6:	23 c0       	rjmp	.+70     	; 0x9fe <__fixsfsi+0x94>
     9b8:	8e e1       	ldi	r24, 0x1E	; 30
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	82 1b       	sub	r24, r18
     9be:	93 0b       	sbc	r25, r19
     9c0:	29 85       	ldd	r18, Y+9	; 0x09
     9c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c6:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__fixsfsi+0x68>
     9ca:	56 95       	lsr	r21
     9cc:	47 95       	ror	r20
     9ce:	37 95       	ror	r19
     9d0:	27 95       	ror	r18
     9d2:	8a 95       	dec	r24
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__fixsfsi+0x60>
     9d6:	66 23       	and	r22, r22
     9d8:	b1 f0       	breq	.+44     	; 0xa06 <__fixsfsi+0x9c>
     9da:	50 95       	com	r21
     9dc:	40 95       	com	r20
     9de:	30 95       	com	r19
     9e0:	21 95       	neg	r18
     9e2:	3f 4f       	sbci	r19, 0xFF	; 255
     9e4:	4f 4f       	sbci	r20, 0xFF	; 255
     9e6:	5f 4f       	sbci	r21, 0xFF	; 255
     9e8:	0e c0       	rjmp	.+28     	; 0xa06 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__fixsfsi+0x9c>
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	3f ef       	ldi	r19, 0xFF	; 255
     9f8:	4f ef       	ldi	r20, 0xFF	; 255
     9fa:	5f e7       	ldi	r21, 0x7F	; 127
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__fixsfsi+0x9c>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	50 e8       	ldi	r21, 0x80	; 128
     a06:	b9 01       	movw	r22, r18
     a08:	ca 01       	movw	r24, r20
     a0a:	2c 96       	adiw	r28, 0x0c	; 12
     a0c:	e2 e0       	ldi	r30, 0x02	; 2
     a0e:	0c 94 67 21 	jmp	0x42ce	; 0x42ce <__epilogue_restores__+0x20>

00000a12 <__floatunsisf>:
     a12:	a8 e0       	ldi	r26, 0x08	; 8
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ef e0       	ldi	r30, 0x0F	; 15
     a18:	f5 e0       	ldi	r31, 0x05	; 5
     a1a:	0c 94 43 21 	jmp	0x4286	; 0x4286 <__prologue_saves__+0x10>
     a1e:	7b 01       	movw	r14, r22
     a20:	8c 01       	movw	r16, r24
     a22:	61 15       	cp	r22, r1
     a24:	71 05       	cpc	r23, r1
     a26:	81 05       	cpc	r24, r1
     a28:	91 05       	cpc	r25, r1
     a2a:	19 f4       	brne	.+6      	; 0xa32 <__floatunsisf+0x20>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	60 c0       	rjmp	.+192    	; 0xaf2 <__floatunsisf+0xe0>
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	89 83       	std	Y+1, r24	; 0x01
     a36:	8e e1       	ldi	r24, 0x1E	; 30
     a38:	c8 2e       	mov	r12, r24
     a3a:	d1 2c       	mov	r13, r1
     a3c:	dc 82       	std	Y+4, r13	; 0x04
     a3e:	cb 82       	std	Y+3, r12	; 0x03
     a40:	ed 82       	std	Y+5, r14	; 0x05
     a42:	fe 82       	std	Y+6, r15	; 0x06
     a44:	0f 83       	std	Y+7, r16	; 0x07
     a46:	18 87       	std	Y+8, r17	; 0x08
     a48:	c8 01       	movw	r24, r16
     a4a:	b7 01       	movw	r22, r14
     a4c:	0e 94 82 05 	call	0xb04	; 0xb04 <__clzsi2>
     a50:	fc 01       	movw	r30, r24
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	f7 ff       	sbrs	r31, 7
     a56:	3b c0       	rjmp	.+118    	; 0xace <__floatunsisf+0xbc>
     a58:	22 27       	eor	r18, r18
     a5a:	33 27       	eor	r19, r19
     a5c:	2e 1b       	sub	r18, r30
     a5e:	3f 0b       	sbc	r19, r31
     a60:	57 01       	movw	r10, r14
     a62:	68 01       	movw	r12, r16
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__floatunsisf+0x5e>
     a68:	d6 94       	lsr	r13
     a6a:	c7 94       	ror	r12
     a6c:	b7 94       	ror	r11
     a6e:	a7 94       	ror	r10
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__floatunsisf+0x56>
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__floatunsisf+0x7c>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	aa 1f       	adc	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	2a 95       	dec	r18
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__floatunsisf+0x74>
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	a1 09       	sbc	r26, r1
     a96:	b1 09       	sbc	r27, r1
     a98:	8e 21       	and	r24, r14
     a9a:	9f 21       	and	r25, r15
     a9c:	a0 23       	and	r26, r16
     a9e:	b1 23       	and	r27, r17
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	a1 05       	cpc	r26, r1
     aa4:	b1 05       	cpc	r27, r1
     aa6:	21 f0       	breq	.+8      	; 0xab0 <__floatunsisf+0x9e>
     aa8:	41 e0       	ldi	r20, 0x01	; 1
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	4a 29       	or	r20, r10
     ab2:	5b 29       	or	r21, r11
     ab4:	6c 29       	or	r22, r12
     ab6:	7d 29       	or	r23, r13
     ab8:	4d 83       	std	Y+5, r20	; 0x05
     aba:	5e 83       	std	Y+6, r21	; 0x06
     abc:	6f 83       	std	Y+7, r22	; 0x07
     abe:	78 87       	std	Y+8, r23	; 0x08
     ac0:	8e e1       	ldi	r24, 0x1E	; 30
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	8e 1b       	sub	r24, r30
     ac6:	9f 0b       	sbc	r25, r31
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
     acc:	12 c0       	rjmp	.+36     	; 0xaf2 <__floatunsisf+0xe0>
     ace:	30 97       	sbiw	r30, 0x00	; 0
     ad0:	81 f0       	breq	.+32     	; 0xaf2 <__floatunsisf+0xe0>
     ad2:	0e 2e       	mov	r0, r30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__floatunsisf+0xcc>
     ad6:	ee 0c       	add	r14, r14
     ad8:	ff 1c       	adc	r15, r15
     ada:	00 1f       	adc	r16, r16
     adc:	11 1f       	adc	r17, r17
     ade:	0a 94       	dec	r0
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__floatunsisf+0xc4>
     ae2:	ed 82       	std	Y+5, r14	; 0x05
     ae4:	fe 82       	std	Y+6, r15	; 0x06
     ae6:	0f 83       	std	Y+7, r16	; 0x07
     ae8:	18 87       	std	Y+8, r17	; 0x08
     aea:	ce 1a       	sub	r12, r30
     aec:	df 0a       	sbc	r13, r31
     aee:	dc 82       	std	Y+4, r13	; 0x04
     af0:	cb 82       	std	Y+3, r12	; 0x03
     af2:	1a 82       	std	Y+2, r1	; 0x02
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	0e 94 d1 05 	call	0xba2	; 0xba2 <__pack_f>
     afc:	28 96       	adiw	r28, 0x08	; 8
     afe:	ea e0       	ldi	r30, 0x0A	; 10
     b00:	0c 94 5f 21 	jmp	0x42be	; 0x42be <__epilogue_restores__+0x10>

00000b04 <__clzsi2>:
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	7b 01       	movw	r14, r22
     b0e:	8c 01       	movw	r16, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	e8 16       	cp	r14, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	f8 06       	cpc	r15, r24
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 07       	cpc	r16, r24
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	18 07       	cpc	r17, r24
     b20:	88 f4       	brcc	.+34     	; 0xb44 <__clzsi2+0x40>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	e8 16       	cp	r14, r24
     b26:	f1 04       	cpc	r15, r1
     b28:	01 05       	cpc	r16, r1
     b2a:	11 05       	cpc	r17, r1
     b2c:	31 f0       	breq	.+12     	; 0xb3a <__clzsi2+0x36>
     b2e:	28 f0       	brcs	.+10     	; 0xb3a <__clzsi2+0x36>
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	17 c0       	rjmp	.+46     	; 0xb68 <__clzsi2+0x64>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	12 c0       	rjmp	.+36     	; 0xb68 <__clzsi2+0x64>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	e8 16       	cp	r14, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	f8 06       	cpc	r15, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	08 07       	cpc	r16, r24
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	18 07       	cpc	r17, r24
     b54:	28 f0       	brcs	.+10     	; 0xb60 <__clzsi2+0x5c>
     b56:	88 e1       	ldi	r24, 0x18	; 24
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__clzsi2+0x64>
     b60:	80 e1       	ldi	r24, 0x10	; 16
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a0 e0       	ldi	r26, 0x00	; 0
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	20 e2       	ldi	r18, 0x20	; 32
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	28 1b       	sub	r18, r24
     b72:	39 0b       	sbc	r19, r25
     b74:	4a 0b       	sbc	r20, r26
     b76:	5b 0b       	sbc	r21, r27
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__clzsi2+0x7e>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	8a 95       	dec	r24
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__clzsi2+0x76>
     b86:	f7 01       	movw	r30, r14
     b88:	eb 55       	subi	r30, 0x5B	; 91
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	28 1b       	sub	r18, r24
     b90:	31 09       	sbc	r19, r1
     b92:	41 09       	sbc	r20, r1
     b94:	51 09       	sbc	r21, r1
     b96:	c9 01       	movw	r24, r18
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	08 95       	ret

00000ba2 <__pack_f>:
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	fc 01       	movw	r30, r24
     bae:	e4 80       	ldd	r14, Z+4	; 0x04
     bb0:	f5 80       	ldd	r15, Z+5	; 0x05
     bb2:	06 81       	ldd	r16, Z+6	; 0x06
     bb4:	17 81       	ldd	r17, Z+7	; 0x07
     bb6:	d1 80       	ldd	r13, Z+1	; 0x01
     bb8:	80 81       	ld	r24, Z
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	48 f4       	brcc	.+18     	; 0xbd0 <__pack_f+0x2e>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e1       	ldi	r26, 0x10	; 16
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e8 2a       	or	r14, r24
     bc8:	f9 2a       	or	r15, r25
     bca:	0a 2b       	or	r16, r26
     bcc:	1b 2b       	or	r17, r27
     bce:	a5 c0       	rjmp	.+330    	; 0xd1a <__pack_f+0x178>
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <__pack_f+0x34>
     bd4:	9f c0       	rjmp	.+318    	; 0xd14 <__pack_f+0x172>
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	21 f4       	brne	.+8      	; 0xbe2 <__pack_f+0x40>
     bda:	ee 24       	eor	r14, r14
     bdc:	ff 24       	eor	r15, r15
     bde:	87 01       	movw	r16, r14
     be0:	05 c0       	rjmp	.+10     	; 0xbec <__pack_f+0x4a>
     be2:	e1 14       	cp	r14, r1
     be4:	f1 04       	cpc	r15, r1
     be6:	01 05       	cpc	r16, r1
     be8:	11 05       	cpc	r17, r1
     bea:	19 f4       	brne	.+6      	; 0xbf2 <__pack_f+0x50>
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	96 c0       	rjmp	.+300    	; 0xd1e <__pack_f+0x17c>
     bf2:	62 81       	ldd	r22, Z+2	; 0x02
     bf4:	73 81       	ldd	r23, Z+3	; 0x03
     bf6:	9f ef       	ldi	r25, 0xFF	; 255
     bf8:	62 38       	cpi	r22, 0x82	; 130
     bfa:	79 07       	cpc	r23, r25
     bfc:	0c f0       	brlt	.+2      	; 0xc00 <__pack_f+0x5e>
     bfe:	5b c0       	rjmp	.+182    	; 0xcb6 <__pack_f+0x114>
     c00:	22 e8       	ldi	r18, 0x82	; 130
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	26 1b       	sub	r18, r22
     c06:	37 0b       	sbc	r19, r23
     c08:	2a 31       	cpi	r18, 0x1A	; 26
     c0a:	31 05       	cpc	r19, r1
     c0c:	2c f0       	brlt	.+10     	; 0xc18 <__pack_f+0x76>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	2a c0       	rjmp	.+84     	; 0xc6c <__pack_f+0xca>
     c18:	b8 01       	movw	r22, r16
     c1a:	a7 01       	movw	r20, r14
     c1c:	02 2e       	mov	r0, r18
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__pack_f+0x86>
     c20:	76 95       	lsr	r23
     c22:	67 95       	ror	r22
     c24:	57 95       	ror	r21
     c26:	47 95       	ror	r20
     c28:	0a 94       	dec	r0
     c2a:	d2 f7       	brpl	.-12     	; 0xc20 <__pack_f+0x7e>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a0 e0       	ldi	r26, 0x00	; 0
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__pack_f+0x9c>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	aa 1f       	adc	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	2a 95       	dec	r18
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__pack_f+0x94>
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	a1 09       	sbc	r26, r1
     c46:	b1 09       	sbc	r27, r1
     c48:	8e 21       	and	r24, r14
     c4a:	9f 21       	and	r25, r15
     c4c:	a0 23       	and	r26, r16
     c4e:	b1 23       	and	r27, r17
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	21 f0       	breq	.+8      	; 0xc60 <__pack_f+0xbe>
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	9a 01       	movw	r18, r20
     c62:	ab 01       	movw	r20, r22
     c64:	28 2b       	or	r18, r24
     c66:	39 2b       	or	r19, r25
     c68:	4a 2b       	or	r20, r26
     c6a:	5b 2b       	or	r21, r27
     c6c:	da 01       	movw	r26, r20
     c6e:	c9 01       	movw	r24, r18
     c70:	8f 77       	andi	r24, 0x7F	; 127
     c72:	90 70       	andi	r25, 0x00	; 0
     c74:	a0 70       	andi	r26, 0x00	; 0
     c76:	b0 70       	andi	r27, 0x00	; 0
     c78:	80 34       	cpi	r24, 0x40	; 64
     c7a:	91 05       	cpc	r25, r1
     c7c:	a1 05       	cpc	r26, r1
     c7e:	b1 05       	cpc	r27, r1
     c80:	39 f4       	brne	.+14     	; 0xc90 <__pack_f+0xee>
     c82:	27 ff       	sbrs	r18, 7
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <__pack_f+0xf6>
     c86:	20 5c       	subi	r18, 0xC0	; 192
     c88:	3f 4f       	sbci	r19, 0xFF	; 255
     c8a:	4f 4f       	sbci	r20, 0xFF	; 255
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <__pack_f+0xf6>
     c90:	21 5c       	subi	r18, 0xC1	; 193
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	4f 4f       	sbci	r20, 0xFF	; 255
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	20 30       	cpi	r18, 0x00	; 0
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	3a 07       	cpc	r19, r26
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	4a 07       	cpc	r20, r26
     ca6:	a0 e4       	ldi	r26, 0x40	; 64
     ca8:	5a 07       	cpc	r21, r26
     caa:	10 f0       	brcs	.+4      	; 0xcb0 <__pack_f+0x10e>
     cac:	e1 e0       	ldi	r30, 0x01	; 1
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	79 01       	movw	r14, r18
     cb2:	8a 01       	movw	r16, r20
     cb4:	27 c0       	rjmp	.+78     	; 0xd04 <__pack_f+0x162>
     cb6:	60 38       	cpi	r22, 0x80	; 128
     cb8:	71 05       	cpc	r23, r1
     cba:	64 f5       	brge	.+88     	; 0xd14 <__pack_f+0x172>
     cbc:	fb 01       	movw	r30, r22
     cbe:	e1 58       	subi	r30, 0x81	; 129
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	d8 01       	movw	r26, r16
     cc4:	c7 01       	movw	r24, r14
     cc6:	8f 77       	andi	r24, 0x7F	; 127
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	a0 70       	andi	r26, 0x00	; 0
     ccc:	b0 70       	andi	r27, 0x00	; 0
     cce:	80 34       	cpi	r24, 0x40	; 64
     cd0:	91 05       	cpc	r25, r1
     cd2:	a1 05       	cpc	r26, r1
     cd4:	b1 05       	cpc	r27, r1
     cd6:	39 f4       	brne	.+14     	; 0xce6 <__pack_f+0x144>
     cd8:	e7 fe       	sbrs	r14, 7
     cda:	0d c0       	rjmp	.+26     	; 0xcf6 <__pack_f+0x154>
     cdc:	80 e4       	ldi	r24, 0x40	; 64
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__pack_f+0x14c>
     ce6:	8f e3       	ldi	r24, 0x3F	; 63
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e8 0e       	add	r14, r24
     cf0:	f9 1e       	adc	r15, r25
     cf2:	0a 1f       	adc	r16, r26
     cf4:	1b 1f       	adc	r17, r27
     cf6:	17 ff       	sbrs	r17, 7
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <__pack_f+0x162>
     cfa:	16 95       	lsr	r17
     cfc:	07 95       	ror	r16
     cfe:	f7 94       	ror	r15
     d00:	e7 94       	ror	r14
     d02:	31 96       	adiw	r30, 0x01	; 1
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	16 95       	lsr	r17
     d08:	07 95       	ror	r16
     d0a:	f7 94       	ror	r15
     d0c:	e7 94       	ror	r14
     d0e:	8a 95       	dec	r24
     d10:	d1 f7       	brne	.-12     	; 0xd06 <__pack_f+0x164>
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <__pack_f+0x17c>
     d14:	ee 24       	eor	r14, r14
     d16:	ff 24       	eor	r15, r15
     d18:	87 01       	movw	r16, r14
     d1a:	ef ef       	ldi	r30, 0xFF	; 255
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	6e 2f       	mov	r22, r30
     d20:	67 95       	ror	r22
     d22:	66 27       	eor	r22, r22
     d24:	67 95       	ror	r22
     d26:	90 2f       	mov	r25, r16
     d28:	9f 77       	andi	r25, 0x7F	; 127
     d2a:	d7 94       	ror	r13
     d2c:	dd 24       	eor	r13, r13
     d2e:	d7 94       	ror	r13
     d30:	8e 2f       	mov	r24, r30
     d32:	86 95       	lsr	r24
     d34:	49 2f       	mov	r20, r25
     d36:	46 2b       	or	r20, r22
     d38:	58 2f       	mov	r21, r24
     d3a:	5d 29       	or	r21, r13
     d3c:	b7 01       	movw	r22, r14
     d3e:	ca 01       	movw	r24, r20
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	08 95       	ret

00000d4c <__unpack_f>:
     d4c:	fc 01       	movw	r30, r24
     d4e:	db 01       	movw	r26, r22
     d50:	40 81       	ld	r20, Z
     d52:	51 81       	ldd	r21, Z+1	; 0x01
     d54:	22 81       	ldd	r18, Z+2	; 0x02
     d56:	62 2f       	mov	r22, r18
     d58:	6f 77       	andi	r22, 0x7F	; 127
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	22 1f       	adc	r18, r18
     d5e:	22 27       	eor	r18, r18
     d60:	22 1f       	adc	r18, r18
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	89 2f       	mov	r24, r25
     d66:	88 0f       	add	r24, r24
     d68:	82 2b       	or	r24, r18
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	99 1f       	adc	r25, r25
     d70:	99 27       	eor	r25, r25
     d72:	99 1f       	adc	r25, r25
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	9c 93       	st	X, r25
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	21 15       	cp	r18, r1
     d7c:	31 05       	cpc	r19, r1
     d7e:	a9 f5       	brne	.+106    	; 0xdea <__unpack_f+0x9e>
     d80:	41 15       	cp	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	61 05       	cpc	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	11 f4       	brne	.+4      	; 0xd8e <__unpack_f+0x42>
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	37 c0       	rjmp	.+110    	; 0xdfc <__unpack_f+0xb0>
     d8e:	82 e8       	ldi	r24, 0x82	; 130
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	13 96       	adiw	r26, 0x03	; 3
     d94:	9c 93       	st	X, r25
     d96:	8e 93       	st	-X, r24
     d98:	12 97       	sbiw	r26, 0x02	; 2
     d9a:	9a 01       	movw	r18, r20
     d9c:	ab 01       	movw	r20, r22
     d9e:	67 e0       	ldi	r22, 0x07	; 7
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	44 1f       	adc	r20, r20
     da6:	55 1f       	adc	r21, r21
     da8:	6a 95       	dec	r22
     daa:	d1 f7       	brne	.-12     	; 0xda0 <__unpack_f+0x54>
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	8c 93       	st	X, r24
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <__unpack_f+0x80>
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	44 1f       	adc	r20, r20
     db8:	55 1f       	adc	r21, r21
     dba:	12 96       	adiw	r26, 0x02	; 2
     dbc:	8d 91       	ld	r24, X+
     dbe:	9c 91       	ld	r25, X
     dc0:	13 97       	sbiw	r26, 0x03	; 3
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	13 96       	adiw	r26, 0x03	; 3
     dc6:	9c 93       	st	X, r25
     dc8:	8e 93       	st	-X, r24
     dca:	12 97       	sbiw	r26, 0x02	; 2
     dcc:	20 30       	cpi	r18, 0x00	; 0
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	38 07       	cpc	r19, r24
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	48 07       	cpc	r20, r24
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	58 07       	cpc	r21, r24
     dda:	58 f3       	brcs	.-42     	; 0xdb2 <__unpack_f+0x66>
     ddc:	14 96       	adiw	r26, 0x04	; 4
     dde:	2d 93       	st	X+, r18
     de0:	3d 93       	st	X+, r19
     de2:	4d 93       	st	X+, r20
     de4:	5c 93       	st	X, r21
     de6:	17 97       	sbiw	r26, 0x07	; 7
     de8:	08 95       	ret
     dea:	2f 3f       	cpi	r18, 0xFF	; 255
     dec:	31 05       	cpc	r19, r1
     dee:	79 f4       	brne	.+30     	; 0xe0e <__unpack_f+0xc2>
     df0:	41 15       	cp	r20, r1
     df2:	51 05       	cpc	r21, r1
     df4:	61 05       	cpc	r22, r1
     df6:	71 05       	cpc	r23, r1
     df8:	19 f4       	brne	.+6      	; 0xe00 <__unpack_f+0xb4>
     dfa:	84 e0       	ldi	r24, 0x04	; 4
     dfc:	8c 93       	st	X, r24
     dfe:	08 95       	ret
     e00:	64 ff       	sbrs	r22, 4
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <__unpack_f+0xbe>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	8c 93       	st	X, r24
     e08:	12 c0       	rjmp	.+36     	; 0xe2e <__unpack_f+0xe2>
     e0a:	1c 92       	st	X, r1
     e0c:	10 c0       	rjmp	.+32     	; 0xe2e <__unpack_f+0xe2>
     e0e:	2f 57       	subi	r18, 0x7F	; 127
     e10:	30 40       	sbci	r19, 0x00	; 0
     e12:	13 96       	adiw	r26, 0x03	; 3
     e14:	3c 93       	st	X, r19
     e16:	2e 93       	st	-X, r18
     e18:	12 97       	sbiw	r26, 0x02	; 2
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	8c 93       	st	X, r24
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	44 0f       	add	r20, r20
     e22:	55 1f       	adc	r21, r21
     e24:	66 1f       	adc	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	8a 95       	dec	r24
     e2a:	d1 f7       	brne	.-12     	; 0xe20 <__unpack_f+0xd4>
     e2c:	70 64       	ori	r23, 0x40	; 64
     e2e:	14 96       	adiw	r26, 0x04	; 4
     e30:	4d 93       	st	X+, r20
     e32:	5d 93       	st	X+, r21
     e34:	6d 93       	st	X+, r22
     e36:	7c 93       	st	X, r23
     e38:	17 97       	sbiw	r26, 0x07	; 7
     e3a:	08 95       	ret

00000e3c <__fpcmp_parts_f>:
     e3c:	1f 93       	push	r17
     e3e:	dc 01       	movw	r26, r24
     e40:	fb 01       	movw	r30, r22
     e42:	9c 91       	ld	r25, X
     e44:	92 30       	cpi	r25, 0x02	; 2
     e46:	08 f4       	brcc	.+2      	; 0xe4a <__fpcmp_parts_f+0xe>
     e48:	47 c0       	rjmp	.+142    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e4a:	80 81       	ld	r24, Z
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	08 f4       	brcc	.+2      	; 0xe52 <__fpcmp_parts_f+0x16>
     e50:	43 c0       	rjmp	.+134    	; 0xed8 <__fpcmp_parts_f+0x9c>
     e52:	94 30       	cpi	r25, 0x04	; 4
     e54:	51 f4       	brne	.+20     	; 0xe6a <__fpcmp_parts_f+0x2e>
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	1c 91       	ld	r17, X
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	99 f5       	brne	.+102    	; 0xec4 <__fpcmp_parts_f+0x88>
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	68 2f       	mov	r22, r24
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	61 1b       	sub	r22, r17
     e66:	71 09       	sbc	r23, r1
     e68:	3f c0       	rjmp	.+126    	; 0xee8 <__fpcmp_parts_f+0xac>
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	21 f0       	breq	.+8      	; 0xe76 <__fpcmp_parts_f+0x3a>
     e6e:	92 30       	cpi	r25, 0x02	; 2
     e70:	31 f4       	brne	.+12     	; 0xe7e <__fpcmp_parts_f+0x42>
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	b9 f1       	breq	.+110    	; 0xee4 <__fpcmp_parts_f+0xa8>
     e76:	81 81       	ldd	r24, Z+1	; 0x01
     e78:	88 23       	and	r24, r24
     e7a:	89 f1       	breq	.+98     	; 0xede <__fpcmp_parts_f+0xa2>
     e7c:	2d c0       	rjmp	.+90     	; 0xed8 <__fpcmp_parts_f+0x9c>
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	1c 91       	ld	r17, X
     e82:	11 97       	sbiw	r26, 0x01	; 1
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	f1 f0       	breq	.+60     	; 0xec4 <__fpcmp_parts_f+0x88>
     e88:	81 81       	ldd	r24, Z+1	; 0x01
     e8a:	18 17       	cp	r17, r24
     e8c:	d9 f4       	brne	.+54     	; 0xec4 <__fpcmp_parts_f+0x88>
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	2d 91       	ld	r18, X+
     e92:	3c 91       	ld	r19, X
     e94:	13 97       	sbiw	r26, 0x03	; 3
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	93 81       	ldd	r25, Z+3	; 0x03
     e9a:	82 17       	cp	r24, r18
     e9c:	93 07       	cpc	r25, r19
     e9e:	94 f0       	brlt	.+36     	; 0xec4 <__fpcmp_parts_f+0x88>
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	bc f0       	brlt	.+46     	; 0xed4 <__fpcmp_parts_f+0x98>
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	8d 91       	ld	r24, X+
     eaa:	9d 91       	ld	r25, X+
     eac:	0d 90       	ld	r0, X+
     eae:	bc 91       	ld	r27, X
     eb0:	a0 2d       	mov	r26, r0
     eb2:	24 81       	ldd	r18, Z+4	; 0x04
     eb4:	35 81       	ldd	r19, Z+5	; 0x05
     eb6:	46 81       	ldd	r20, Z+6	; 0x06
     eb8:	57 81       	ldd	r21, Z+7	; 0x07
     eba:	28 17       	cp	r18, r24
     ebc:	39 07       	cpc	r19, r25
     ebe:	4a 07       	cpc	r20, r26
     ec0:	5b 07       	cpc	r21, r27
     ec2:	18 f4       	brcc	.+6      	; 0xeca <__fpcmp_parts_f+0x8e>
     ec4:	11 23       	and	r17, r17
     ec6:	41 f0       	breq	.+16     	; 0xed8 <__fpcmp_parts_f+0x9c>
     ec8:	0a c0       	rjmp	.+20     	; 0xede <__fpcmp_parts_f+0xa2>
     eca:	82 17       	cp	r24, r18
     ecc:	93 07       	cpc	r25, r19
     ece:	a4 07       	cpc	r26, r20
     ed0:	b5 07       	cpc	r27, r21
     ed2:	40 f4       	brcc	.+16     	; 0xee4 <__fpcmp_parts_f+0xa8>
     ed4:	11 23       	and	r17, r17
     ed6:	19 f0       	breq	.+6      	; 0xede <__fpcmp_parts_f+0xa2>
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <__fpcmp_parts_f+0xac>
     ede:	6f ef       	ldi	r22, 0xFF	; 255
     ee0:	7f ef       	ldi	r23, 0xFF	; 255
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <__fpcmp_parts_f+0xac>
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	cb 01       	movw	r24, r22
     eea:	1f 91       	pop	r17
     eec:	08 95       	ret

00000eee <MUART_voidUartInit>:
#include <util/delay.h>
#include <stdlib.h>


void MUART_voidUartInit (void)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <MUART_voidUartInit+0x6>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
	u16 UBRR;
	/* choose baud rate */
#if BAUD_RATE == 2400 || BAUD_RATE == 4800 || BAUD_RATE == 9600
	UBRR = (F_CPU/(16*(u32)BAUD_RATE))-1;
     ef8:	83 e3       	ldi	r24, 0x33	; 51
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	9a 83       	std	Y+2, r25	; 0x02
     efe:	89 83       	std	Y+1, r24	; 0x01
	UBRRL = (u8)UBRR;
     f00:	e9 e2       	ldi	r30, 0x29	; 41
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	80 83       	st	Z, r24
	UBRRH = (u8)(UBRR>>8);
     f08:	e0 e4       	ldi	r30, 0x40	; 64
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	89 2f       	mov	r24, r25
     f12:	99 27       	eor	r25, r25
     f14:	80 83       	st	Z, r24
#else
	#error "Select correct BAUD_RATE"
#endif

	/*Enable UART TRANSMITTER*/
	SET_BIT(UCSRB,TXEN);
     f16:	aa e2       	ldi	r26, 0x2A	; 42
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e2       	ldi	r30, 0x2A	; 42
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	88 60       	ori	r24, 0x08	; 8
     f22:	8c 93       	st	X, r24
	/*Enable UART RECEIVER*/
	SET_BIT(UCSRB,RXEN);
     f24:	aa e2       	ldi	r26, 0x2A	; 42
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	ea e2       	ldi	r30, 0x2A	; 42
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	80 61       	ori	r24, 0x10	; 16
     f30:	8c 93       	st	X, r24

	/*SELECT UCSRC REG*/
	SET_BIT(UCSRC, URSEL);
     f32:	a0 e4       	ldi	r26, 0x40	; 64
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e0 e4       	ldi	r30, 0x40	; 64
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 68       	ori	r24, 0x80	; 128
     f3e:	8c 93       	st	X, r24
	/* Choose  8-BITS number of bits of char size*/
	SET_BIT(UCSRC, UCSZ0);
     f40:	a0 e4       	ldi	r26, 0x40	; 64
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e0 e4       	ldi	r30, 0x40	; 64
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	82 60       	ori	r24, 0x02	; 2
     f4c:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
     f4e:	a0 e4       	ldi	r26, 0x40	; 64
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e0 e4       	ldi	r30, 0x40	; 64
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	84 60       	ori	r24, 0x04	; 4
     f5a:	8c 93       	st	X, r24
	CLR_BIT(UCSRB, UCSZ2);
     f5c:	aa e2       	ldi	r26, 0x2A	; 42
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	ea e2       	ldi	r30, 0x2A	; 42
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8b 7f       	andi	r24, 0xFB	; 251
     f68:	8c 93       	st	X, r24

}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <MUART_voidUartSend>:

void MUART_voidUartSend(u8 A_u8Data)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	89 83       	std	Y+1, r24	; 0x01
	/* WAIT FOR UDR BUFFER TO BE EMPTY*/
	while(GET_BIT(UCSRA,UDRE) == 0);
     f80:	eb e2       	ldi	r30, 0x2B	; 43
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	82 95       	swap	r24
     f88:	86 95       	lsr	r24
     f8a:	87 70       	andi	r24, 0x07	; 7
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	81 70       	andi	r24, 0x01	; 1
     f92:	90 70       	andi	r25, 0x00	; 0
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	a1 f3       	breq	.-24     	; 0xf80 <MUART_voidUartSend+0xc>
	UDR = A_u8Data;
     f98:	ec e2       	ldi	r30, 0x2C	; 44
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	80 83       	st	Z, r24
}
     fa0:	0f 90       	pop	r0
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <MUART_u8UartRecieve>:

u8 MUART_u8UartRecieve(void)
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
	/* WAIT FOR UDR BUFFER TO BE filled with unread data*/
	while(GET_BIT(UCSRA,RXC) == 0);
     fb0:	eb e2       	ldi	r30, 0x2B	; 43
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	88 23       	and	r24, r24
     fb8:	dc f7       	brge	.-10     	; 0xfb0 <MUART_u8UartRecieve+0x8>
	return UDR;
     fba:	ec e2       	ldi	r30, 0x2C	; 44
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
}
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <MUART_voidUartSendString>:

void MUART_voidUartSendString(u8* A_pu8Str)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	00 d0       	rcall	.+0      	; 0xfcc <MUART_voidUartSendString+0x6>
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	0a c0       	rjmp	.+20     	; 0xfea <MUART_voidUartSendString+0x24>
	while(*A_pu8Str != '\0')
	{
		MUART_voidUartSend(*A_pu8Str);
     fd6:	e9 81       	ldd	r30, Y+1	; 0x01
     fd8:	fa 81       	ldd	r31, Y+2	; 0x02
     fda:	80 81       	ld	r24, Z
     fdc:	0e 94 ba 07 	call	0xf74	; 0xf74 <MUART_voidUartSend>
		A_pu8Str++;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	9a 83       	std	Y+2, r25	; 0x02
     fe8:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void MUART_voidUartSendString(u8* A_pu8Str)
{
	while(*A_pu8Str != '\0')
     fea:	e9 81       	ldd	r30, Y+1	; 0x01
     fec:	fa 81       	ldd	r31, Y+2	; 0x02
     fee:	80 81       	ld	r24, Z
     ff0:	88 23       	and	r24, r24
     ff2:	89 f7       	brne	.-30     	; 0xfd6 <MUART_voidUartSendString+0x10>
	{
		MUART_voidUartSend(*A_pu8Str);
		A_pu8Str++;
	}
	MUART_voidUartSend('\n');
     ff4:	8a e0       	ldi	r24, 0x0A	; 10
     ff6:	0e 94 ba 07 	call	0xf74	; 0xf74 <MUART_voidUartSend>

}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <TMR2_VoidInit>:

static void (* GP_OvfCallBack)(void);
static void (* GP_OCMCallBack)(void);

void TMR2_VoidInit(void)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
#if TIMER2_Mood==Normal_MOOD
	clear_bit(TIMER2_TCCR2,WGM20);
	clear_bit(TIMER2_TCCR2,WGM21);

#elif TIMER2_Mood==CTC_MOOD
	clear_bit(TIMER2_TCCR2,WGM20);
    100c:	a5 e4       	ldi	r26, 0x45	; 69
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e5 e4       	ldi	r30, 0x45	; 69
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	8f 7b       	andi	r24, 0xBF	; 191
    1018:	8c 93       	st	X, r24
	set_bit(TIMER2_TCCR2,WGM21);
    101a:	a5 e4       	ldi	r26, 0x45	; 69
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e5 e4       	ldi	r30, 0x45	; 69
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	88 60       	ori	r24, 0x08	; 8
    1026:	8c 93       	st	X, r24
	set_bit(TIMER2_TCCR2,WGM21);
#else
#endif

#if Prescaler_Mood==NO_CLOCK_TIMER2
	clear_bit(TIMER2_TCCR2,CS20);
    1028:	a5 e4       	ldi	r26, 0x45	; 69
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e5 e4       	ldi	r30, 0x45	; 69
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8e 7f       	andi	r24, 0xFE	; 254
    1034:	8c 93       	st	X, r24
	clear_bit(TIMER2_TCCR2,CS21);
    1036:	a5 e4       	ldi	r26, 0x45	; 69
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e5 e4       	ldi	r30, 0x45	; 69
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8d 7f       	andi	r24, 0xFD	; 253
    1042:	8c 93       	st	X, r24
	clear_bit(TIMER2_TCCR2,CS22);
    1044:	a5 e4       	ldi	r26, 0x45	; 69
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e5 e4       	ldi	r30, 0x45	; 69
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	8b 7f       	andi	r24, 0xFB	; 251
    1050:	8c 93       	st	X, r24
	set_bit(TIMER2_TCCR2,CS22);

#else
#endif
#if OC2_MOOD==Normal_port_operation
	clear_bit(TIMER2_TCCR2,COM20);
    1052:	a5 e4       	ldi	r26, 0x45	; 69
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e5 e4       	ldi	r30, 0x45	; 69
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8f 7e       	andi	r24, 0xEF	; 239
    105e:	8c 93       	st	X, r24
	clear_bit(TIMER2_TCCR2,COM21);
    1060:	a5 e4       	ldi	r26, 0x45	; 69
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e5 e4       	ldi	r30, 0x45	; 69
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8f 7d       	andi	r24, 0xDF	; 223
    106c:	8c 93       	st	X, r24
	set_bit(TIMER2_TCCR2,COM21);
#else
#endif


}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <TMR2_VoidOVFInterruptEnable>:
void TMR2_VoidOVFInterruptEnable(void)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMER2_TIMSK,TOIE2);
    107c:	a9 e5       	ldi	r26, 0x59	; 89
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e9 e5       	ldi	r30, 0x59	; 89
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	80 64       	ori	r24, 0x40	; 64
    1088:	8c 93       	st	X, r24
}
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <TMR2_VoidOCMInterruptEnable>:
void TMR2_VoidOCMInterruptEnable(void)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMER2_TIMSK,OCIE2);
    1098:	a9 e5       	ldi	r26, 0x59	; 89
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e9 e5       	ldi	r30, 0x59	; 89
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	80 68       	ori	r24, 0x80	; 128
    10a4:	8c 93       	st	X, r24
}
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <TMR2_VoidOVFInterruptDisable>:
void TMR2_VoidOVFInterruptDisable(void)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
	clear_bit(TIMER2_TIMSK,TOIE2);
    10b4:	a9 e5       	ldi	r26, 0x59	; 89
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e9 e5       	ldi	r30, 0x59	; 89
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8f 7b       	andi	r24, 0xBF	; 191
    10c0:	8c 93       	st	X, r24
}
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <TMR2_VoidOCMInterruptDisable>:
void TMR2_VoidOCMInterruptDisable(void)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
	clear_bit(TIMER2_TIMSK,OCIE2);
    10d0:	a9 e5       	ldi	r26, 0x59	; 89
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e9 e5       	ldi	r30, 0x59	; 89
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	8f 77       	andi	r24, 0x7F	; 127
    10dc:	8c 93       	st	X, r24
}
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <TMR2_VoidSetPreload>:
void TMR2_VoidSetPreload(u8 A_u8PreLoading_Value)
{
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	0f 92       	push	r0
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	89 83       	std	Y+1, r24	; 0x01
	TIMER2_TCNT2=A_u8PreLoading_Value;
    10f0:	e4 e4       	ldi	r30, 0x44	; 68
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	80 83       	st	Z, r24
}
    10f8:	0f 90       	pop	r0
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <TMR2_VoidSetOCMValue>:
void TMR2_VoidSetOCMValue(u8 A_u8CompareMatchValue)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	0f 92       	push	r0
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	89 83       	std	Y+1, r24	; 0x01
	TIMER2_OCR2=A_u8CompareMatchValue;
    110c:	e3 e4       	ldi	r30, 0x43	; 67
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	80 83       	st	Z, r24
}
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <TMR2_OFV_SetCallBack>:
void TMR2_OFV_SetCallBack(void(*ptr)(void))
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <TMR2_OFV_SetCallBack+0x6>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01
	GP_OvfCallBack=ptr;
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	9a 81       	ldd	r25, Y+2	; 0x02
    112e:	90 93 b7 01 	sts	0x01B7, r25
    1132:	80 93 b6 01 	sts	0x01B6, r24
}
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <TMR2_OCM_SetCallBack>:
void TMR2_OCM_SetCallBack(void(*ptr)(void))
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <TMR2_OCM_SetCallBack+0x6>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	9a 83       	std	Y+2, r25	; 0x02
    114c:	89 83       	std	Y+1, r24	; 0x01
	GP_OCMCallBack=ptr;
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	90 93 b9 01 	sts	0x01B9, r25
    1156:	80 93 b8 01 	sts	0x01B8, r24
}
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <__vector_5>:
//OVF
void __vector_5 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_5 (void){
    1164:	1f 92       	push	r1
    1166:	0f 92       	push	r0
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	0f 92       	push	r0
    116c:	11 24       	eor	r1, r1
    116e:	2f 93       	push	r18
    1170:	3f 93       	push	r19
    1172:	4f 93       	push	r20
    1174:	5f 93       	push	r21
    1176:	6f 93       	push	r22
    1178:	7f 93       	push	r23
    117a:	8f 93       	push	r24
    117c:	9f 93       	push	r25
    117e:	af 93       	push	r26
    1180:	bf 93       	push	r27
    1182:	ef 93       	push	r30
    1184:	ff 93       	push	r31
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62

		GP_OvfCallBack();
    118e:	e0 91 b6 01 	lds	r30, 0x01B6
    1192:	f0 91 b7 01 	lds	r31, 0x01B7
    1196:	09 95       	icall
}
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	ff 91       	pop	r31
    119e:	ef 91       	pop	r30
    11a0:	bf 91       	pop	r27
    11a2:	af 91       	pop	r26
    11a4:	9f 91       	pop	r25
    11a6:	8f 91       	pop	r24
    11a8:	7f 91       	pop	r23
    11aa:	6f 91       	pop	r22
    11ac:	5f 91       	pop	r21
    11ae:	4f 91       	pop	r20
    11b0:	3f 91       	pop	r19
    11b2:	2f 91       	pop	r18
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <__vector_4>:
//OCM
void __vector_4 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_4 (void){
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	2f 93       	push	r18
    11ca:	3f 93       	push	r19
    11cc:	4f 93       	push	r20
    11ce:	5f 93       	push	r21
    11d0:	6f 93       	push	r22
    11d2:	7f 93       	push	r23
    11d4:	8f 93       	push	r24
    11d6:	9f 93       	push	r25
    11d8:	af 93       	push	r26
    11da:	bf 93       	push	r27
    11dc:	ef 93       	push	r30
    11de:	ff 93       	push	r31
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62

		GP_OCMCallBack();
    11e8:	e0 91 b8 01 	lds	r30, 0x01B8
    11ec:	f0 91 b9 01 	lds	r31, 0x01B9
    11f0:	09 95       	icall

}
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	ff 91       	pop	r31
    11f8:	ef 91       	pop	r30
    11fa:	bf 91       	pop	r27
    11fc:	af 91       	pop	r26
    11fe:	9f 91       	pop	r25
    1200:	8f 91       	pop	r24
    1202:	7f 91       	pop	r23
    1204:	6f 91       	pop	r22
    1206:	5f 91       	pop	r21
    1208:	4f 91       	pop	r20
    120a:	3f 91       	pop	r19
    120c:	2f 91       	pop	r18
    120e:	0f 90       	pop	r0
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	0f 90       	pop	r0
    1214:	1f 90       	pop	r1
    1216:	18 95       	reti

00001218 <MTIMER1_voidTimer1Init>:
void (* GP_CM1ACallback)(void);
void (* GP_CM1BCallback)(void);
void (* GP_CapCallBack)(void);
volatile u32 G_u32Counter=0;
void MTIMER1_voidTimer1Init(void)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62

	/*Select Timer1 Mode*/

#if Timer1Mode==NormalMode
	clear_bit(TCCR1A,WGM10);
    1220:	af e4       	ldi	r26, 0x4F	; 79
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	ef e4       	ldi	r30, 0x4F	; 79
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	8e 7f       	andi	r24, 0xFE	; 254
    122c:	8c 93       	st	X, r24
	clear_bit(TCCR1A,WGM11);
    122e:	af e4       	ldi	r26, 0x4F	; 79
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	ef e4       	ldi	r30, 0x4F	; 79
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	8d 7f       	andi	r24, 0xFD	; 253
    123a:	8c 93       	st	X, r24
	clear_bit(TCCR1B,WGM12);
    123c:	ae e4       	ldi	r26, 0x4E	; 78
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	ee e4       	ldi	r30, 0x4E	; 78
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	87 7f       	andi	r24, 0xF7	; 247
    1248:	8c 93       	st	X, r24
	clear_bit(TCCR1B,WGM13);
    124a:	ae e4       	ldi	r26, 0x4E	; 78
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	ee e4       	ldi	r30, 0x4E	; 78
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	8f 7e       	andi	r24, 0xEF	; 239
    1256:	8c 93       	st	X, r24
#if Timer1Prescaling==NoClkSource
	clear_bit(TCCR1B,CS10);
	clear_bit(TCCR1B,CS11);
	clear_bit(TCCR1B,CS12);
#elif Timer1Prescaling==NoPrescaling
	set_bit(TCCR1B,CS10);
    1258:	ae e4       	ldi	r26, 0x4E	; 78
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	ee e4       	ldi	r30, 0x4E	; 78
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	81 60       	ori	r24, 0x01	; 1
    1264:	8c 93       	st	X, r24
	clear_bit(TCCR1B,CS11);
    1266:	ae e4       	ldi	r26, 0x4E	; 78
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	ee e4       	ldi	r30, 0x4E	; 78
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	8d 7f       	andi	r24, 0xFD	; 253
    1272:	8c 93       	st	X, r24
	clear_bit(TCCR1B,CS12);
    1274:	ae e4       	ldi	r26, 0x4E	; 78
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ee e4       	ldi	r30, 0x4E	; 78
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	8b 7f       	andi	r24, 0xFB	; 251
    1280:	8c 93       	st	X, r24
	clear_bit(TCCR1A,COM1A1);
#elif OC1A_CompareMode==ToggleOnCM
	set_bit(TCCR1A,COM1A0);
	clear_bit(TCCR1A,COM1A1);
#elif OC1A_CompareMode==ClearOnCM
	clear_bit(TCCR1A,COM1A0);
    1282:	af e4       	ldi	r26, 0x4F	; 79
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	ef e4       	ldi	r30, 0x4F	; 79
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	8f 7b       	andi	r24, 0xBF	; 191
    128e:	8c 93       	st	X, r24
	set_bit(TCCR1A,COM1A1);
    1290:	af e4       	ldi	r26, 0x4F	; 79
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	ef e4       	ldi	r30, 0x4F	; 79
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	80 68       	ori	r24, 0x80	; 128
    129c:	8c 93       	st	X, r24
#endif

	/*Select Compare Output Mode For OC1B*/

#if OC1B_CompareMode==NormalPortOperation
	clear_bit(TCCR1A,COM1B0);
    129e:	af e4       	ldi	r26, 0x4F	; 79
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	ef e4       	ldi	r30, 0x4F	; 79
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	8f 7e       	andi	r24, 0xEF	; 239
    12aa:	8c 93       	st	X, r24
	clear_bit(TCCR1A,COM1B1);
    12ac:	af e4       	ldi	r26, 0x4F	; 79
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	ef e4       	ldi	r30, 0x4F	; 79
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	8f 7d       	andi	r24, 0xDF	; 223
    12b8:	8c 93       	st	X, r24
	set_bit(TCCR1A,COM1B0);
	set_bit(TCCR1A,COM1B1);
#else
#endif

}
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <MTIMER1_voidSetPreload>:

void MTIMER1_voidSetPreload(u16 A_u16PreloadValue)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <MTIMER1_voidSetPreload+0x6>
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=A_u16PreloadValue;
    12ce:	ec e4       	ldi	r30, 0x4C	; 76
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	91 83       	std	Z+1, r25	; 0x01
    12d8:	80 83       	st	Z, r24
}
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <MTIMER1_voidSetOCR1A>:
void MTIMER1_voidSetOCR1A(u16 A_u16OCR1AValue)
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <MTIMER1_voidSetOCR1A+0x6>
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=A_u16OCR1AValue;
    12f2:	ea e4       	ldi	r30, 0x4A	; 74
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	91 83       	std	Z+1, r25	; 0x01
    12fc:	80 83       	st	Z, r24
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <MTIMER1_voidSetOCR1B>:
void MTIMER1_voidSetOCR1B(u16 A_u16OCR1BValue)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	00 d0       	rcall	.+0      	; 0x130e <MTIMER1_voidSetOCR1B+0x6>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	9a 83       	std	Y+2, r25	; 0x02
    1314:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=A_u16OCR1BValue;
    1316:	e8 e4       	ldi	r30, 0x48	; 72
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	91 83       	std	Z+1, r25	; 0x01
    1320:	80 83       	st	Z, r24
}
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <MTIMER1_voidSetICR1>:
void MTIMER1_voidSetICR1(u16 A_u16ICR1Value)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	00 d0       	rcall	.+0      	; 0x1332 <MTIMER1_voidSetICR1+0x6>
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	9a 83       	std	Y+2, r25	; 0x02
    1338:	89 83       	std	Y+1, r24	; 0x01
	ICR1=A_u16ICR1Value;
    133a:	e6 e4       	ldi	r30, 0x46	; 70
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	9a 81       	ldd	r25, Y+2	; 0x02
    1342:	91 83       	std	Z+1, r25	; 0x01
    1344:	80 83       	st	Z, r24
}
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <MTIMER1_voidOvIntEnable>:
void MTIMER1_voidOvIntEnable(void)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMSK,TOIE1);
    1358:	a9 e5       	ldi	r26, 0x59	; 89
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e9 e5       	ldi	r30, 0x59	; 89
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	84 60       	ori	r24, 0x04	; 4
    1364:	8c 93       	st	X, r24
}
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <MTIMER1_voidOCR1AIntEnable>:
void MTIMER1_voidOCR1AIntEnable(void)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMSK,OCIE1A);
    1374:	a9 e5       	ldi	r26, 0x59	; 89
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e9 e5       	ldi	r30, 0x59	; 89
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	80 61       	ori	r24, 0x10	; 16
    1380:	8c 93       	st	X, r24
}
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <MTIMER1_voidOCR1BIntEnable>:
void MTIMER1_voidOCR1BIntEnable(void)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMSK,OCIE1B);
    1390:	a9 e5       	ldi	r26, 0x59	; 89
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e9 e5       	ldi	r30, 0x59	; 89
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	88 60       	ori	r24, 0x08	; 8
    139c:	8c 93       	st	X, r24
}
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <MTIMER1_voidICUIntEnable>:
void MTIMER1_voidICUIntEnable(void)
{
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMSK,TICIE1);
    13ac:	a9 e5       	ldi	r26, 0x59	; 89
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e9 e5       	ldi	r30, 0x59	; 89
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	80 62       	ori	r24, 0x20	; 32
    13b8:	8c 93       	st	X, r24
}
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <MTIMER1_u16TonCalc>:


u16 MTIMER1_u16TonCalc(void)
{
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <MTIMER1_u16TonCalc+0xa>
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <MTIMER1_u16TonCalc+0xc>
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <MTIMER1_u16TonCalc+0xe>
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
	u16 L_u16FirstRising,L_u16FirstFalling,L_u16TonValue;
	/*Detect Rising Edge*/
	//set_bit(TIFR,ICF1);
	set_bit(TCCR1B,ICES1);
    13d2:	ae e4       	ldi	r26, 0x4E	; 78
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ee e4       	ldi	r30, 0x4E	; 78
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	80 64       	ori	r24, 0x40	; 64
    13de:	8c 93       	st	X, r24
	set_bit(TCCR1B,ICNC1);
    13e0:	ae e4       	ldi	r26, 0x4E	; 78
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	ee e4       	ldi	r30, 0x4E	; 78
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	80 68       	ori	r24, 0x80	; 128
    13ec:	8c 93       	st	X, r24
	while(read_bit(TIFR,ICF1)==ICR1_NotCaptured);
    13ee:	e8 e5       	ldi	r30, 0x58	; 88
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	80 72       	andi	r24, 0x20	; 32
    13fa:	90 70       	andi	r25, 0x00	; 0
    13fc:	95 95       	asr	r25
    13fe:	87 95       	ror	r24
    1400:	95 95       	asr	r25
    1402:	87 95       	ror	r24
    1404:	95 95       	asr	r25
    1406:	87 95       	ror	r24
    1408:	95 95       	asr	r25
    140a:	87 95       	ror	r24
    140c:	95 95       	asr	r25
    140e:	87 95       	ror	r24
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	69 f3       	breq	.-38     	; 0x13ee <MTIMER1_u16TonCalc+0x2e>
	L_u16FirstRising=ICR1+(u32)ICR1_OVF*G_u32Counter;
    1414:	e6 e4       	ldi	r30, 0x46	; 70
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	00 81       	ld	r16, Z
    141a:	11 81       	ldd	r17, Z+1	; 0x01
    141c:	80 91 ba 01 	lds	r24, 0x01BA
    1420:	90 91 bb 01 	lds	r25, 0x01BB
    1424:	a0 91 bc 01 	lds	r26, 0x01BC
    1428:	b0 91 bd 01 	lds	r27, 0x01BD
    142c:	2f ef       	ldi	r18, 0xFF	; 255
    142e:	3f ef       	ldi	r19, 0xFF	; 255
    1430:	40 e0       	ldi	r20, 0x00	; 0
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	bc 01       	movw	r22, r24
    1436:	cd 01       	movw	r24, r26
    1438:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <__mulsi3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	80 0f       	add	r24, r16
    1442:	91 1f       	adc	r25, r17
    1444:	9e 83       	std	Y+6, r25	; 0x06
    1446:	8d 83       	std	Y+5, r24	; 0x05
	set_bit(TIFR,ICF1);
    1448:	a8 e5       	ldi	r26, 0x58	; 88
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e8 e5       	ldi	r30, 0x58	; 88
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	80 62       	ori	r24, 0x20	; 32
    1454:	8c 93       	st	X, r24

	/*Detect Falling Edge*/
	clear_bit(TCCR1B,ICES1);
    1456:	ae e4       	ldi	r26, 0x4E	; 78
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ee e4       	ldi	r30, 0x4E	; 78
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	8f 7b       	andi	r24, 0xBF	; 191
    1462:	8c 93       	st	X, r24
	while(read_bit(TIFR,ICF1)==ICR1_NotCaptured);
    1464:	e8 e5       	ldi	r30, 0x58	; 88
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	80 72       	andi	r24, 0x20	; 32
    1470:	90 70       	andi	r25, 0x00	; 0
    1472:	95 95       	asr	r25
    1474:	87 95       	ror	r24
    1476:	95 95       	asr	r25
    1478:	87 95       	ror	r24
    147a:	95 95       	asr	r25
    147c:	87 95       	ror	r24
    147e:	95 95       	asr	r25
    1480:	87 95       	ror	r24
    1482:	95 95       	asr	r25
    1484:	87 95       	ror	r24
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	69 f3       	breq	.-38     	; 0x1464 <MTIMER1_u16TonCalc+0xa4>
	L_u16FirstFalling=ICR1+(u32)ICR1_OVF*G_u32Counter;
    148a:	e6 e4       	ldi	r30, 0x46	; 70
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	00 81       	ld	r16, Z
    1490:	11 81       	ldd	r17, Z+1	; 0x01
    1492:	80 91 ba 01 	lds	r24, 0x01BA
    1496:	90 91 bb 01 	lds	r25, 0x01BB
    149a:	a0 91 bc 01 	lds	r26, 0x01BC
    149e:	b0 91 bd 01 	lds	r27, 0x01BD
    14a2:	2f ef       	ldi	r18, 0xFF	; 255
    14a4:	3f ef       	ldi	r19, 0xFF	; 255
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	bc 01       	movw	r22, r24
    14ac:	cd 01       	movw	r24, r26
    14ae:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <__mulsi3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	80 0f       	add	r24, r16
    14b8:	91 1f       	adc	r25, r17
    14ba:	9c 83       	std	Y+4, r25	; 0x04
    14bc:	8b 83       	std	Y+3, r24	; 0x03
	set_bit(TIFR,ICF1);
    14be:	a8 e5       	ldi	r26, 0x58	; 88
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e8 e5       	ldi	r30, 0x58	; 88
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	80 62       	ori	r24, 0x20	; 32
    14ca:	8c 93       	st	X, r24
	G_u32Counter=ICR1_RestartCounting;
    14cc:	10 92 ba 01 	sts	0x01BA, r1
    14d0:	10 92 bb 01 	sts	0x01BB, r1
    14d4:	10 92 bc 01 	sts	0x01BC, r1
    14d8:	10 92 bd 01 	sts	0x01BD, r1
	L_u16TonValue=L_u16FirstFalling-L_u16FirstRising;
    14dc:	2b 81       	ldd	r18, Y+3	; 0x03
    14de:	3c 81       	ldd	r19, Y+4	; 0x04
    14e0:	8d 81       	ldd	r24, Y+5	; 0x05
    14e2:	9e 81       	ldd	r25, Y+6	; 0x06
    14e4:	a9 01       	movw	r20, r18
    14e6:	48 1b       	sub	r20, r24
    14e8:	59 0b       	sbc	r21, r25
    14ea:	ca 01       	movw	r24, r20
    14ec:	9a 83       	std	Y+2, r25	; 0x02
    14ee:	89 83       	std	Y+1, r24	; 0x01
	L_u16TonValue=L_u16TonValue*((f32)Timer1Prescaling/F_Sys);
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	9a 81       	ldd	r25, Y+2	; 0x02
    14f4:	cc 01       	movw	r24, r24
    14f6:	a0 e0       	ldi	r26, 0x00	; 0
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	bc 01       	movw	r22, r24
    14fc:	cd 01       	movw	r24, r26
    14fe:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	bc 01       	movw	r22, r24
    1508:	cd 01       	movw	r24, r26
    150a:	2d eb       	ldi	r18, 0xBD	; 189
    150c:	37 e3       	ldi	r19, 0x37	; 55
    150e:	46 e0       	ldi	r20, 0x06	; 6
    1510:	54 e3       	ldi	r21, 0x34	; 52
    1512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	bc 01       	movw	r22, r24
    151c:	cd 01       	movw	r24, r26
    151e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01
	return L_u16TonValue;
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    152e:	26 96       	adiw	r28, 0x06	; 6
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	08 95       	ret

00001544 <MTIMER1_voidOvCallBack>:
void MTIMER1_voidOvCallBack(void (*ptr)(void))
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	00 d0       	rcall	.+0      	; 0x154a <MTIMER1_voidOvCallBack+0x6>
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	89 83       	std	Y+1, r24	; 0x01
	GP_OvCallback=ptr;
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	9a 81       	ldd	r25, Y+2	; 0x02
    1556:	90 93 d5 01 	sts	0x01D5, r25
    155a:	80 93 d4 01 	sts	0x01D4, r24
}
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <__vector_9>:
void __vector_9 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_9 (void){
    1568:	1f 92       	push	r1
    156a:	0f 92       	push	r0
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	0f 92       	push	r0
    1570:	11 24       	eor	r1, r1
    1572:	2f 93       	push	r18
    1574:	3f 93       	push	r19
    1576:	4f 93       	push	r20
    1578:	5f 93       	push	r21
    157a:	6f 93       	push	r22
    157c:	7f 93       	push	r23
    157e:	8f 93       	push	r24
    1580:	9f 93       	push	r25
    1582:	af 93       	push	r26
    1584:	bf 93       	push	r27
    1586:	ef 93       	push	r30
    1588:	ff 93       	push	r31
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
	GP_OvCallback();
    1592:	e0 91 d4 01 	lds	r30, 0x01D4
    1596:	f0 91 d5 01 	lds	r31, 0x01D5
    159a:	09 95       	icall
}
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	ff 91       	pop	r31
    15a2:	ef 91       	pop	r30
    15a4:	bf 91       	pop	r27
    15a6:	af 91       	pop	r26
    15a8:	9f 91       	pop	r25
    15aa:	8f 91       	pop	r24
    15ac:	7f 91       	pop	r23
    15ae:	6f 91       	pop	r22
    15b0:	5f 91       	pop	r21
    15b2:	4f 91       	pop	r20
    15b4:	3f 91       	pop	r19
    15b6:	2f 91       	pop	r18
    15b8:	0f 90       	pop	r0
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	0f 90       	pop	r0
    15be:	1f 90       	pop	r1
    15c0:	18 95       	reti

000015c2 <MTIMER1_voidOCR1ACallBack>:
void MTIMER1_voidOCR1ACallBack(void (*ptr)(void))
{
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <MTIMER1_voidOCR1ACallBack+0x6>
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	9a 83       	std	Y+2, r25	; 0x02
    15ce:	89 83       	std	Y+1, r24	; 0x01
	GP_CM1ACallback=ptr;
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	9a 81       	ldd	r25, Y+2	; 0x02
    15d4:	90 93 d1 01 	sts	0x01D1, r25
    15d8:	80 93 d0 01 	sts	0x01D0, r24
}
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <__vector_7>:
void __vector_7 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_7 (void){
    15e6:	1f 92       	push	r1
    15e8:	0f 92       	push	r0
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	0f 92       	push	r0
    15ee:	11 24       	eor	r1, r1
    15f0:	2f 93       	push	r18
    15f2:	3f 93       	push	r19
    15f4:	4f 93       	push	r20
    15f6:	5f 93       	push	r21
    15f8:	6f 93       	push	r22
    15fa:	7f 93       	push	r23
    15fc:	8f 93       	push	r24
    15fe:	9f 93       	push	r25
    1600:	af 93       	push	r26
    1602:	bf 93       	push	r27
    1604:	ef 93       	push	r30
    1606:	ff 93       	push	r31
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
	GP_CM1ACallback();
    1610:	e0 91 d0 01 	lds	r30, 0x01D0
    1614:	f0 91 d1 01 	lds	r31, 0x01D1
    1618:	09 95       	icall
}
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	ff 91       	pop	r31
    1620:	ef 91       	pop	r30
    1622:	bf 91       	pop	r27
    1624:	af 91       	pop	r26
    1626:	9f 91       	pop	r25
    1628:	8f 91       	pop	r24
    162a:	7f 91       	pop	r23
    162c:	6f 91       	pop	r22
    162e:	5f 91       	pop	r21
    1630:	4f 91       	pop	r20
    1632:	3f 91       	pop	r19
    1634:	2f 91       	pop	r18
    1636:	0f 90       	pop	r0
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	0f 90       	pop	r0
    163c:	1f 90       	pop	r1
    163e:	18 95       	reti

00001640 <MTIMER1_voidOCR1BCallBack>:
void MTIMER1_voidOCR1BCallBack(void (*ptr)(void))
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	00 d0       	rcall	.+0      	; 0x1646 <MTIMER1_voidOCR1BCallBack+0x6>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	9a 83       	std	Y+2, r25	; 0x02
    164c:	89 83       	std	Y+1, r24	; 0x01
	GP_CM1BCallback=ptr;
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	9a 81       	ldd	r25, Y+2	; 0x02
    1652:	90 93 d7 01 	sts	0x01D7, r25
    1656:	80 93 d6 01 	sts	0x01D6, r24
}
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <__vector_8>:
void __vector_8 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_8 (void){
    1664:	1f 92       	push	r1
    1666:	0f 92       	push	r0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	0f 92       	push	r0
    166c:	11 24       	eor	r1, r1
    166e:	2f 93       	push	r18
    1670:	3f 93       	push	r19
    1672:	4f 93       	push	r20
    1674:	5f 93       	push	r21
    1676:	6f 93       	push	r22
    1678:	7f 93       	push	r23
    167a:	8f 93       	push	r24
    167c:	9f 93       	push	r25
    167e:	af 93       	push	r26
    1680:	bf 93       	push	r27
    1682:	ef 93       	push	r30
    1684:	ff 93       	push	r31
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
	GP_CM1BCallback();
    168e:	e0 91 d6 01 	lds	r30, 0x01D6
    1692:	f0 91 d7 01 	lds	r31, 0x01D7
    1696:	09 95       	icall
}
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	ff 91       	pop	r31
    169e:	ef 91       	pop	r30
    16a0:	bf 91       	pop	r27
    16a2:	af 91       	pop	r26
    16a4:	9f 91       	pop	r25
    16a6:	8f 91       	pop	r24
    16a8:	7f 91       	pop	r23
    16aa:	6f 91       	pop	r22
    16ac:	5f 91       	pop	r21
    16ae:	4f 91       	pop	r20
    16b0:	3f 91       	pop	r19
    16b2:	2f 91       	pop	r18
    16b4:	0f 90       	pop	r0
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	0f 90       	pop	r0
    16ba:	1f 90       	pop	r1
    16bc:	18 95       	reti

000016be <MTIMER1_voidOCapCallBack>:
void MTIMER1_voidOCapCallBack(void (*ptr)(void))
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <MTIMER1_voidOCapCallBack+0x6>
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    16ca:	89 83       	std	Y+1, r24	; 0x01
	GP_CapCallBack=ptr;
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	9a 81       	ldd	r25, Y+2	; 0x02
    16d0:	90 93 d3 01 	sts	0x01D3, r25
    16d4:	80 93 d2 01 	sts	0x01D2, r24
}
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <__vector_6>:
void __vector_6 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_6 (void){
    16e2:	1f 92       	push	r1
    16e4:	0f 92       	push	r0
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	0f 92       	push	r0
    16ea:	11 24       	eor	r1, r1
    16ec:	2f 93       	push	r18
    16ee:	3f 93       	push	r19
    16f0:	4f 93       	push	r20
    16f2:	5f 93       	push	r21
    16f4:	6f 93       	push	r22
    16f6:	7f 93       	push	r23
    16f8:	8f 93       	push	r24
    16fa:	9f 93       	push	r25
    16fc:	af 93       	push	r26
    16fe:	bf 93       	push	r27
    1700:	ef 93       	push	r30
    1702:	ff 93       	push	r31
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
	GP_CapCallBack();
    170c:	e0 91 d2 01 	lds	r30, 0x01D2
    1710:	f0 91 d3 01 	lds	r31, 0x01D3
    1714:	09 95       	icall
}
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	ff 91       	pop	r31
    171c:	ef 91       	pop	r30
    171e:	bf 91       	pop	r27
    1720:	af 91       	pop	r26
    1722:	9f 91       	pop	r25
    1724:	8f 91       	pop	r24
    1726:	7f 91       	pop	r23
    1728:	6f 91       	pop	r22
    172a:	5f 91       	pop	r21
    172c:	4f 91       	pop	r20
    172e:	3f 91       	pop	r19
    1730:	2f 91       	pop	r18
    1732:	0f 90       	pop	r0
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	0f 90       	pop	r0
    1738:	1f 90       	pop	r1
    173a:	18 95       	reti

0000173c <TMR0_VoidInit>:

static void (* GP_OvfCallBack)(void);
static void (* GP_OCMCallBack)(void);

void TMR0_VoidInit(void)
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_Mood==Normal_MOOD
	clear_bit(TIMER0_TCCR0,WGM00);
    1744:	a3 e5       	ldi	r26, 0x53	; 83
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e3 e5       	ldi	r30, 0x53	; 83
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	8f 7b       	andi	r24, 0xBF	; 191
    1750:	8c 93       	st	X, r24
	clear_bit(TIMER0_TCCR0,WGM01);
    1752:	a3 e5       	ldi	r26, 0x53	; 83
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e3 e5       	ldi	r30, 0x53	; 83
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	87 7f       	andi	r24, 0xF7	; 247
    175e:	8c 93       	st	X, r24
#elif Prescaler_Mood0==NO_PRESCALER_TIMER0
	set_bit(TIMER0_TCCR0,CS00);
	clear_bit(TIMER0_TCCR0,CS01);
	clear_bit(TIMER0_TCCR0,CS02);
#elif Prescaler_Mood0==PRESCALER_TIMER0_8
	clear_bit(TIMER0_TCCR0,CS00);
    1760:	a3 e5       	ldi	r26, 0x53	; 83
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e3 e5       	ldi	r30, 0x53	; 83
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	8e 7f       	andi	r24, 0xFE	; 254
    176c:	8c 93       	st	X, r24
	set_bit(TIMER0_TCCR0,CS01);
    176e:	a3 e5       	ldi	r26, 0x53	; 83
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e3 e5       	ldi	r30, 0x53	; 83
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	82 60       	ori	r24, 0x02	; 2
    177a:	8c 93       	st	X, r24
	clear_bit(TIMER0_TCCR0,CS02);
    177c:	a3 e5       	ldi	r26, 0x53	; 83
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e3 e5       	ldi	r30, 0x53	; 83
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	8b 7f       	andi	r24, 0xFB	; 251
    1788:	8c 93       	st	X, r24
	set_bit(TIMER0_TCCR0,CS02);

#else
#endif
#if OC0_MOOD==Normal_port_operation
	clear_bit(TIMER0_TCCR0,COM00);
    178a:	a3 e5       	ldi	r26, 0x53	; 83
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e3 e5       	ldi	r30, 0x53	; 83
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8f 7e       	andi	r24, 0xEF	; 239
    1796:	8c 93       	st	X, r24
	clear_bit(TIMER0_TCCR0,COM01);
    1798:	a3 e5       	ldi	r26, 0x53	; 83
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e3 e5       	ldi	r30, 0x53	; 83
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8f 7d       	andi	r24, 0xDF	; 223
    17a4:	8c 93       	st	X, r24
	set_bit(TIMER0_TCCR0,COM01);
#else
#endif


}
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <TMR0_VoidOVFInterruptEnable>:
void TMR0_VoidOVFInterruptEnable(void)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMER0_TIMSK,TOIE0);
    17b4:	a9 e5       	ldi	r26, 0x59	; 89
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e9 e5       	ldi	r30, 0x59	; 89
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	81 60       	ori	r24, 0x01	; 1
    17c0:	8c 93       	st	X, r24
}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <TMR0_VoidOCMInterruptEnable>:
void TMR0_VoidOCMInterruptEnable(void)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMER0_TIMSK,OCIE0);
    17d0:	a9 e5       	ldi	r26, 0x59	; 89
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e9 e5       	ldi	r30, 0x59	; 89
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	82 60       	ori	r24, 0x02	; 2
    17dc:	8c 93       	st	X, r24
}
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <TMR0_VoidOVFInterruptDisable>:
void TMR0_VoidOVFInterruptDisable(void)
{
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
	clear_bit(TIMER0_TIMSK,TOIE0);
    17ec:	a9 e5       	ldi	r26, 0x59	; 89
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e9 e5       	ldi	r30, 0x59	; 89
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	8e 7f       	andi	r24, 0xFE	; 254
    17f8:	8c 93       	st	X, r24
}
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <TMR0_VoidOCMInterruptDisable>:
void TMR0_VoidOCMInterruptDisable(void)
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
	clear_bit(TIMER0_TIMSK,OCIE0);
    1808:	a9 e5       	ldi	r26, 0x59	; 89
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e9 e5       	ldi	r30, 0x59	; 89
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	8d 7f       	andi	r24, 0xFD	; 253
    1814:	8c 93       	st	X, r24
}
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <TMR0_VoidSetPreload>:
void TMR0_VoidSetPreload(u8 A_u8PreLoading_Value)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	0f 92       	push	r0
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0=A_u8PreLoading_Value;
    1828:	e2 e5       	ldi	r30, 0x52	; 82
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	80 83       	st	Z, r24
}
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <TMR0_VoidSetOCMValue>:
void TMR0_VoidSetOCMValue(u8 A_u8CompareMatchValue)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	0f 92       	push	r0
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0=A_u8CompareMatchValue;
    1844:	ec e5       	ldi	r30, 0x5C	; 92
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	80 83       	st	Z, r24
}
    184c:	0f 90       	pop	r0
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <TMR0_OFV_SetCallBack>:
void TMR0_OFV_SetCallBack(void(*ptr)(void))
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <TMR0_OFV_SetCallBack+0x6>
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	9a 83       	std	Y+2, r25	; 0x02
    1860:	89 83       	std	Y+1, r24	; 0x01
	GP_OvfCallBack=ptr;
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	90 93 bf 01 	sts	0x01BF, r25
    186a:	80 93 be 01 	sts	0x01BE, r24
}
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <TMR0_OCM_SetCallBack>:
void TMR0_OCM_SetCallBack(void(*ptr)(void))
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	00 d0       	rcall	.+0      	; 0x187e <TMR0_OCM_SetCallBack+0x6>
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	9a 83       	std	Y+2, r25	; 0x02
    1884:	89 83       	std	Y+1, r24	; 0x01
	GP_OCMCallBack=ptr;
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	9a 81       	ldd	r25, Y+2	; 0x02
    188a:	90 93 c1 01 	sts	0x01C1, r25
    188e:	80 93 c0 01 	sts	0x01C0, r24
}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <__vector_11>:
//OVF
void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_11 (void){
    189c:	1f 92       	push	r1
    189e:	0f 92       	push	r0
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	0f 92       	push	r0
    18a4:	11 24       	eor	r1, r1
    18a6:	2f 93       	push	r18
    18a8:	3f 93       	push	r19
    18aa:	4f 93       	push	r20
    18ac:	5f 93       	push	r21
    18ae:	6f 93       	push	r22
    18b0:	7f 93       	push	r23
    18b2:	8f 93       	push	r24
    18b4:	9f 93       	push	r25
    18b6:	af 93       	push	r26
    18b8:	bf 93       	push	r27
    18ba:	ef 93       	push	r30
    18bc:	ff 93       	push	r31
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62

		GP_OvfCallBack();
    18c6:	e0 91 be 01 	lds	r30, 0x01BE
    18ca:	f0 91 bf 01 	lds	r31, 0x01BF
    18ce:	09 95       	icall
}
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	ff 91       	pop	r31
    18d6:	ef 91       	pop	r30
    18d8:	bf 91       	pop	r27
    18da:	af 91       	pop	r26
    18dc:	9f 91       	pop	r25
    18de:	8f 91       	pop	r24
    18e0:	7f 91       	pop	r23
    18e2:	6f 91       	pop	r22
    18e4:	5f 91       	pop	r21
    18e6:	4f 91       	pop	r20
    18e8:	3f 91       	pop	r19
    18ea:	2f 91       	pop	r18
    18ec:	0f 90       	pop	r0
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	0f 90       	pop	r0
    18f2:	1f 90       	pop	r1
    18f4:	18 95       	reti

000018f6 <__vector_10>:
//OCM
void __vector_10 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_10 (void){
    18f6:	1f 92       	push	r1
    18f8:	0f 92       	push	r0
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	0f 92       	push	r0
    18fe:	11 24       	eor	r1, r1
    1900:	2f 93       	push	r18
    1902:	3f 93       	push	r19
    1904:	4f 93       	push	r20
    1906:	5f 93       	push	r21
    1908:	6f 93       	push	r22
    190a:	7f 93       	push	r23
    190c:	8f 93       	push	r24
    190e:	9f 93       	push	r25
    1910:	af 93       	push	r26
    1912:	bf 93       	push	r27
    1914:	ef 93       	push	r30
    1916:	ff 93       	push	r31
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62

		GP_OCMCallBack();
    1920:	e0 91 c0 01 	lds	r30, 0x01C0
    1924:	f0 91 c1 01 	lds	r31, 0x01C1
    1928:	09 95       	icall

}
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	ff 91       	pop	r31
    1930:	ef 91       	pop	r30
    1932:	bf 91       	pop	r27
    1934:	af 91       	pop	r26
    1936:	9f 91       	pop	r25
    1938:	8f 91       	pop	r24
    193a:	7f 91       	pop	r23
    193c:	6f 91       	pop	r22
    193e:	5f 91       	pop	r21
    1940:	4f 91       	pop	r20
    1942:	3f 91       	pop	r19
    1944:	2f 91       	pop	r18
    1946:	0f 90       	pop	r0
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	0f 90       	pop	r0
    194c:	1f 90       	pop	r1
    194e:	18 95       	reti

00001950 <MTWI_voidMasterInt>:
#define F_CPU 8000000UL
#include <util/delay.h>
#include <math.h>

void MTWI_voidMasterInt (u32 A_u32Scl)
{
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	00 d0       	rcall	.+0      	; 0x195a <MTWI_voidMasterInt+0xa>
    195a:	00 d0       	rcall	.+0      	; 0x195c <MTWI_voidMasterInt+0xc>
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	69 83       	std	Y+1, r22	; 0x01
    1962:	7a 83       	std	Y+2, r23	; 0x02
    1964:	8b 83       	std	Y+3, r24	; 0x03
    1966:	9c 83       	std	Y+4, r25	; 0x04
	#if   PRESCALAR == 1
	      TWSR = 0 ;  /*TWPS0 = 0 , TWPS1 = 0*/
          #define POWER_VAL  0
	#elif PRESCALAR == 4
	      TWSR = 1 ;  /*TWPS0 = 0 , TWPS1 = 1*/
    1968:	e1 e2       	ldi	r30, 0x21	; 33
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	80 83       	st	Z, r24
	      TWSR = 3 ;  /*TWPS0 = 1 , TWPS1 = 1*/
          #define POWER_VAL  3
	#else
		#error "select correct options of PRESCALAR"
	#endif
	TWBR= (u8) (((F_CPU/A_u32Scl)-16) / (2*pow ((f64)4.0,POWER_VAL)));
    1970:	00 e2       	ldi	r16, 0x20	; 32
    1972:	10 e0       	ldi	r17, 0x00	; 0
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	92 e1       	ldi	r25, 0x12	; 18
    1978:	aa e7       	ldi	r26, 0x7A	; 122
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	29 81       	ldd	r18, Y+1	; 0x01
    197e:	3a 81       	ldd	r19, Y+2	; 0x02
    1980:	4b 81       	ldd	r20, Y+3	; 0x03
    1982:	5c 81       	ldd	r21, Y+4	; 0x04
    1984:	bc 01       	movw	r22, r24
    1986:	cd 01       	movw	r24, r26
    1988:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
    198c:	da 01       	movw	r26, r20
    198e:	c9 01       	movw	r24, r18
    1990:	40 97       	sbiw	r24, 0x10	; 16
    1992:	a1 09       	sbc	r26, r1
    1994:	b1 09       	sbc	r27, r1
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	bc 01       	movw	r22, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	51 e4       	ldi	r21, 0x41	; 65
    19ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	f8 01       	movw	r30, r16
    19c4:	80 83       	st	Z, r24
}
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	08 95       	ret

000019d8 <MTWI_voidMasterSendStartCondition>:

void MTWI_voidMasterSendStartCondition (void)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	2e 97       	sbiw	r28, 0x0e	; 14
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a6 e9       	ldi	r26, 0x96	; 150
    19f2:	b3 e4       	ldi	r27, 0x43	; 67
    19f4:	8b 87       	std	Y+11, r24	; 0x0b
    19f6:	9c 87       	std	Y+12, r25	; 0x0c
    19f8:	ad 87       	std	Y+13, r26	; 0x0d
    19fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	4a ef       	ldi	r20, 0xFA	; 250
    1a0a:	54 e4       	ldi	r21, 0x44	; 68
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	8f 83       	std	Y+7, r24	; 0x07
    1a16:	98 87       	std	Y+8, r25	; 0x08
    1a18:	a9 87       	std	Y+9, r26	; 0x09
    1a1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1e:	78 85       	ldd	r23, Y+8	; 0x08
    1a20:	89 85       	ldd	r24, Y+9	; 0x09
    1a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e8       	ldi	r20, 0x80	; 128
    1a2a:	5f e3       	ldi	r21, 0x3F	; 63
    1a2c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1a30:	88 23       	and	r24, r24
    1a32:	2c f4       	brge	.+10     	; 0x1a3e <MTWI_voidMasterSendStartCondition+0x66>
		__ticks = 1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
    1a3c:	3f c0       	rjmp	.+126    	; 0x1abc <MTWI_voidMasterSendStartCondition+0xe4>
	else if (__tmp > 65535)
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	4c f5       	brge	.+82     	; 0x1aa8 <MTWI_voidMasterSendStartCondition+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e2       	ldi	r20, 0x20	; 32
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9e 83       	std	Y+6, r25	; 0x06
    1a7c:	8d 83       	std	Y+5, r24	; 0x05
    1a7e:	0f c0       	rjmp	.+30     	; 0x1a9e <MTWI_voidMasterSendStartCondition+0xc6>
    1a80:	88 ec       	ldi	r24, 0xC8	; 200
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9c 83       	std	Y+4, r25	; 0x04
    1a86:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <MTWI_voidMasterSendStartCondition+0xb4>
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	69 f7       	brne	.-38     	; 0x1a80 <MTWI_voidMasterSendStartCondition+0xa8>
    1aa6:	14 c0       	rjmp	.+40     	; 0x1ad0 <MTWI_voidMasterSendStartCondition+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aaa:	78 85       	ldd	r23, Y+8	; 0x08
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <MTWI_voidMasterSendStartCondition+0xf0>
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
	/*wait to finish initializing and ending last operation*/
	_delay_ms (300) ;
	/*set enable bit*/
	/*set enable start condition*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    1ad0:	e6 e5       	ldi	r30, 0x56	; 86
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	84 ea       	ldi	r24, 0xA4	; 164
    1ad6:	80 83       	st	Z, r24
	/*wait to finish */
	while(read_bit(TWCR,TWINT)==0);
    1ad8:	e6 e5       	ldi	r30, 0x56	; 86
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	88 1f       	adc	r24, r24
    1ae0:	88 27       	eor	r24, r24
    1ae2:	88 1f       	adc	r24, r24
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	90 70       	andi	r25, 0x00	; 0
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	a9 f3       	breq	.-22     	; 0x1ad8 <MTWI_voidMasterSendStartCondition+0x100>
	/*start condition has been transmitted */
	while ((TWSR & 0XF8) != START_CONDITION_HAS_BEEN_TRANSMITTED);
    1aee:	e1 e2       	ldi	r30, 0x21	; 33
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	88 7f       	andi	r24, 0xF8	; 248
    1afa:	90 70       	andi	r25, 0x00	; 0
    1afc:	88 30       	cpi	r24, 0x08	; 8
    1afe:	91 05       	cpc	r25, r1
    1b00:	b1 f7       	brne	.-20     	; 0x1aee <MTWI_voidMasterSendStartCondition+0x116>
}
    1b02:	2e 96       	adiw	r28, 0x0e	; 14
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <MTWI_voidMasterSendRepetedStartCondition>:

void MTWI_voidMasterSendRepetedStartCondition (void)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	2e 97       	sbiw	r28, 0x0e	; 14
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	a6 e9       	ldi	r26, 0x96	; 150
    1b2e:	b3 e4       	ldi	r27, 0x43	; 67
    1b30:	8b 87       	std	Y+11, r24	; 0x0b
    1b32:	9c 87       	std	Y+12, r25	; 0x0c
    1b34:	ad 87       	std	Y+13, r26	; 0x0d
    1b36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	4a ef       	ldi	r20, 0xFA	; 250
    1b46:	54 e4       	ldi	r21, 0x44	; 68
    1b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	8f 83       	std	Y+7, r24	; 0x07
    1b52:	98 87       	std	Y+8, r25	; 0x08
    1b54:	a9 87       	std	Y+9, r26	; 0x09
    1b56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b58:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5a:	78 85       	ldd	r23, Y+8	; 0x08
    1b5c:	89 85       	ldd	r24, Y+9	; 0x09
    1b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e8       	ldi	r20, 0x80	; 128
    1b66:	5f e3       	ldi	r21, 0x3F	; 63
    1b68:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1b6c:	88 23       	and	r24, r24
    1b6e:	2c f4       	brge	.+10     	; 0x1b7a <MTWI_voidMasterSendRepetedStartCondition+0x66>
		__ticks = 1;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	9e 83       	std	Y+6, r25	; 0x06
    1b76:	8d 83       	std	Y+5, r24	; 0x05
    1b78:	3f c0       	rjmp	.+126    	; 0x1bf8 <MTWI_voidMasterSendRepetedStartCondition+0xe4>
	else if (__tmp > 65535)
    1b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7c:	78 85       	ldd	r23, Y+8	; 0x08
    1b7e:	89 85       	ldd	r24, Y+9	; 0x09
    1b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	3f ef       	ldi	r19, 0xFF	; 255
    1b86:	4f e7       	ldi	r20, 0x7F	; 127
    1b88:	57 e4       	ldi	r21, 0x47	; 71
    1b8a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	4c f5       	brge	.+82     	; 0x1be4 <MTWI_voidMasterSendRepetedStartCondition+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e2       	ldi	r20, 0x20	; 32
    1ba0:	51 e4       	ldi	r21, 0x41	; 65
    1ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	0f c0       	rjmp	.+30     	; 0x1bda <MTWI_voidMasterSendRepetedStartCondition+0xc6>
    1bbc:	88 ec       	ldi	r24, 0xC8	; 200
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9c 83       	std	Y+4, r25	; 0x04
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <MTWI_voidMasterSendRepetedStartCondition+0xb4>
    1bcc:	9c 83       	std	Y+4, r25	; 0x04
    1bce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	9e 83       	std	Y+6, r25	; 0x06
    1bd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	69 f7       	brne	.-38     	; 0x1bbc <MTWI_voidMasterSendRepetedStartCondition+0xa8>
    1be2:	14 c0       	rjmp	.+40     	; 0x1c0c <MTWI_voidMasterSendRepetedStartCondition+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be4:	6f 81       	ldd	r22, Y+7	; 0x07
    1be6:	78 85       	ldd	r23, Y+8	; 0x08
    1be8:	89 85       	ldd	r24, Y+9	; 0x09
    1bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9e 83       	std	Y+6, r25	; 0x06
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
    1bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfc:	9a 83       	std	Y+2, r25	; 0x02
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <MTWI_voidMasterSendRepetedStartCondition+0xf0>
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
	/*wait to finish initializing and ending last operation*/
	_delay_ms (300) ;
	/*set enable bit*/
	/*set enable start condition*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    1c0c:	e6 e5       	ldi	r30, 0x56	; 86
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	84 ea       	ldi	r24, 0xA4	; 164
    1c12:	80 83       	st	Z, r24
	/*wait to finish */
	while(read_bit(TWCR,TWINT)==0);
    1c14:	e6 e5       	ldi	r30, 0x56	; 86
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	88 1f       	adc	r24, r24
    1c1c:	88 27       	eor	r24, r24
    1c1e:	88 1f       	adc	r24, r24
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	90 70       	andi	r25, 0x00	; 0
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	a9 f3       	breq	.-22     	; 0x1c14 <MTWI_voidMasterSendRepetedStartCondition+0x100>
	/*start condition has been transmitted */
	while ((TWSR & 0XF8) != REPETED_START_CONDITION_HAS_BEEN_TRANSMITTED);
    1c2a:	e1 e2       	ldi	r30, 0x21	; 33
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	88 2f       	mov	r24, r24
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	88 7f       	andi	r24, 0xF8	; 248
    1c36:	90 70       	andi	r25, 0x00	; 0
    1c38:	80 31       	cpi	r24, 0x10	; 16
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	b1 f7       	brne	.-20     	; 0x1c2a <MTWI_voidMasterSendRepetedStartCondition+0x116>
}
    1c3e:	2e 96       	adiw	r28, 0x0e	; 14
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <MTWI_voidMasterSendAddress>:

void MTWI_voidMasterSendAddress (u8 A_u8Address)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	0f 92       	push	r0
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	89 83       	std	Y+1, r24	; 0x01
	/*store address in data register*/
	TWDR=A_u8Address;
    1c5c:	e3 e2       	ldi	r30, 0x23	; 35
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	80 83       	st	Z, r24
	/*set enable bit*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    1c64:	e6 e5       	ldi	r30, 0x56	; 86
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	84 e8       	ldi	r24, 0x84	; 132
    1c6a:	80 83       	st	Z, r24
	/* wait to finish */
	while(read_bit(TWCR,TWINT)==0);
    1c6c:	e6 e5       	ldi	r30, 0x56	; 86
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	88 1f       	adc	r24, r24
    1c74:	88 27       	eor	r24, r24
    1c76:	88 1f       	adc	r24, r24
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	90 70       	andi	r25, 0x00	; 0
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	a9 f3       	breq	.-22     	; 0x1c6c <MTWI_voidMasterSendAddress+0x1c>
	/* SLA+write has been transmitted and ACK has been received */
	while ((TWSR & 0XF8) != SLAVE_ADDRESS_HAS_BEEN_TRANSMITTED);
    1c82:	e1 e2       	ldi	r30, 0x21	; 33
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	88 7f       	andi	r24, 0xF8	; 248
    1c8e:	90 70       	andi	r25, 0x00	; 0
    1c90:	88 31       	cpi	r24, 0x18	; 24
    1c92:	91 05       	cpc	r25, r1
    1c94:	b1 f7       	brne	.-20     	; 0x1c82 <MTWI_voidMasterSendAddress+0x32>
}
    1c96:	0f 90       	pop	r0
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <MTWI_voidMasterSendAddressToRead>:

void MTWI_voidMasterSendAddressToRead (u8 A_u8Address)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	0f 92       	push	r0
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	89 83       	std	Y+1, r24	; 0x01
	/*store address in data register*/
	TWDR=A_u8Address;
    1caa:	e3 e2       	ldi	r30, 0x23	; 35
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	80 83       	st	Z, r24
	/*set enable bit*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    1cb2:	e6 e5       	ldi	r30, 0x56	; 86
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	84 e8       	ldi	r24, 0x84	; 132
    1cb8:	80 83       	st	Z, r24
	/* wait to finish */
	while(read_bit(TWCR,TWINT)==0);
    1cba:	e6 e5       	ldi	r30, 0x56	; 86
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	88 1f       	adc	r24, r24
    1cc2:	88 27       	eor	r24, r24
    1cc4:	88 1f       	adc	r24, r24
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	90 70       	andi	r25, 0x00	; 0
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	a9 f3       	breq	.-22     	; 0x1cba <MTWI_voidMasterSendAddressToRead+0x1c>
	/* SLA+write has been transmitted and ACK has been received */
	while ((TWSR & 0XF8) != SLAVE_ADDRESS_AND_READ_HAS_BEEN_TRANSMITTED);
    1cd0:	e1 e2       	ldi	r30, 0x21	; 33
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	88 2f       	mov	r24, r24
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	88 7f       	andi	r24, 0xF8	; 248
    1cdc:	90 70       	andi	r25, 0x00	; 0
    1cde:	80 34       	cpi	r24, 0x40	; 64
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	b1 f7       	brne	.-20     	; 0x1cd0 <MTWI_voidMasterSendAddressToRead+0x32>
}
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <MTWI_voidMasterSendData>:
void MTWI_voidMasterSendData (u8 A_u8Data)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	0f 92       	push	r0
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	89 83       	std	Y+1, r24	; 0x01
	/*store data in data register*/
	TWDR=A_u8Data;
    1cf8:	e3 e2       	ldi	r30, 0x23	; 35
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	80 83       	st	Z, r24
	/*set enable bit*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    1d00:	e6 e5       	ldi	r30, 0x56	; 86
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	84 e8       	ldi	r24, 0x84	; 132
    1d06:	80 83       	st	Z, r24
	/* wait to finish */
	while(read_bit(TWCR,TWINT)==0);
    1d08:	e6 e5       	ldi	r30, 0x56	; 86
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	88 1f       	adc	r24, r24
    1d10:	88 27       	eor	r24, r24
    1d12:	88 1f       	adc	r24, r24
    1d14:	88 2f       	mov	r24, r24
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	90 70       	andi	r25, 0x00	; 0
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	a9 f3       	breq	.-22     	; 0x1d08 <MTWI_voidMasterSendData+0x1c>
	/* data has been transmitted and ACK has been received */
	while ((TWSR & 0XF8) != DATA_AND_ACK_HAS_BEEN_TRANSMITTED);
    1d1e:	e1 e2       	ldi	r30, 0x21	; 33
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	88 7f       	andi	r24, 0xF8	; 248
    1d2a:	90 70       	andi	r25, 0x00	; 0
    1d2c:	88 32       	cpi	r24, 0x28	; 40
    1d2e:	91 05       	cpc	r25, r1
    1d30:	b1 f7       	brne	.-20     	; 0x1d1e <MTWI_voidMasterSendData+0x32>
}
    1d32:	0f 90       	pop	r0
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <MTWI_voidMasterReadData>:

u8 MTWI_voidMasterReadData (void)
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
	/*set enable bit*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    1d42:	e6 e5       	ldi	r30, 0x56	; 86
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	84 e8       	ldi	r24, 0x84	; 132
    1d48:	80 83       	st	Z, r24
	/* wait to finish */
	while(read_bit(TWCR,TWINT)==0);
    1d4a:	e6 e5       	ldi	r30, 0x56	; 86
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	88 1f       	adc	r24, r24
    1d52:	88 27       	eor	r24, r24
    1d54:	88 1f       	adc	r24, r24
    1d56:	88 2f       	mov	r24, r24
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	90 70       	andi	r25, 0x00	; 0
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	a9 f3       	breq	.-22     	; 0x1d4a <MTWI_voidMasterReadData+0x10>
	/* data has been transmitted and ACK has been received */
	while ((TWSR & 0XF8) != DATA_READ_AND_ACK_HAS_BEEN_TRANSMITTED);
    1d60:	e1 e2       	ldi	r30, 0x21	; 33
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	88 2f       	mov	r24, r24
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	88 7f       	andi	r24, 0xF8	; 248
    1d6c:	90 70       	andi	r25, 0x00	; 0
    1d6e:	80 35       	cpi	r24, 0x50	; 80
    1d70:	91 05       	cpc	r25, r1
    1d72:	b1 f7       	brne	.-20     	; 0x1d60 <MTWI_voidMasterReadData+0x26>
	return TWDR ;
    1d74:	e3 e2       	ldi	r30, 0x23	; 35
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
}
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <MTWI_voidMasterReadDataWithNACK>:

u8 MTWI_voidMasterReadDataWithNACK (void)
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
	/*set enable bit*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    1d88:	e6 e5       	ldi	r30, 0x56	; 86
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	84 e8       	ldi	r24, 0x84	; 132
    1d8e:	80 83       	st	Z, r24
	/* wait to finish */
	while(read_bit(TWCR,TWINT)==0);
    1d90:	e6 e5       	ldi	r30, 0x56	; 86
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	88 1f       	adc	r24, r24
    1d98:	88 27       	eor	r24, r24
    1d9a:	88 1f       	adc	r24, r24
    1d9c:	88 2f       	mov	r24, r24
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	90 70       	andi	r25, 0x00	; 0
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	a9 f3       	breq	.-22     	; 0x1d90 <MTWI_voidMasterReadDataWithNACK+0x10>
	/* data has been transmitted and ACK has been received */
	while ((TWSR & 0XF8) != DATA_READ_AND_NACK_HAS_BEEN_TRANSMITTED);
    1da6:	e1 e2       	ldi	r30, 0x21	; 33
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	88 2f       	mov	r24, r24
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	88 7f       	andi	r24, 0xF8	; 248
    1db2:	90 70       	andi	r25, 0x00	; 0
    1db4:	88 35       	cpi	r24, 0x58	; 88
    1db6:	91 05       	cpc	r25, r1
    1db8:	b1 f7       	brne	.-20     	; 0x1da6 <MTWI_voidMasterReadDataWithNACK+0x26>
	return TWDR ;
    1dba:	e3 e2       	ldi	r30, 0x23	; 35
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
}
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <MTWI_voidMasterSendStopCondition>:

void MTWI_voidMasterSendStopCondition (void)
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
	/*set enable bit*/
	/*set enable stop condition*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1dce:	e6 e5       	ldi	r30, 0x56	; 86
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	84 e9       	ldi	r24, 0x94	; 148
    1dd4:	80 83       	st	Z, r24
}
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <MTWI_voidSlaveSetAddress>:

void MTWI_voidSlaveSetAddress (u8 A_u8Address)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	0f 92       	push	r0
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	89 83       	std	Y+1, r24	; 0x01
	/*store address in address register*/
	TWAR=A_u8Address;
    1de8:	e2 e2       	ldi	r30, 0x22	; 34
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	80 83       	st	Z, r24
}
    1df0:	0f 90       	pop	r0
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <MTWI_voidSlaveReadData>:

u8 MTWI_voidSlaveReadData (void)
{
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
	/*set enable bit*/
	/*set enable Ack*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1e00:	e6 e5       	ldi	r30, 0x56	; 86
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	84 ec       	ldi	r24, 0xC4	; 196
    1e06:	80 83       	st	Z, r24
	/*wait to finish*/
	while(read_bit(TWCR,TWINT)==0);
    1e08:	e6 e5       	ldi	r30, 0x56	; 86
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	88 1f       	adc	r24, r24
    1e10:	88 27       	eor	r24, r24
    1e12:	88 1f       	adc	r24, r24
    1e14:	88 2f       	mov	r24, r24
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	90 70       	andi	r25, 0x00	; 0
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	a9 f3       	breq	.-22     	; 0x1e08 <MTWI_voidSlaveReadData+0x10>
	/* own SLA+W has been received and ACK has been returned */
	while ((TWSR & 0XF8) != SLAVE_ADDRESS_HAS_BEEN_RESEVED);
    1e1e:	e1 e2       	ldi	r30, 0x21	; 33
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	88 7f       	andi	r24, 0xF8	; 248
    1e2a:	90 70       	andi	r25, 0x00	; 0
    1e2c:	80 36       	cpi	r24, 0x60	; 96
    1e2e:	91 05       	cpc	r25, r1
    1e30:	b1 f7       	brne	.-20     	; 0x1e1e <MTWI_voidSlaveReadData+0x26>
    /*set enable bit*/
	/*set enable Ack*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1e32:	e6 e5       	ldi	r30, 0x56	; 86
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	84 ec       	ldi	r24, 0xC4	; 196
    1e38:	80 83       	st	Z, r24
	/*wait to finish*/
	while(read_bit(TWCR,TWINT)==0);
    1e3a:	e6 e5       	ldi	r30, 0x56	; 86
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	88 1f       	adc	r24, r24
    1e42:	88 27       	eor	r24, r24
    1e44:	88 1f       	adc	r24, r24
    1e46:	88 2f       	mov	r24, r24
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	90 70       	andi	r25, 0x00	; 0
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	a9 f3       	breq	.-22     	; 0x1e3a <MTWI_voidSlaveReadData+0x42>
	/*previously addressed with own SLA+W : data has been received : ACK has been returned*/
	while ((TWSR & 0XF8) != DATA_AND_ACK_HAS_BEEN_RESEVED);
    1e50:	e1 e2       	ldi	r30, 0x21	; 33
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	88 2f       	mov	r24, r24
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	88 7f       	andi	r24, 0xF8	; 248
    1e5c:	90 70       	andi	r25, 0x00	; 0
    1e5e:	80 38       	cpi	r24, 0x80	; 128
    1e60:	91 05       	cpc	r25, r1
    1e62:	b1 f7       	brne	.-20     	; 0x1e50 <MTWI_voidSlaveReadData+0x58>
	/*return data*/
	return TWDR ;
    1e64:	e3 e2       	ldi	r30, 0x23	; 35
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
}
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <MGINT_voidGlobalIntEnable>:
#include "GINT_Interface.h"
#include "GINT_Private.h"
#include "GINT_Config.h"

void MGINT_voidGlobalIntEnable(void)
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
	set_bit(GINT_SREG,GINT_GieBit);
    1e78:	af e5       	ldi	r26, 0x5F	; 95
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	ef e5       	ldi	r30, 0x5F	; 95
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	80 68       	ori	r24, 0x80	; 128
    1e84:	8c 93       	st	X, r24
}
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <MGINT_voidGlobalIntDisable>:
void MGINT_voidGlobalIntDisable(void)
{
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
	clear_bit(GINT_SREG,GINT_GieBit);
    1e94:	af e5       	ldi	r26, 0x5F	; 95
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	ef e5       	ldi	r30, 0x5F	; 95
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	8f 77       	andi	r24, 0x7F	; 127
    1ea0:	8c 93       	st	X, r24
}
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <MEXTI_voidExtInit>:
void (* GP_EXTI0CallBack)(void);
void (* GP_EXTI1CallBack)(void);
void (* GP_EXTI2CallBack)(void);

void MEXTI_voidExtInit(void)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
	clear_bit(EXTI_MCUCR,EXTI_MCUCR_ISC01);
#elif EXTI0_TriggerMode==EXTI_IOC
	set_bit(EXTI_MCUCR,EXTI_MCUCR_ISC00);
	clear_bit(EXTI_MCUCR,EXTI_MCUCR_ISC01);
#elif EXTI0_TriggerMode==EXTI_FallingEdge
	clear_bit(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    1eb0:	a5 e5       	ldi	r26, 0x55	; 85
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e5 e5       	ldi	r30, 0x55	; 85
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	8e 7f       	andi	r24, 0xFE	; 254
    1ebc:	8c 93       	st	X, r24
	set_bit(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    1ebe:	a5 e5       	ldi	r26, 0x55	; 85
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e5 e5       	ldi	r30, 0x55	; 85
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	82 60       	ori	r24, 0x02	; 2
    1eca:	8c 93       	st	X, r24
	clear_bit(EXTI_MCUCR,EXTI_MCUCR_ISC11);
#elif EXTI1_TriggerMode==EXTI_IOC
	set_bit(EXTI_MCUCR,EXTI_MCUCR_ISC10);
	clear_bit(EXTI_MCUCR,EXTI_MCUCR_ISC11);
#elif EXTI1_TriggerMode==EXTI_FallingEdge
	clear_bit(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    1ecc:	a5 e5       	ldi	r26, 0x55	; 85
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e5 e5       	ldi	r30, 0x55	; 85
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8b 7f       	andi	r24, 0xFB	; 251
    1ed8:	8c 93       	st	X, r24
	set_bit(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    1eda:	a5 e5       	ldi	r26, 0x55	; 85
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e5 e5       	ldi	r30, 0x55	; 85
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	88 60       	ori	r24, 0x08	; 8
    1ee6:	8c 93       	st	X, r24
	set_bit(EXTI_MCUCR,EXTI_MCUCR_ISC10);
	set_bit(EXTI_MCUCR,EXTI_MCUCR_ISC11);
#endif

#if EXTI2_TriggerMode==EXTI_FallingEdge
	clear_bit(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
    1ee8:	a4 e5       	ldi	r26, 0x54	; 84
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e4 e5       	ldi	r30, 0x54	; 84
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	8f 7b       	andi	r24, 0xBF	; 191
    1ef4:	8c 93       	st	X, r24
#elif EXTI2_TriggerMode==EXTI_FallingEdge
	set_bit(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
#endif


}
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <MEXTI_voidExtEnable>:
void MEXTI_voidExtEnable(u8 A_u8ExtiNum)
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <MEXTI_voidExtEnable+0x6>
    1f02:	0f 92       	push	r0
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiNum)
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	3b 83       	std	Y+3, r19	; 0x03
    1f12:	2a 83       	std	Y+2, r18	; 0x02
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	9b 81       	ldd	r25, Y+3	; 0x03
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	89 f0       	breq	.+34     	; 0x1f40 <MEXTI_voidExtEnable+0x44>
    1f1e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f20:	3b 81       	ldd	r19, Y+3	; 0x03
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	a1 f0       	breq	.+40     	; 0x1f50 <MEXTI_voidExtEnable+0x54>
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	b9 f4       	brne	.+46     	; 0x1f5e <MEXTI_voidExtEnable+0x62>
	{
	case EXTI_EXTI0:set_bit(EXTI_GICR,EXTI_GICR_INT0);break;
    1f30:	ab e5       	ldi	r26, 0x5B	; 91
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	eb e5       	ldi	r30, 0x5B	; 91
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	80 64       	ori	r24, 0x40	; 64
    1f3c:	8c 93       	st	X, r24
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <MEXTI_voidExtEnable+0x62>
	case EXTI_EXTI1:set_bit(EXTI_GICR,EXTI_GICR_INT1);break;
    1f40:	ab e5       	ldi	r26, 0x5B	; 91
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	eb e5       	ldi	r30, 0x5B	; 91
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	80 68       	ori	r24, 0x80	; 128
    1f4c:	8c 93       	st	X, r24
    1f4e:	07 c0       	rjmp	.+14     	; 0x1f5e <MEXTI_voidExtEnable+0x62>
	case EXTI_EXTI2:set_bit(EXTI_GICR,EXTI_GICR_INT2);break;
    1f50:	ab e5       	ldi	r26, 0x5B	; 91
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	eb e5       	ldi	r30, 0x5B	; 91
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	80 62       	ori	r24, 0x20	; 32
    1f5c:	8c 93       	st	X, r24
	default:break;
	}
}
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <MEXTI_voidExtDisable>:
void MEXTI_voidExtDisable(u8 A_u8ExtiNum)
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <MEXTI_voidExtDisable+0x6>
    1f70:	0f 92       	push	r0
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiNum)
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	3b 83       	std	Y+3, r19	; 0x03
    1f80:	2a 83       	std	Y+2, r18	; 0x02
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	9b 81       	ldd	r25, Y+3	; 0x03
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	91 05       	cpc	r25, r1
    1f8a:	89 f0       	breq	.+34     	; 0x1fae <MEXTI_voidExtDisable+0x44>
    1f8c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f8e:	3b 81       	ldd	r19, Y+3	; 0x03
    1f90:	22 30       	cpi	r18, 0x02	; 2
    1f92:	31 05       	cpc	r19, r1
    1f94:	a1 f0       	breq	.+40     	; 0x1fbe <MEXTI_voidExtDisable+0x54>
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	b9 f4       	brne	.+46     	; 0x1fcc <MEXTI_voidExtDisable+0x62>
	{
	case EXTI_EXTI0:clear_bit(EXTI_GICR,EXTI_GICR_INT0);break;
    1f9e:	ab e5       	ldi	r26, 0x5B	; 91
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	eb e5       	ldi	r30, 0x5B	; 91
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	8f 7b       	andi	r24, 0xBF	; 191
    1faa:	8c 93       	st	X, r24
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <MEXTI_voidExtDisable+0x62>
	case EXTI_EXTI1:clear_bit(EXTI_GICR,EXTI_GICR_INT1);break;
    1fae:	ab e5       	ldi	r26, 0x5B	; 91
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	eb e5       	ldi	r30, 0x5B	; 91
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	8f 77       	andi	r24, 0x7F	; 127
    1fba:	8c 93       	st	X, r24
    1fbc:	07 c0       	rjmp	.+14     	; 0x1fcc <MEXTI_voidExtDisable+0x62>
	case EXTI_EXTI2:clear_bit(EXTI_GICR,EXTI_GICR_INT2);break;
    1fbe:	ab e5       	ldi	r26, 0x5B	; 91
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	eb e5       	ldi	r30, 0x5B	; 91
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	8f 7d       	andi	r24, 0xDF	; 223
    1fca:	8c 93       	st	X, r24
	default:break;
	}
}
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <MEXTI_voidExt0CallBack>:

void MEXTI_voidExt0CallBack(void (*ptr)(void))
{
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <MEXTI_voidExt0CallBack+0x6>
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01
	GP_EXTI0CallBack=ptr;
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	90 93 d9 01 	sts	0x01D9, r25
    1fee:	80 93 d8 01 	sts	0x01D8, r24
}
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <MEXTI_voidExt1CallBack>:
void MEXTI_voidExt1CallBack(void (*ptr)(void))
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	00 d0       	rcall	.+0      	; 0x2002 <MEXTI_voidExt1CallBack+0x6>
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	9a 83       	std	Y+2, r25	; 0x02
    2008:	89 83       	std	Y+1, r24	; 0x01
	GP_EXTI1CallBack=ptr;
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	9a 81       	ldd	r25, Y+2	; 0x02
    200e:	90 93 db 01 	sts	0x01DB, r25
    2012:	80 93 da 01 	sts	0x01DA, r24
}
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <MEXTI_voidExt2CallBack>:
void MEXTI_voidExt2CallBack(void (*ptr)(void))
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	00 d0       	rcall	.+0      	; 0x2026 <MEXTI_voidExt2CallBack+0x6>
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	9a 83       	std	Y+2, r25	; 0x02
    202c:	89 83       	std	Y+1, r24	; 0x01
	GP_EXTI2CallBack=ptr;
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	9a 81       	ldd	r25, Y+2	; 0x02
    2032:	90 93 dd 01 	sts	0x01DD, r25
    2036:	80 93 dc 01 	sts	0x01DC, r24
}
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <__vector_1>:

void __vector_1 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_1 (void){
    2044:	1f 92       	push	r1
    2046:	0f 92       	push	r0
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	0f 92       	push	r0
    204c:	11 24       	eor	r1, r1
    204e:	2f 93       	push	r18
    2050:	3f 93       	push	r19
    2052:	4f 93       	push	r20
    2054:	5f 93       	push	r21
    2056:	6f 93       	push	r22
    2058:	7f 93       	push	r23
    205a:	8f 93       	push	r24
    205c:	9f 93       	push	r25
    205e:	af 93       	push	r26
    2060:	bf 93       	push	r27
    2062:	ef 93       	push	r30
    2064:	ff 93       	push	r31
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
	GP_EXTI0CallBack();
    206e:	e0 91 d8 01 	lds	r30, 0x01D8
    2072:	f0 91 d9 01 	lds	r31, 0x01D9
    2076:	09 95       	icall
}
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	ff 91       	pop	r31
    207e:	ef 91       	pop	r30
    2080:	bf 91       	pop	r27
    2082:	af 91       	pop	r26
    2084:	9f 91       	pop	r25
    2086:	8f 91       	pop	r24
    2088:	7f 91       	pop	r23
    208a:	6f 91       	pop	r22
    208c:	5f 91       	pop	r21
    208e:	4f 91       	pop	r20
    2090:	3f 91       	pop	r19
    2092:	2f 91       	pop	r18
    2094:	0f 90       	pop	r0
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	0f 90       	pop	r0
    209a:	1f 90       	pop	r1
    209c:	18 95       	reti

0000209e <__vector_2>:

void __vector_2 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_2 (void){
    209e:	1f 92       	push	r1
    20a0:	0f 92       	push	r0
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	0f 92       	push	r0
    20a6:	11 24       	eor	r1, r1
    20a8:	2f 93       	push	r18
    20aa:	3f 93       	push	r19
    20ac:	4f 93       	push	r20
    20ae:	5f 93       	push	r21
    20b0:	6f 93       	push	r22
    20b2:	7f 93       	push	r23
    20b4:	8f 93       	push	r24
    20b6:	9f 93       	push	r25
    20b8:	af 93       	push	r26
    20ba:	bf 93       	push	r27
    20bc:	ef 93       	push	r30
    20be:	ff 93       	push	r31
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
	GP_EXTI1CallBack();
    20c8:	e0 91 da 01 	lds	r30, 0x01DA
    20cc:	f0 91 db 01 	lds	r31, 0x01DB
    20d0:	09 95       	icall
}
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	ff 91       	pop	r31
    20d8:	ef 91       	pop	r30
    20da:	bf 91       	pop	r27
    20dc:	af 91       	pop	r26
    20de:	9f 91       	pop	r25
    20e0:	8f 91       	pop	r24
    20e2:	7f 91       	pop	r23
    20e4:	6f 91       	pop	r22
    20e6:	5f 91       	pop	r21
    20e8:	4f 91       	pop	r20
    20ea:	3f 91       	pop	r19
    20ec:	2f 91       	pop	r18
    20ee:	0f 90       	pop	r0
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	0f 90       	pop	r0
    20f4:	1f 90       	pop	r1
    20f6:	18 95       	reti

000020f8 <__vector_3>:

void __vector_3 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_3 (void){
    20f8:	1f 92       	push	r1
    20fa:	0f 92       	push	r0
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	0f 92       	push	r0
    2100:	11 24       	eor	r1, r1
    2102:	2f 93       	push	r18
    2104:	3f 93       	push	r19
    2106:	4f 93       	push	r20
    2108:	5f 93       	push	r21
    210a:	6f 93       	push	r22
    210c:	7f 93       	push	r23
    210e:	8f 93       	push	r24
    2110:	9f 93       	push	r25
    2112:	af 93       	push	r26
    2114:	bf 93       	push	r27
    2116:	ef 93       	push	r30
    2118:	ff 93       	push	r31
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
	GP_EXTI2CallBack();
    2122:	e0 91 dc 01 	lds	r30, 0x01DC
    2126:	f0 91 dd 01 	lds	r31, 0x01DD
    212a:	09 95       	icall
}
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	ff 91       	pop	r31
    2132:	ef 91       	pop	r30
    2134:	bf 91       	pop	r27
    2136:	af 91       	pop	r26
    2138:	9f 91       	pop	r25
    213a:	8f 91       	pop	r24
    213c:	7f 91       	pop	r23
    213e:	6f 91       	pop	r22
    2140:	5f 91       	pop	r21
    2142:	4f 91       	pop	r20
    2144:	3f 91       	pop	r19
    2146:	2f 91       	pop	r18
    2148:	0f 90       	pop	r0
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	0f 90       	pop	r0
    214e:	1f 90       	pop	r1
    2150:	18 95       	reti

00002152 <MDIO_void_SetDir>:
#include"DIO_Config.h"
#include"DIO_Private.h"
#include"DIO_Register.h"

void MDIO_void_SetDir(u8 A_u8_PortNum,u8 A_u8_PinNum,u8 A_u8_PinDir)
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	27 97       	sbiw	r28, 0x07	; 7
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	6a 83       	std	Y+2, r22	; 0x02
    216a:	4b 83       	std	Y+3, r20	; 0x03
	if(PIN_OUTPUT==A_u8_PinDir)
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	81 30       	cpi	r24, 0x01	; 1
    2170:	09 f0       	breq	.+2      	; 0x2174 <MDIO_void_SetDir+0x22>
    2172:	6f c0       	rjmp	.+222    	; 0x2252 <MDIO_void_SetDir+0x100>
	{
		switch(A_u8_PortNum)
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	28 2f       	mov	r18, r24
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	3f 83       	std	Y+7, r19	; 0x07
    217c:	2e 83       	std	Y+6, r18	; 0x06
    217e:	8e 81       	ldd	r24, Y+6	; 0x06
    2180:	9f 81       	ldd	r25, Y+7	; 0x07
    2182:	81 30       	cpi	r24, 0x01	; 1
    2184:	91 05       	cpc	r25, r1
    2186:	49 f1       	breq	.+82     	; 0x21da <MDIO_void_SetDir+0x88>
    2188:	2e 81       	ldd	r18, Y+6	; 0x06
    218a:	3f 81       	ldd	r19, Y+7	; 0x07
    218c:	22 30       	cpi	r18, 0x02	; 2
    218e:	31 05       	cpc	r19, r1
    2190:	2c f4       	brge	.+10     	; 0x219c <MDIO_void_SetDir+0x4a>
    2192:	8e 81       	ldd	r24, Y+6	; 0x06
    2194:	9f 81       	ldd	r25, Y+7	; 0x07
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	61 f0       	breq	.+24     	; 0x21b2 <MDIO_void_SetDir+0x60>
    219a:	d2 c0       	rjmp	.+420    	; 0x2340 <MDIO_void_SetDir+0x1ee>
    219c:	2e 81       	ldd	r18, Y+6	; 0x06
    219e:	3f 81       	ldd	r19, Y+7	; 0x07
    21a0:	22 30       	cpi	r18, 0x02	; 2
    21a2:	31 05       	cpc	r19, r1
    21a4:	71 f1       	breq	.+92     	; 0x2202 <MDIO_void_SetDir+0xb0>
    21a6:	8e 81       	ldd	r24, Y+6	; 0x06
    21a8:	9f 81       	ldd	r25, Y+7	; 0x07
    21aa:	83 30       	cpi	r24, 0x03	; 3
    21ac:	91 05       	cpc	r25, r1
    21ae:	e9 f1       	breq	.+122    	; 0x222a <MDIO_void_SetDir+0xd8>
    21b0:	c7 c0       	rjmp	.+398    	; 0x2340 <MDIO_void_SetDir+0x1ee>
		{
		case DIO_PORTA:set_bit(DIO_u8_DDRA,A_u8_PinNum);break;
    21b2:	aa e3       	ldi	r26, 0x3A	; 58
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	ea e3       	ldi	r30, 0x3A	; 58
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	48 2f       	mov	r20, r24
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	28 2f       	mov	r18, r24
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	02 2e       	mov	r0, r18
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <MDIO_void_SetDir+0x7e>
    21cc:	88 0f       	add	r24, r24
    21ce:	99 1f       	adc	r25, r25
    21d0:	0a 94       	dec	r0
    21d2:	e2 f7       	brpl	.-8      	; 0x21cc <MDIO_void_SetDir+0x7a>
    21d4:	84 2b       	or	r24, r20
    21d6:	8c 93       	st	X, r24
    21d8:	b3 c0       	rjmp	.+358    	; 0x2340 <MDIO_void_SetDir+0x1ee>
		case DIO_PORTB:set_bit(DIO_u8_DDRB,A_u8_PinNum);break;
    21da:	a7 e3       	ldi	r26, 0x37	; 55
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e7 e3       	ldi	r30, 0x37	; 55
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	48 2f       	mov	r20, r24
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	02 2e       	mov	r0, r18
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <MDIO_void_SetDir+0xa6>
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	0a 94       	dec	r0
    21fa:	e2 f7       	brpl	.-8      	; 0x21f4 <MDIO_void_SetDir+0xa2>
    21fc:	84 2b       	or	r24, r20
    21fe:	8c 93       	st	X, r24
    2200:	9f c0       	rjmp	.+318    	; 0x2340 <MDIO_void_SetDir+0x1ee>
		case DIO_PORTC:set_bit(DIO_u8_DDRC,A_u8_PinNum);break;
    2202:	a4 e3       	ldi	r26, 0x34	; 52
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e4 e3       	ldi	r30, 0x34	; 52
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	48 2f       	mov	r20, r24
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	02 2e       	mov	r0, r18
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <MDIO_void_SetDir+0xce>
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	0a 94       	dec	r0
    2222:	e2 f7       	brpl	.-8      	; 0x221c <MDIO_void_SetDir+0xca>
    2224:	84 2b       	or	r24, r20
    2226:	8c 93       	st	X, r24
    2228:	8b c0       	rjmp	.+278    	; 0x2340 <MDIO_void_SetDir+0x1ee>
		case DIO_PORTD:set_bit(DIO_u8_DDRD,A_u8_PinNum);break;
    222a:	a1 e3       	ldi	r26, 0x31	; 49
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e1 e3       	ldi	r30, 0x31	; 49
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	48 2f       	mov	r20, r24
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	02 2e       	mov	r0, r18
    2242:	02 c0       	rjmp	.+4      	; 0x2248 <MDIO_void_SetDir+0xf6>
    2244:	88 0f       	add	r24, r24
    2246:	99 1f       	adc	r25, r25
    2248:	0a 94       	dec	r0
    224a:	e2 f7       	brpl	.-8      	; 0x2244 <MDIO_void_SetDir+0xf2>
    224c:	84 2b       	or	r24, r20
    224e:	8c 93       	st	X, r24
    2250:	77 c0       	rjmp	.+238    	; 0x2340 <MDIO_void_SetDir+0x1ee>
		default:break;
		}
	}
	else if(PIN_INPUT==A_u8_PinDir)
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	88 23       	and	r24, r24
    2256:	09 f0       	breq	.+2      	; 0x225a <MDIO_void_SetDir+0x108>
    2258:	73 c0       	rjmp	.+230    	; 0x2340 <MDIO_void_SetDir+0x1ee>
	{
		switch(A_u8_PortNum)
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	3d 83       	std	Y+5, r19	; 0x05
    2262:	2c 83       	std	Y+4, r18	; 0x04
    2264:	8c 81       	ldd	r24, Y+4	; 0x04
    2266:	9d 81       	ldd	r25, Y+5	; 0x05
    2268:	81 30       	cpi	r24, 0x01	; 1
    226a:	91 05       	cpc	r25, r1
    226c:	59 f1       	breq	.+86     	; 0x22c4 <MDIO_void_SetDir+0x172>
    226e:	2c 81       	ldd	r18, Y+4	; 0x04
    2270:	3d 81       	ldd	r19, Y+5	; 0x05
    2272:	22 30       	cpi	r18, 0x02	; 2
    2274:	31 05       	cpc	r19, r1
    2276:	2c f4       	brge	.+10     	; 0x2282 <MDIO_void_SetDir+0x130>
    2278:	8c 81       	ldd	r24, Y+4	; 0x04
    227a:	9d 81       	ldd	r25, Y+5	; 0x05
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	69 f0       	breq	.+26     	; 0x229a <MDIO_void_SetDir+0x148>
    2280:	5f c0       	rjmp	.+190    	; 0x2340 <MDIO_void_SetDir+0x1ee>
    2282:	2c 81       	ldd	r18, Y+4	; 0x04
    2284:	3d 81       	ldd	r19, Y+5	; 0x05
    2286:	22 30       	cpi	r18, 0x02	; 2
    2288:	31 05       	cpc	r19, r1
    228a:	89 f1       	breq	.+98     	; 0x22ee <MDIO_void_SetDir+0x19c>
    228c:	8c 81       	ldd	r24, Y+4	; 0x04
    228e:	9d 81       	ldd	r25, Y+5	; 0x05
    2290:	83 30       	cpi	r24, 0x03	; 3
    2292:	91 05       	cpc	r25, r1
    2294:	09 f4       	brne	.+2      	; 0x2298 <MDIO_void_SetDir+0x146>
    2296:	40 c0       	rjmp	.+128    	; 0x2318 <MDIO_void_SetDir+0x1c6>
    2298:	53 c0       	rjmp	.+166    	; 0x2340 <MDIO_void_SetDir+0x1ee>
		{
		case DIO_PORTA:clear_bit(DIO_u8_DDRA,A_u8_PinNum);break;
    229a:	aa e3       	ldi	r26, 0x3A	; 58
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	ea e3       	ldi	r30, 0x3A	; 58
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	48 2f       	mov	r20, r24
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	02 2e       	mov	r0, r18
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <MDIO_void_SetDir+0x166>
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	0a 94       	dec	r0
    22ba:	e2 f7       	brpl	.-8      	; 0x22b4 <MDIO_void_SetDir+0x162>
    22bc:	80 95       	com	r24
    22be:	84 23       	and	r24, r20
    22c0:	8c 93       	st	X, r24
    22c2:	3e c0       	rjmp	.+124    	; 0x2340 <MDIO_void_SetDir+0x1ee>
		case DIO_PORTB:clear_bit(DIO_u8_DDRB,A_u8_PinNum);break;
    22c4:	a7 e3       	ldi	r26, 0x37	; 55
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e7 e3       	ldi	r30, 0x37	; 55
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	48 2f       	mov	r20, r24
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	02 2e       	mov	r0, r18
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <MDIO_void_SetDir+0x190>
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	0a 94       	dec	r0
    22e4:	e2 f7       	brpl	.-8      	; 0x22de <MDIO_void_SetDir+0x18c>
    22e6:	80 95       	com	r24
    22e8:	84 23       	and	r24, r20
    22ea:	8c 93       	st	X, r24
    22ec:	29 c0       	rjmp	.+82     	; 0x2340 <MDIO_void_SetDir+0x1ee>
		case DIO_PORTC:clear_bit(DIO_u8_DDRC,A_u8_PinNum);break;
    22ee:	a4 e3       	ldi	r26, 0x34	; 52
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	e4 e3       	ldi	r30, 0x34	; 52
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	48 2f       	mov	r20, r24
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	02 2e       	mov	r0, r18
    2306:	02 c0       	rjmp	.+4      	; 0x230c <MDIO_void_SetDir+0x1ba>
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	0a 94       	dec	r0
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <MDIO_void_SetDir+0x1b6>
    2310:	80 95       	com	r24
    2312:	84 23       	and	r24, r20
    2314:	8c 93       	st	X, r24
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <MDIO_void_SetDir+0x1ee>
		case DIO_PORTD:clear_bit(DIO_u8_DDRD,A_u8_PinNum);break;
    2318:	a1 e3       	ldi	r26, 0x31	; 49
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e1 e3       	ldi	r30, 0x31	; 49
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	48 2f       	mov	r20, r24
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	28 2f       	mov	r18, r24
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	02 2e       	mov	r0, r18
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <MDIO_void_SetDir+0x1e4>
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	0a 94       	dec	r0
    2338:	e2 f7       	brpl	.-8      	; 0x2332 <MDIO_void_SetDir+0x1e0>
    233a:	80 95       	com	r24
    233c:	84 23       	and	r24, r20
    233e:	8c 93       	st	X, r24
	}
	else
	{

	}
}
    2340:	27 96       	adiw	r28, 0x07	; 7
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <MDIO_void_PinWrite>:
void MDIO_void_PinWrite(u8 A_u8_PortNum,u8 A_u8_PinNum,u8 A_u8_PinValue)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	27 97       	sbiw	r28, 0x07	; 7
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	89 83       	std	Y+1, r24	; 0x01
    2368:	6a 83       	std	Y+2, r22	; 0x02
    236a:	4b 83       	std	Y+3, r20	; 0x03
	if(HIGH==A_u8_PinValue)
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	81 30       	cpi	r24, 0x01	; 1
    2370:	09 f0       	breq	.+2      	; 0x2374 <MDIO_void_PinWrite+0x22>
    2372:	6f c0       	rjmp	.+222    	; 0x2452 <MDIO_void_PinWrite+0x100>
	{
		switch(A_u8_PortNum)
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	3f 83       	std	Y+7, r19	; 0x07
    237c:	2e 83       	std	Y+6, r18	; 0x06
    237e:	8e 81       	ldd	r24, Y+6	; 0x06
    2380:	9f 81       	ldd	r25, Y+7	; 0x07
    2382:	81 30       	cpi	r24, 0x01	; 1
    2384:	91 05       	cpc	r25, r1
    2386:	49 f1       	breq	.+82     	; 0x23da <MDIO_void_PinWrite+0x88>
    2388:	2e 81       	ldd	r18, Y+6	; 0x06
    238a:	3f 81       	ldd	r19, Y+7	; 0x07
    238c:	22 30       	cpi	r18, 0x02	; 2
    238e:	31 05       	cpc	r19, r1
    2390:	2c f4       	brge	.+10     	; 0x239c <MDIO_void_PinWrite+0x4a>
    2392:	8e 81       	ldd	r24, Y+6	; 0x06
    2394:	9f 81       	ldd	r25, Y+7	; 0x07
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	61 f0       	breq	.+24     	; 0x23b2 <MDIO_void_PinWrite+0x60>
    239a:	d2 c0       	rjmp	.+420    	; 0x2540 <MDIO_void_PinWrite+0x1ee>
    239c:	2e 81       	ldd	r18, Y+6	; 0x06
    239e:	3f 81       	ldd	r19, Y+7	; 0x07
    23a0:	22 30       	cpi	r18, 0x02	; 2
    23a2:	31 05       	cpc	r19, r1
    23a4:	71 f1       	breq	.+92     	; 0x2402 <MDIO_void_PinWrite+0xb0>
    23a6:	8e 81       	ldd	r24, Y+6	; 0x06
    23a8:	9f 81       	ldd	r25, Y+7	; 0x07
    23aa:	83 30       	cpi	r24, 0x03	; 3
    23ac:	91 05       	cpc	r25, r1
    23ae:	e9 f1       	breq	.+122    	; 0x242a <MDIO_void_PinWrite+0xd8>
    23b0:	c7 c0       	rjmp	.+398    	; 0x2540 <MDIO_void_PinWrite+0x1ee>
		{
		case DIO_PORTA:set_bit(DIO_u8_PORTA,A_u8_PinNum);break;
    23b2:	ab e3       	ldi	r26, 0x3B	; 59
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	eb e3       	ldi	r30, 0x3B	; 59
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	48 2f       	mov	r20, r24
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	02 2e       	mov	r0, r18
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <MDIO_void_PinWrite+0x7e>
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	0a 94       	dec	r0
    23d2:	e2 f7       	brpl	.-8      	; 0x23cc <MDIO_void_PinWrite+0x7a>
    23d4:	84 2b       	or	r24, r20
    23d6:	8c 93       	st	X, r24
    23d8:	b3 c0       	rjmp	.+358    	; 0x2540 <MDIO_void_PinWrite+0x1ee>
		case DIO_PORTB:set_bit(DIO_u8_PORTB,A_u8_PinNum);break;
    23da:	a8 e3       	ldi	r26, 0x38	; 56
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e8 e3       	ldi	r30, 0x38	; 56
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	48 2f       	mov	r20, r24
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	28 2f       	mov	r18, r24
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	02 2e       	mov	r0, r18
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <MDIO_void_PinWrite+0xa6>
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	0a 94       	dec	r0
    23fa:	e2 f7       	brpl	.-8      	; 0x23f4 <MDIO_void_PinWrite+0xa2>
    23fc:	84 2b       	or	r24, r20
    23fe:	8c 93       	st	X, r24
    2400:	9f c0       	rjmp	.+318    	; 0x2540 <MDIO_void_PinWrite+0x1ee>
		case DIO_PORTC:set_bit(DIO_u8_PORTC,A_u8_PinNum);break;
    2402:	a5 e3       	ldi	r26, 0x35	; 53
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e5 e3       	ldi	r30, 0x35	; 53
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	48 2f       	mov	r20, r24
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	02 2e       	mov	r0, r18
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <MDIO_void_PinWrite+0xce>
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	0a 94       	dec	r0
    2422:	e2 f7       	brpl	.-8      	; 0x241c <MDIO_void_PinWrite+0xca>
    2424:	84 2b       	or	r24, r20
    2426:	8c 93       	st	X, r24
    2428:	8b c0       	rjmp	.+278    	; 0x2540 <MDIO_void_PinWrite+0x1ee>
		case DIO_PORTD:set_bit(DIO_u8_PORTD,A_u8_PinNum);break;
    242a:	a2 e3       	ldi	r26, 0x32	; 50
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	e2 e3       	ldi	r30, 0x32	; 50
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	48 2f       	mov	r20, r24
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	02 2e       	mov	r0, r18
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <MDIO_void_PinWrite+0xf6>
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	0a 94       	dec	r0
    244a:	e2 f7       	brpl	.-8      	; 0x2444 <MDIO_void_PinWrite+0xf2>
    244c:	84 2b       	or	r24, r20
    244e:	8c 93       	st	X, r24
    2450:	77 c0       	rjmp	.+238    	; 0x2540 <MDIO_void_PinWrite+0x1ee>
		default:break;
		}
	}
	else if(LOW==A_u8_PinValue)
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	88 23       	and	r24, r24
    2456:	09 f0       	breq	.+2      	; 0x245a <MDIO_void_PinWrite+0x108>
    2458:	73 c0       	rjmp	.+230    	; 0x2540 <MDIO_void_PinWrite+0x1ee>
	{
		switch(A_u8_PortNum){
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	3d 83       	std	Y+5, r19	; 0x05
    2462:	2c 83       	std	Y+4, r18	; 0x04
    2464:	8c 81       	ldd	r24, Y+4	; 0x04
    2466:	9d 81       	ldd	r25, Y+5	; 0x05
    2468:	81 30       	cpi	r24, 0x01	; 1
    246a:	91 05       	cpc	r25, r1
    246c:	59 f1       	breq	.+86     	; 0x24c4 <MDIO_void_PinWrite+0x172>
    246e:	2c 81       	ldd	r18, Y+4	; 0x04
    2470:	3d 81       	ldd	r19, Y+5	; 0x05
    2472:	22 30       	cpi	r18, 0x02	; 2
    2474:	31 05       	cpc	r19, r1
    2476:	2c f4       	brge	.+10     	; 0x2482 <MDIO_void_PinWrite+0x130>
    2478:	8c 81       	ldd	r24, Y+4	; 0x04
    247a:	9d 81       	ldd	r25, Y+5	; 0x05
    247c:	00 97       	sbiw	r24, 0x00	; 0
    247e:	69 f0       	breq	.+26     	; 0x249a <MDIO_void_PinWrite+0x148>
    2480:	5f c0       	rjmp	.+190    	; 0x2540 <MDIO_void_PinWrite+0x1ee>
    2482:	2c 81       	ldd	r18, Y+4	; 0x04
    2484:	3d 81       	ldd	r19, Y+5	; 0x05
    2486:	22 30       	cpi	r18, 0x02	; 2
    2488:	31 05       	cpc	r19, r1
    248a:	89 f1       	breq	.+98     	; 0x24ee <MDIO_void_PinWrite+0x19c>
    248c:	8c 81       	ldd	r24, Y+4	; 0x04
    248e:	9d 81       	ldd	r25, Y+5	; 0x05
    2490:	83 30       	cpi	r24, 0x03	; 3
    2492:	91 05       	cpc	r25, r1
    2494:	09 f4       	brne	.+2      	; 0x2498 <MDIO_void_PinWrite+0x146>
    2496:	40 c0       	rjmp	.+128    	; 0x2518 <MDIO_void_PinWrite+0x1c6>
    2498:	53 c0       	rjmp	.+166    	; 0x2540 <MDIO_void_PinWrite+0x1ee>
		case DIO_PORTA:clear_bit(DIO_u8_PORTA,A_u8_PinNum);break;
    249a:	ab e3       	ldi	r26, 0x3B	; 59
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	eb e3       	ldi	r30, 0x3B	; 59
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	48 2f       	mov	r20, r24
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	02 2e       	mov	r0, r18
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <MDIO_void_PinWrite+0x166>
    24b4:	88 0f       	add	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	0a 94       	dec	r0
    24ba:	e2 f7       	brpl	.-8      	; 0x24b4 <MDIO_void_PinWrite+0x162>
    24bc:	80 95       	com	r24
    24be:	84 23       	and	r24, r20
    24c0:	8c 93       	st	X, r24
    24c2:	3e c0       	rjmp	.+124    	; 0x2540 <MDIO_void_PinWrite+0x1ee>
		case DIO_PORTB:clear_bit(DIO_u8_PORTB,A_u8_PinNum);break;
    24c4:	a8 e3       	ldi	r26, 0x38	; 56
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	e8 e3       	ldi	r30, 0x38	; 56
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	48 2f       	mov	r20, r24
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	02 2e       	mov	r0, r18
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <MDIO_void_PinWrite+0x190>
    24de:	88 0f       	add	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	0a 94       	dec	r0
    24e4:	e2 f7       	brpl	.-8      	; 0x24de <MDIO_void_PinWrite+0x18c>
    24e6:	80 95       	com	r24
    24e8:	84 23       	and	r24, r20
    24ea:	8c 93       	st	X, r24
    24ec:	29 c0       	rjmp	.+82     	; 0x2540 <MDIO_void_PinWrite+0x1ee>
		case DIO_PORTC:clear_bit(DIO_u8_PORTC,A_u8_PinNum);break;
    24ee:	a5 e3       	ldi	r26, 0x35	; 53
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	e5 e3       	ldi	r30, 0x35	; 53
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	48 2f       	mov	r20, r24
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	28 2f       	mov	r18, r24
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	02 2e       	mov	r0, r18
    2506:	02 c0       	rjmp	.+4      	; 0x250c <MDIO_void_PinWrite+0x1ba>
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	0a 94       	dec	r0
    250e:	e2 f7       	brpl	.-8      	; 0x2508 <MDIO_void_PinWrite+0x1b6>
    2510:	80 95       	com	r24
    2512:	84 23       	and	r24, r20
    2514:	8c 93       	st	X, r24
    2516:	14 c0       	rjmp	.+40     	; 0x2540 <MDIO_void_PinWrite+0x1ee>
		case DIO_PORTD:clear_bit(DIO_u8_PORTD,A_u8_PinNum);break;
    2518:	a2 e3       	ldi	r26, 0x32	; 50
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e2 e3       	ldi	r30, 0x32	; 50
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	48 2f       	mov	r20, r24
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	28 2f       	mov	r18, r24
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	02 2e       	mov	r0, r18
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <MDIO_void_PinWrite+0x1e4>
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	0a 94       	dec	r0
    2538:	e2 f7       	brpl	.-8      	; 0x2532 <MDIO_void_PinWrite+0x1e0>
    253a:	80 95       	com	r24
    253c:	84 23       	and	r24, r20
    253e:	8c 93       	st	X, r24
	}
	else
	{

	}
}
    2540:	27 96       	adiw	r28, 0x07	; 7
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	f8 94       	cli
    2546:	de bf       	out	0x3e, r29	; 62
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	cd bf       	out	0x3d, r28	; 61
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <MDIO_u8_PinRead>:
u8 MDIO_u8_PinRead(u8 A_u8_PortNum,u8 A_u8_PinNum)
{
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	00 d0       	rcall	.+0      	; 0x2558 <MDIO_u8_PinRead+0x6>
    2558:	00 d0       	rcall	.+0      	; 0x255a <MDIO_u8_PinRead+0x8>
    255a:	0f 92       	push	r0
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	8a 83       	std	Y+2, r24	; 0x02
    2562:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8_PinValue;
	switch(A_u8_PortNum)
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	3d 83       	std	Y+5, r19	; 0x05
    256c:	2c 83       	std	Y+4, r18	; 0x04
    256e:	4c 81       	ldd	r20, Y+4	; 0x04
    2570:	5d 81       	ldd	r21, Y+5	; 0x05
    2572:	41 30       	cpi	r20, 0x01	; 1
    2574:	51 05       	cpc	r21, r1
    2576:	b1 f1       	breq	.+108    	; 0x25e4 <MDIO_u8_PinRead+0x92>
    2578:	8c 81       	ldd	r24, Y+4	; 0x04
    257a:	9d 81       	ldd	r25, Y+5	; 0x05
    257c:	82 30       	cpi	r24, 0x02	; 2
    257e:	91 05       	cpc	r25, r1
    2580:	34 f4       	brge	.+12     	; 0x258e <MDIO_u8_PinRead+0x3c>
    2582:	2c 81       	ldd	r18, Y+4	; 0x04
    2584:	3d 81       	ldd	r19, Y+5	; 0x05
    2586:	21 15       	cp	r18, r1
    2588:	31 05       	cpc	r19, r1
    258a:	71 f0       	breq	.+28     	; 0x25a8 <MDIO_u8_PinRead+0x56>
    258c:	84 c0       	rjmp	.+264    	; 0x2696 <MDIO_u8_PinRead+0x144>
    258e:	4c 81       	ldd	r20, Y+4	; 0x04
    2590:	5d 81       	ldd	r21, Y+5	; 0x05
    2592:	42 30       	cpi	r20, 0x02	; 2
    2594:	51 05       	cpc	r21, r1
    2596:	09 f4       	brne	.+2      	; 0x259a <MDIO_u8_PinRead+0x48>
    2598:	43 c0       	rjmp	.+134    	; 0x2620 <MDIO_u8_PinRead+0xce>
    259a:	8c 81       	ldd	r24, Y+4	; 0x04
    259c:	9d 81       	ldd	r25, Y+5	; 0x05
    259e:	83 30       	cpi	r24, 0x03	; 3
    25a0:	91 05       	cpc	r25, r1
    25a2:	09 f4       	brne	.+2      	; 0x25a6 <MDIO_u8_PinRead+0x54>
    25a4:	5b c0       	rjmp	.+182    	; 0x265c <MDIO_u8_PinRead+0x10a>
    25a6:	77 c0       	rjmp	.+238    	; 0x2696 <MDIO_u8_PinRead+0x144>
	{
	case DIO_PORTA:L_u8_PinValue=read_bit(DIO_u8_PINA,A_u8_PinNum);break;
    25a8:	e9 e3       	ldi	r30, 0x39	; 57
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	48 2f       	mov	r20, r24
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	28 2f       	mov	r18, r24
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <MDIO_u8_PinRead+0x70>
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	2a 95       	dec	r18
    25c4:	e2 f7       	brpl	.-8      	; 0x25be <MDIO_u8_PinRead+0x6c>
    25c6:	9a 01       	movw	r18, r20
    25c8:	28 23       	and	r18, r24
    25ca:	39 23       	and	r19, r25
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	88 2f       	mov	r24, r24
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	a9 01       	movw	r20, r18
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <MDIO_u8_PinRead+0x88>
    25d6:	55 95       	asr	r21
    25d8:	47 95       	ror	r20
    25da:	8a 95       	dec	r24
    25dc:	e2 f7       	brpl	.-8      	; 0x25d6 <MDIO_u8_PinRead+0x84>
    25de:	ca 01       	movw	r24, r20
    25e0:	89 83       	std	Y+1, r24	; 0x01
    25e2:	59 c0       	rjmp	.+178    	; 0x2696 <MDIO_u8_PinRead+0x144>
	case DIO_PORTB:L_u8_PinValue=read_bit(DIO_u8_PINB,A_u8_PinNum);break;
    25e4:	e6 e3       	ldi	r30, 0x36	; 54
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	48 2f       	mov	r20, r24
    25ec:	50 e0       	ldi	r21, 0x00	; 0
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	02 c0       	rjmp	.+4      	; 0x25fe <MDIO_u8_PinRead+0xac>
    25fa:	88 0f       	add	r24, r24
    25fc:	99 1f       	adc	r25, r25
    25fe:	2a 95       	dec	r18
    2600:	e2 f7       	brpl	.-8      	; 0x25fa <MDIO_u8_PinRead+0xa8>
    2602:	9a 01       	movw	r18, r20
    2604:	28 23       	and	r18, r24
    2606:	39 23       	and	r19, r25
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	88 2f       	mov	r24, r24
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	a9 01       	movw	r20, r18
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <MDIO_u8_PinRead+0xc4>
    2612:	55 95       	asr	r21
    2614:	47 95       	ror	r20
    2616:	8a 95       	dec	r24
    2618:	e2 f7       	brpl	.-8      	; 0x2612 <MDIO_u8_PinRead+0xc0>
    261a:	ca 01       	movw	r24, r20
    261c:	89 83       	std	Y+1, r24	; 0x01
    261e:	3b c0       	rjmp	.+118    	; 0x2696 <MDIO_u8_PinRead+0x144>
	case DIO_PORTC:L_u8_PinValue=read_bit(DIO_u8_PINC,A_u8_PinNum);break;
    2620:	e3 e3       	ldi	r30, 0x33	; 51
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	48 2f       	mov	r20, r24
    2628:	50 e0       	ldi	r21, 0x00	; 0
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	02 c0       	rjmp	.+4      	; 0x263a <MDIO_u8_PinRead+0xe8>
    2636:	88 0f       	add	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	2a 95       	dec	r18
    263c:	e2 f7       	brpl	.-8      	; 0x2636 <MDIO_u8_PinRead+0xe4>
    263e:	9a 01       	movw	r18, r20
    2640:	28 23       	and	r18, r24
    2642:	39 23       	and	r19, r25
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	88 2f       	mov	r24, r24
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a9 01       	movw	r20, r18
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <MDIO_u8_PinRead+0x100>
    264e:	55 95       	asr	r21
    2650:	47 95       	ror	r20
    2652:	8a 95       	dec	r24
    2654:	e2 f7       	brpl	.-8      	; 0x264e <MDIO_u8_PinRead+0xfc>
    2656:	ca 01       	movw	r24, r20
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	1d c0       	rjmp	.+58     	; 0x2696 <MDIO_u8_PinRead+0x144>
	case DIO_PORTD:L_u8_PinValue=read_bit(DIO_u8_PIND,A_u8_PinNum);break;
    265c:	e0 e3       	ldi	r30, 0x30	; 48
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	48 2f       	mov	r20, r24
    2664:	50 e0       	ldi	r21, 0x00	; 0
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	28 2f       	mov	r18, r24
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	02 c0       	rjmp	.+4      	; 0x2676 <MDIO_u8_PinRead+0x124>
    2672:	88 0f       	add	r24, r24
    2674:	99 1f       	adc	r25, r25
    2676:	2a 95       	dec	r18
    2678:	e2 f7       	brpl	.-8      	; 0x2672 <MDIO_u8_PinRead+0x120>
    267a:	9a 01       	movw	r18, r20
    267c:	28 23       	and	r18, r24
    267e:	39 23       	and	r19, r25
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	88 2f       	mov	r24, r24
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	a9 01       	movw	r20, r18
    2688:	02 c0       	rjmp	.+4      	; 0x268e <MDIO_u8_PinRead+0x13c>
    268a:	55 95       	asr	r21
    268c:	47 95       	ror	r20
    268e:	8a 95       	dec	r24
    2690:	e2 f7       	brpl	.-8      	; 0x268a <MDIO_u8_PinRead+0x138>
    2692:	ca 01       	movw	r24, r20
    2694:	89 83       	std	Y+1, r24	; 0x01
	default:break;
	}

	return L_u8_PinValue;
    2696:	89 81       	ldd	r24, Y+1	; 0x01
}
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <MDIO_void_PinToggle>:
void MDIO_void_PinToggle(u8 A_u8_PortNum,u8 A_u8_PinNum)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <MDIO_void_PinToggle+0x6>
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <MDIO_void_PinToggle+0x8>
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	89 83       	std	Y+1, r24	; 0x01
    26b6:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8_PortNum)
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	28 2f       	mov	r18, r24
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	3c 83       	std	Y+4, r19	; 0x04
    26c0:	2b 83       	std	Y+3, r18	; 0x03
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	9c 81       	ldd	r25, Y+4	; 0x04
    26c6:	81 30       	cpi	r24, 0x01	; 1
    26c8:	91 05       	cpc	r25, r1
    26ca:	49 f1       	breq	.+82     	; 0x271e <MDIO_void_PinToggle+0x76>
    26cc:	2b 81       	ldd	r18, Y+3	; 0x03
    26ce:	3c 81       	ldd	r19, Y+4	; 0x04
    26d0:	22 30       	cpi	r18, 0x02	; 2
    26d2:	31 05       	cpc	r19, r1
    26d4:	2c f4       	brge	.+10     	; 0x26e0 <MDIO_void_PinToggle+0x38>
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	61 f0       	breq	.+24     	; 0x26f6 <MDIO_void_PinToggle+0x4e>
    26de:	5a c0       	rjmp	.+180    	; 0x2794 <MDIO_void_PinToggle+0xec>
    26e0:	2b 81       	ldd	r18, Y+3	; 0x03
    26e2:	3c 81       	ldd	r19, Y+4	; 0x04
    26e4:	22 30       	cpi	r18, 0x02	; 2
    26e6:	31 05       	cpc	r19, r1
    26e8:	71 f1       	breq	.+92     	; 0x2746 <MDIO_void_PinToggle+0x9e>
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	83 30       	cpi	r24, 0x03	; 3
    26f0:	91 05       	cpc	r25, r1
    26f2:	e9 f1       	breq	.+122    	; 0x276e <MDIO_void_PinToggle+0xc6>
    26f4:	4f c0       	rjmp	.+158    	; 0x2794 <MDIO_void_PinToggle+0xec>
	{
	case DIO_PORTA:toggle_bit(DIO_u8_PORTA,A_u8_PinNum);break;
    26f6:	ab e3       	ldi	r26, 0x3B	; 59
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	eb e3       	ldi	r30, 0x3B	; 59
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	48 2f       	mov	r20, r24
    2702:	8a 81       	ldd	r24, Y+2	; 0x02
    2704:	28 2f       	mov	r18, r24
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	02 2e       	mov	r0, r18
    270e:	02 c0       	rjmp	.+4      	; 0x2714 <MDIO_void_PinToggle+0x6c>
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	0a 94       	dec	r0
    2716:	e2 f7       	brpl	.-8      	; 0x2710 <MDIO_void_PinToggle+0x68>
    2718:	84 27       	eor	r24, r20
    271a:	8c 93       	st	X, r24
    271c:	3b c0       	rjmp	.+118    	; 0x2794 <MDIO_void_PinToggle+0xec>
	case DIO_PORTB:toggle_bit(DIO_u8_PORTB,A_u8_PinNum);break;
    271e:	a8 e3       	ldi	r26, 0x38	; 56
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e8 e3       	ldi	r30, 0x38	; 56
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	48 2f       	mov	r20, r24
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	02 2e       	mov	r0, r18
    2736:	02 c0       	rjmp	.+4      	; 0x273c <MDIO_void_PinToggle+0x94>
    2738:	88 0f       	add	r24, r24
    273a:	99 1f       	adc	r25, r25
    273c:	0a 94       	dec	r0
    273e:	e2 f7       	brpl	.-8      	; 0x2738 <MDIO_void_PinToggle+0x90>
    2740:	84 27       	eor	r24, r20
    2742:	8c 93       	st	X, r24
    2744:	27 c0       	rjmp	.+78     	; 0x2794 <MDIO_void_PinToggle+0xec>
	case DIO_PORTC:toggle_bit(DIO_u8_PORTC,A_u8_PinNum);break;
    2746:	a5 e3       	ldi	r26, 0x35	; 53
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	e5 e3       	ldi	r30, 0x35	; 53
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	48 2f       	mov	r20, r24
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	02 2e       	mov	r0, r18
    275e:	02 c0       	rjmp	.+4      	; 0x2764 <MDIO_void_PinToggle+0xbc>
    2760:	88 0f       	add	r24, r24
    2762:	99 1f       	adc	r25, r25
    2764:	0a 94       	dec	r0
    2766:	e2 f7       	brpl	.-8      	; 0x2760 <MDIO_void_PinToggle+0xb8>
    2768:	84 27       	eor	r24, r20
    276a:	8c 93       	st	X, r24
    276c:	13 c0       	rjmp	.+38     	; 0x2794 <MDIO_void_PinToggle+0xec>
	case DIO_PORTD:toggle_bit(DIO_u8_PORTD,A_u8_PinNum);break;
    276e:	a2 e3       	ldi	r26, 0x32	; 50
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e2 e3       	ldi	r30, 0x32	; 50
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	48 2f       	mov	r20, r24
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	28 2f       	mov	r18, r24
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	02 2e       	mov	r0, r18
    2786:	02 c0       	rjmp	.+4      	; 0x278c <MDIO_void_PinToggle+0xe4>
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	0a 94       	dec	r0
    278e:	e2 f7       	brpl	.-8      	; 0x2788 <MDIO_void_PinToggle+0xe0>
    2790:	84 27       	eor	r24, r20
    2792:	8c 93       	st	X, r24
	default:break;
	}
}
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <MDIO_void_PortSetDir>:
void MDIO_void_PortSetDir(u8 A_u8_PortNum,u8 A_u8_PortDir)
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <MDIO_void_PortSetDir+0x6>
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <MDIO_void_PortSetDir+0x8>
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8_PortNum)
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	3c 83       	std	Y+4, r19	; 0x04
    27ba:	2b 83       	std	Y+3, r18	; 0x03
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	9c 81       	ldd	r25, Y+4	; 0x04
    27c0:	81 30       	cpi	r24, 0x01	; 1
    27c2:	91 05       	cpc	r25, r1
    27c4:	d1 f0       	breq	.+52     	; 0x27fa <MDIO_void_PortSetDir+0x58>
    27c6:	2b 81       	ldd	r18, Y+3	; 0x03
    27c8:	3c 81       	ldd	r19, Y+4	; 0x04
    27ca:	22 30       	cpi	r18, 0x02	; 2
    27cc:	31 05       	cpc	r19, r1
    27ce:	2c f4       	brge	.+10     	; 0x27da <MDIO_void_PortSetDir+0x38>
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	9c 81       	ldd	r25, Y+4	; 0x04
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	61 f0       	breq	.+24     	; 0x27f0 <MDIO_void_PortSetDir+0x4e>
    27d8:	1e c0       	rjmp	.+60     	; 0x2816 <MDIO_void_PortSetDir+0x74>
    27da:	2b 81       	ldd	r18, Y+3	; 0x03
    27dc:	3c 81       	ldd	r19, Y+4	; 0x04
    27de:	22 30       	cpi	r18, 0x02	; 2
    27e0:	31 05       	cpc	r19, r1
    27e2:	81 f0       	breq	.+32     	; 0x2804 <MDIO_void_PortSetDir+0x62>
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	9c 81       	ldd	r25, Y+4	; 0x04
    27e8:	83 30       	cpi	r24, 0x03	; 3
    27ea:	91 05       	cpc	r25, r1
    27ec:	81 f0       	breq	.+32     	; 0x280e <MDIO_void_PortSetDir+0x6c>
    27ee:	13 c0       	rjmp	.+38     	; 0x2816 <MDIO_void_PortSetDir+0x74>
	{
	case DIO_PORTA:DIO_u8_DDRA=A_u8_PortDir;break;
    27f0:	ea e3       	ldi	r30, 0x3A	; 58
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	80 83       	st	Z, r24
    27f8:	0e c0       	rjmp	.+28     	; 0x2816 <MDIO_void_PortSetDir+0x74>
	case DIO_PORTB:DIO_u8_DDRB=A_u8_PortDir;break;
    27fa:	e7 e3       	ldi	r30, 0x37	; 55
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2800:	80 83       	st	Z, r24
    2802:	09 c0       	rjmp	.+18     	; 0x2816 <MDIO_void_PortSetDir+0x74>
	case DIO_PORTC:DIO_u8_DDRC=A_u8_PortDir;break;
    2804:	e4 e3       	ldi	r30, 0x34	; 52
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	8a 81       	ldd	r24, Y+2	; 0x02
    280a:	80 83       	st	Z, r24
    280c:	04 c0       	rjmp	.+8      	; 0x2816 <MDIO_void_PortSetDir+0x74>
	case DIO_PORTD:DIO_u8_DDRD=A_u8_PortDir;break;
    280e:	e1 e3       	ldi	r30, 0x31	; 49
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	80 83       	st	Z, r24
	default:break;
	}
}
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <MDIO_void_PortWrite>:
void MDIO_void_PortWrite(u8 A_u8_PortNum,u8 A_u8_PortValue)
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	00 d0       	rcall	.+0      	; 0x282a <MDIO_void_PortWrite+0x6>
    282a:	00 d0       	rcall	.+0      	; 0x282c <MDIO_void_PortWrite+0x8>
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8_PortNum)
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	28 2f       	mov	r18, r24
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	3c 83       	std	Y+4, r19	; 0x04
    283c:	2b 83       	std	Y+3, r18	; 0x03
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	9c 81       	ldd	r25, Y+4	; 0x04
    2842:	81 30       	cpi	r24, 0x01	; 1
    2844:	91 05       	cpc	r25, r1
    2846:	d1 f0       	breq	.+52     	; 0x287c <MDIO_void_PortWrite+0x58>
    2848:	2b 81       	ldd	r18, Y+3	; 0x03
    284a:	3c 81       	ldd	r19, Y+4	; 0x04
    284c:	22 30       	cpi	r18, 0x02	; 2
    284e:	31 05       	cpc	r19, r1
    2850:	2c f4       	brge	.+10     	; 0x285c <MDIO_void_PortWrite+0x38>
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	61 f0       	breq	.+24     	; 0x2872 <MDIO_void_PortWrite+0x4e>
    285a:	1e c0       	rjmp	.+60     	; 0x2898 <MDIO_void_PortWrite+0x74>
    285c:	2b 81       	ldd	r18, Y+3	; 0x03
    285e:	3c 81       	ldd	r19, Y+4	; 0x04
    2860:	22 30       	cpi	r18, 0x02	; 2
    2862:	31 05       	cpc	r19, r1
    2864:	81 f0       	breq	.+32     	; 0x2886 <MDIO_void_PortWrite+0x62>
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	83 30       	cpi	r24, 0x03	; 3
    286c:	91 05       	cpc	r25, r1
    286e:	81 f0       	breq	.+32     	; 0x2890 <MDIO_void_PortWrite+0x6c>
    2870:	13 c0       	rjmp	.+38     	; 0x2898 <MDIO_void_PortWrite+0x74>
	{
	case DIO_PORTA:DIO_u8_PORTA=A_u8_PortValue;break;
    2872:	eb e3       	ldi	r30, 0x3B	; 59
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	80 83       	st	Z, r24
    287a:	0e c0       	rjmp	.+28     	; 0x2898 <MDIO_void_PortWrite+0x74>
	case DIO_PORTB:DIO_u8_PORTB=A_u8_PortValue;break;
    287c:	e8 e3       	ldi	r30, 0x38	; 56
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	80 83       	st	Z, r24
    2884:	09 c0       	rjmp	.+18     	; 0x2898 <MDIO_void_PortWrite+0x74>
	case DIO_PORTC:DIO_u8_PORTC=A_u8_PortValue;break;
    2886:	e5 e3       	ldi	r30, 0x35	; 53
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	80 83       	st	Z, r24
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <MDIO_void_PortWrite+0x74>
	case DIO_PORTD:DIO_u8_PORTD=A_u8_PortValue;break;
    2890:	e2 e3       	ldi	r30, 0x32	; 50
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	80 83       	st	Z, r24
	default:break;
	}
}
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <MDIO_u8_PortRead>:
u8 MDIO_u8_PortRead(u8 A_u8_PortNum)
{
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <MDIO_u8_PortRead+0x6>
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <MDIO_u8_PortRead+0x8>
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8_PortValue;
	switch(A_u8_PortNum)
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	28 2f       	mov	r18, r24
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	3c 83       	std	Y+4, r19	; 0x04
    28bc:	2b 83       	std	Y+3, r18	; 0x03
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	81 30       	cpi	r24, 0x01	; 1
    28c4:	91 05       	cpc	r25, r1
    28c6:	d1 f0       	breq	.+52     	; 0x28fc <MDIO_u8_PortRead+0x56>
    28c8:	2b 81       	ldd	r18, Y+3	; 0x03
    28ca:	3c 81       	ldd	r19, Y+4	; 0x04
    28cc:	22 30       	cpi	r18, 0x02	; 2
    28ce:	31 05       	cpc	r19, r1
    28d0:	2c f4       	brge	.+10     	; 0x28dc <MDIO_u8_PortRead+0x36>
    28d2:	8b 81       	ldd	r24, Y+3	; 0x03
    28d4:	9c 81       	ldd	r25, Y+4	; 0x04
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	61 f0       	breq	.+24     	; 0x28f2 <MDIO_u8_PortRead+0x4c>
    28da:	1e c0       	rjmp	.+60     	; 0x2918 <MDIO_u8_PortRead+0x72>
    28dc:	2b 81       	ldd	r18, Y+3	; 0x03
    28de:	3c 81       	ldd	r19, Y+4	; 0x04
    28e0:	22 30       	cpi	r18, 0x02	; 2
    28e2:	31 05       	cpc	r19, r1
    28e4:	81 f0       	breq	.+32     	; 0x2906 <MDIO_u8_PortRead+0x60>
    28e6:	8b 81       	ldd	r24, Y+3	; 0x03
    28e8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ea:	83 30       	cpi	r24, 0x03	; 3
    28ec:	91 05       	cpc	r25, r1
    28ee:	81 f0       	breq	.+32     	; 0x2910 <MDIO_u8_PortRead+0x6a>
    28f0:	13 c0       	rjmp	.+38     	; 0x2918 <MDIO_u8_PortRead+0x72>
	{
	case DIO_PORTA:L_u8_PortValue=DIO_u8_PORTA;break;
    28f2:	eb e3       	ldi	r30, 0x3B	; 59
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	0e c0       	rjmp	.+28     	; 0x2918 <MDIO_u8_PortRead+0x72>
	case DIO_PORTB:L_u8_PortValue=DIO_u8_PORTB;break;
    28fc:	e8 e3       	ldi	r30, 0x38	; 56
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	89 83       	std	Y+1, r24	; 0x01
    2904:	09 c0       	rjmp	.+18     	; 0x2918 <MDIO_u8_PortRead+0x72>
	case DIO_PORTC:L_u8_PortValue=DIO_u8_PORTC;break;
    2906:	e5 e3       	ldi	r30, 0x35	; 53
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	04 c0       	rjmp	.+8      	; 0x2918 <MDIO_u8_PortRead+0x72>
	case DIO_PORTD:L_u8_PortValue=DIO_u8_PORTD;break;
    2910:	e2 e3       	ldi	r30, 0x32	; 50
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	89 83       	std	Y+1, r24	; 0x01
	default:break;
	}
	return L_u8_PortValue;
    2918:	89 81       	ldd	r24, Y+1	; 0x01
}
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <MDIO_void_PortWriteHigh>:
void MDIO_void_PortWriteHigh(u8 A_u8_PortNum,u8 A_u8_PortValue)
{
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	00 d0       	rcall	.+0      	; 0x292e <MDIO_void_PortWriteHigh+0x6>
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	89 83       	std	Y+1, r24	; 0x01
    2934:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_void_PortWrite(A_u8_PortNum,A_u8_PortValue<<4);
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	98 2f       	mov	r25, r24
    293a:	92 95       	swap	r25
    293c:	90 7f       	andi	r25, 0xF0	; 240
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	69 2f       	mov	r22, r25
    2942:	0e 94 12 14 	call	0x2824	; 0x2824 <MDIO_void_PortWrite>
}
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <MADC_voidInit>:
#include "ADC_Interface.h"
#include "ADC_Config.h"

static void (* GP_AdcCallBack)(void);
void MADC_voidInit(void)
{
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
		clear_bit(ADC_ADCSRA,ADC_ADCSRA_ADPS1);
		set_bit(ADC_ADCSRA,ADC_ADCSRA_ADPS2);
	}
	else if(ADC_DivFactor==ADC_64)
	{
		clear_bit(ADC_ADCSRA,ADC_ADCSRA_ADPS0);
    2958:	a6 e2       	ldi	r26, 0x26	; 38
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e6 e2       	ldi	r30, 0x26	; 38
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	8e 7f       	andi	r24, 0xFE	; 254
    2964:	8c 93       	st	X, r24
		set_bit(ADC_ADCSRA,ADC_ADCSRA_ADPS1);
    2966:	a6 e2       	ldi	r26, 0x26	; 38
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	e6 e2       	ldi	r30, 0x26	; 38
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	82 60       	ori	r24, 0x02	; 2
    2972:	8c 93       	st	X, r24
		set_bit(ADC_ADCSRA,ADC_ADCSRA_ADPS2);
    2974:	a6 e2       	ldi	r26, 0x26	; 38
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e6 e2       	ldi	r30, 0x26	; 38
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	84 60       	ori	r24, 0x04	; 4
    2980:	8c 93       	st	X, r24
		clear_bit(ADC_ADMUX,ADC_ADMUX_REFS0);
		clear_bit(ADC_ADMUX,ADC_ADMUX_REFS0);
	}
	else if(ADC_RefVoltage==ADC_AVCC)
	{
		set_bit(ADC_ADMUX,ADC_ADMUX_REFS0);
    2982:	a7 e2       	ldi	r26, 0x27	; 39
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	e7 e2       	ldi	r30, 0x27	; 39
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	80 64       	ori	r24, 0x40	; 64
    298e:	8c 93       	st	X, r24
		clear_bit(ADC_ADMUX,ADC_ADMUX_REFS0);
    2990:	a7 e2       	ldi	r26, 0x27	; 39
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	e7 e2       	ldi	r30, 0x27	; 39
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	8f 7b       	andi	r24, 0xBF	; 191
    299c:	8c 93       	st	X, r24

	}
	//Setting AdjMode
	if(ADC_AdjMode==ADC_RIGHT_LEFT)
	{
		clear_bit(ADC_ADMUX,ADC_ADMUX_ADLAR);
    299e:	a7 e2       	ldi	r26, 0x27	; 39
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e7 e2       	ldi	r30, 0x27	; 39
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	8f 7d       	andi	r24, 0xDF	; 223
    29aa:	8c 93       	st	X, r24

		}
	}
	else if(ADC_ConvMode==ADC_Manual)
	{
		clear_bit(ADC_ADCSRA,ADC_ADCSRA_ADATE);
    29ac:	a6 e2       	ldi	r26, 0x26	; 38
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	e6 e2       	ldi	r30, 0x26	; 38
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	8f 7d       	andi	r24, 0xDF	; 223
    29b8:	8c 93       	st	X, r24
	{
		set_bit(ADC_ADCSRA,ADC_ADCSRA_ADIE);
	}

	//ADC Enable
	set_bit(ADC_ADCSRA,ADC_ADCSRA_ADEN);
    29ba:	a6 e2       	ldi	r26, 0x26	; 38
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e6 e2       	ldi	r30, 0x26	; 38
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	80 68       	ori	r24, 0x80	; 128
    29c6:	8c 93       	st	X, r24

}
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <MADC_voidStartConv>:
void MADC_voidStartConv(void)
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
	//setting mux selections
	ADC_ADMUX &=ADC_ChannelStart;
    29d6:	a7 e2       	ldi	r26, 0x27	; 39
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	e7 e2       	ldi	r30, 0x27	; 39
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	80 7e       	andi	r24, 0xE0	; 224
    29e2:	8c 93       	st	X, r24
	ADC_ADMUX |= ADC_CHANNEL;
    29e4:	a7 e2       	ldi	r26, 0x27	; 39
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e7 e2       	ldi	r30, 0x27	; 39
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	8c 93       	st	X, r24
	//start conv
	set_bit(ADC_ADCSRA,ADC_ADCSRA_ADSC);
    29f0:	a6 e2       	ldi	r26, 0x26	; 38
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	e6 e2       	ldi	r30, 0x26	; 38
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	80 64       	ori	r24, 0x40	; 64
    29fc:	8c 93       	st	X, r24
	if(ADC_OuputMode==ADC_BOOLING)
	{
		while(read_bit(ADC_ADCSRA,ADC_ADCSRA_ADIF)==0);
    29fe:	e6 e2       	ldi	r30, 0x26	; 38
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	88 2f       	mov	r24, r24
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	80 71       	andi	r24, 0x10	; 16
    2a0a:	90 70       	andi	r25, 0x00	; 0
    2a0c:	95 95       	asr	r25
    2a0e:	87 95       	ror	r24
    2a10:	95 95       	asr	r25
    2a12:	87 95       	ror	r24
    2a14:	95 95       	asr	r25
    2a16:	87 95       	ror	r24
    2a18:	95 95       	asr	r25
    2a1a:	87 95       	ror	r24
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	79 f3       	breq	.-34     	; 0x29fe <MADC_voidStartConv+0x30>
		set_bit(ADC_ADCSRA,ADC_ADCSRA_ADIF);
    2a20:	a6 e2       	ldi	r26, 0x26	; 38
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	e6 e2       	ldi	r30, 0x26	; 38
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	80 61       	ori	r24, 0x10	; 16
    2a2c:	8c 93       	st	X, r24
	}
}
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	08 95       	ret

00002a34 <MADC_u16ReadOut>:
u16 MADC_u16ReadOut(void)
{
    2a34:	df 93       	push	r29
    2a36:	cf 93       	push	r28
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <MADC_u16ReadOut+0x6>
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
	u16 L_u16Temp;
	if(ADC_AdjMode==ADC_RIGHT_LEFT)
	{
		return ADC_ADCLH;
    2a3e:	e4 e2       	ldi	r30, 0x24	; 36
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	91 81       	ldd	r25, Z+1	; 0x01
	else if (ADC_AdjMode==ADC_LEFT_RIGHT)
	{
		L_u16Temp=ADC_ADCH;
		return L_u16Temp<<2;
	}
}
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	08 95       	ret

00002a50 <MADC_voidAdcCallBack>:

void MADC_voidAdcCallBack(void (*PTR)(void))
{
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	00 d0       	rcall	.+0      	; 0x2a56 <MADC_voidAdcCallBack+0x6>
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	9a 83       	std	Y+2, r25	; 0x02
    2a5c:	89 83       	std	Y+1, r24	; 0x01
	GP_AdcCallBack=PTR;
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	90 93 c3 01 	sts	0x01C3, r25
    2a66:	80 93 c2 01 	sts	0x01C2, r24
}
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	cf 91       	pop	r28
    2a70:	df 91       	pop	r29
    2a72:	08 95       	ret

00002a74 <__vector_16>:

void __vector_16 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_16 (void){
    2a74:	1f 92       	push	r1
    2a76:	0f 92       	push	r0
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	0f 92       	push	r0
    2a7c:	11 24       	eor	r1, r1
    2a7e:	2f 93       	push	r18
    2a80:	3f 93       	push	r19
    2a82:	4f 93       	push	r20
    2a84:	5f 93       	push	r21
    2a86:	6f 93       	push	r22
    2a88:	7f 93       	push	r23
    2a8a:	8f 93       	push	r24
    2a8c:	9f 93       	push	r25
    2a8e:	af 93       	push	r26
    2a90:	bf 93       	push	r27
    2a92:	ef 93       	push	r30
    2a94:	ff 93       	push	r31
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
	GP_AdcCallBack();
    2a9e:	e0 91 c2 01 	lds	r30, 0x01C2
    2aa2:	f0 91 c3 01 	lds	r31, 0x01C3
    2aa6:	09 95       	icall
}
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	ff 91       	pop	r31
    2aae:	ef 91       	pop	r30
    2ab0:	bf 91       	pop	r27
    2ab2:	af 91       	pop	r26
    2ab4:	9f 91       	pop	r25
    2ab6:	8f 91       	pop	r24
    2ab8:	7f 91       	pop	r23
    2aba:	6f 91       	pop	r22
    2abc:	5f 91       	pop	r21
    2abe:	4f 91       	pop	r20
    2ac0:	3f 91       	pop	r19
    2ac2:	2f 91       	pop	r18
    2ac4:	0f 90       	pop	r0
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	0f 90       	pop	r0
    2aca:	1f 90       	pop	r1
    2acc:	18 95       	reti

00002ace <HUS_voidUsInit>:
#include "HUS_Private.h"
#include "util/delay.h"

extern u32 G_u32Counter;
void HUS_voidUsInit(void)
{
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
	//MDIO_void_SetDir(DIO_PORTD,PIND6,PIN_INPUT);
	MDIO_void_SetDir(Trigger_Port,Trigger_Pin,PIN_OUTPUT);
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	63 e0       	ldi	r22, 0x03	; 3
    2ada:	41 e0       	ldi	r20, 0x01	; 1
    2adc:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
}
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	08 95       	ret

00002ae6 <HUS_u16CalcDistancd>:
u16 HUS_u16CalcDistancd(void)
{
    2ae6:	ef 92       	push	r14
    2ae8:	ff 92       	push	r15
    2aea:	0f 93       	push	r16
    2aec:	1f 93       	push	r17
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	6a 97       	sbiw	r28, 0x1a	; 26
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	f8 94       	cli
    2afc:	de bf       	out	0x3e, r29	; 62
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	cd bf       	out	0x3d, r28	; 61
	u16 L_u16Distance=0;
    2b02:	1a 8e       	std	Y+26, r1	; 0x1a
    2b04:	19 8e       	std	Y+25, r1	; 0x19
	MDIO_void_PinWrite(Trigger_Port,Trigger_Pin,HIGH);
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	63 e0       	ldi	r22, 0x03	; 3
    2b0a:	41 e0       	ldi	r20, 0x01	; 1
    2b0c:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	a8 e4       	ldi	r26, 0x48	; 72
    2b16:	b2 e4       	ldi	r27, 0x42	; 66
    2b18:	8d 8b       	std	Y+21, r24	; 0x15
    2b1a:	9e 8b       	std	Y+22, r25	; 0x16
    2b1c:	af 8b       	std	Y+23, r26	; 0x17
    2b1e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b20:	6d 89       	ldd	r22, Y+21	; 0x15
    2b22:	7e 89       	ldd	r23, Y+22	; 0x16
    2b24:	8f 89       	ldd	r24, Y+23	; 0x17
    2b26:	98 8d       	ldd	r25, Y+24	; 0x18
    2b28:	2b ea       	ldi	r18, 0xAB	; 171
    2b2a:	3a ea       	ldi	r19, 0xAA	; 170
    2b2c:	4a e2       	ldi	r20, 0x2A	; 42
    2b2e:	50 e4       	ldi	r21, 0x40	; 64
    2b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	89 8b       	std	Y+17, r24	; 0x11
    2b3a:	9a 8b       	std	Y+18, r25	; 0x12
    2b3c:	ab 8b       	std	Y+19, r26	; 0x13
    2b3e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b40:	69 89       	ldd	r22, Y+17	; 0x11
    2b42:	7a 89       	ldd	r23, Y+18	; 0x12
    2b44:	8b 89       	ldd	r24, Y+19	; 0x13
    2b46:	9c 89       	ldd	r25, Y+20	; 0x14
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	40 e8       	ldi	r20, 0x80	; 128
    2b4e:	5f e3       	ldi	r21, 0x3F	; 63
    2b50:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b54:	88 23       	and	r24, r24
    2b56:	1c f4       	brge	.+6      	; 0x2b5e <HUS_u16CalcDistancd+0x78>
		__ticks = 1;
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	88 8b       	std	Y+16, r24	; 0x10
    2b5c:	91 c0       	rjmp	.+290    	; 0x2c80 <HUS_u16CalcDistancd+0x19a>
	else if (__tmp > 255)
    2b5e:	69 89       	ldd	r22, Y+17	; 0x11
    2b60:	7a 89       	ldd	r23, Y+18	; 0x12
    2b62:	8b 89       	ldd	r24, Y+19	; 0x13
    2b64:	9c 89       	ldd	r25, Y+20	; 0x14
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	4f e7       	ldi	r20, 0x7F	; 127
    2b6c:	53 e4       	ldi	r21, 0x43	; 67
    2b6e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b72:	18 16       	cp	r1, r24
    2b74:	0c f0       	brlt	.+2      	; 0x2b78 <HUS_u16CalcDistancd+0x92>
    2b76:	7b c0       	rjmp	.+246    	; 0x2c6e <HUS_u16CalcDistancd+0x188>
	{
		_delay_ms(__us / 1000.0);
    2b78:	6d 89       	ldd	r22, Y+21	; 0x15
    2b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	4a e7       	ldi	r20, 0x7A	; 122
    2b86:	54 e4       	ldi	r21, 0x44	; 68
    2b88:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	8c 87       	std	Y+12, r24	; 0x0c
    2b92:	9d 87       	std	Y+13, r25	; 0x0d
    2b94:	ae 87       	std	Y+14, r26	; 0x0e
    2b96:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b98:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b9a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	4a ef       	ldi	r20, 0xFA	; 250
    2ba6:	54 e4       	ldi	r21, 0x44	; 68
    2ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	88 87       	std	Y+8, r24	; 0x08
    2bb2:	99 87       	std	Y+9, r25	; 0x09
    2bb4:	aa 87       	std	Y+10, r26	; 0x0a
    2bb6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2bb8:	68 85       	ldd	r22, Y+8	; 0x08
    2bba:	79 85       	ldd	r23, Y+9	; 0x09
    2bbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	40 e8       	ldi	r20, 0x80	; 128
    2bc6:	5f e3       	ldi	r21, 0x3F	; 63
    2bc8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2bcc:	88 23       	and	r24, r24
    2bce:	2c f4       	brge	.+10     	; 0x2bda <HUS_u16CalcDistancd+0xf4>
		__ticks = 1;
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	9f 83       	std	Y+7, r25	; 0x07
    2bd6:	8e 83       	std	Y+6, r24	; 0x06
    2bd8:	3f c0       	rjmp	.+126    	; 0x2c58 <HUS_u16CalcDistancd+0x172>
	else if (__tmp > 65535)
    2bda:	68 85       	ldd	r22, Y+8	; 0x08
    2bdc:	79 85       	ldd	r23, Y+9	; 0x09
    2bde:	8a 85       	ldd	r24, Y+10	; 0x0a
    2be0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	3f ef       	ldi	r19, 0xFF	; 255
    2be6:	4f e7       	ldi	r20, 0x7F	; 127
    2be8:	57 e4       	ldi	r21, 0x47	; 71
    2bea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2bee:	18 16       	cp	r1, r24
    2bf0:	4c f5       	brge	.+82     	; 0x2c44 <HUS_u16CalcDistancd+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bf4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bf6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bf8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	40 e2       	ldi	r20, 0x20	; 32
    2c00:	51 e4       	ldi	r21, 0x41	; 65
    2c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	bc 01       	movw	r22, r24
    2c0c:	cd 01       	movw	r24, r26
    2c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	9f 83       	std	Y+7, r25	; 0x07
    2c18:	8e 83       	std	Y+6, r24	; 0x06
    2c1a:	0f c0       	rjmp	.+30     	; 0x2c3a <HUS_u16CalcDistancd+0x154>
    2c1c:	88 ec       	ldi	r24, 0xC8	; 200
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	9d 83       	std	Y+5, r25	; 0x05
    2c22:	8c 83       	std	Y+4, r24	; 0x04
    2c24:	8c 81       	ldd	r24, Y+4	; 0x04
    2c26:	9d 81       	ldd	r25, Y+5	; 0x05
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <HUS_u16CalcDistancd+0x142>
    2c2c:	9d 83       	std	Y+5, r25	; 0x05
    2c2e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c30:	8e 81       	ldd	r24, Y+6	; 0x06
    2c32:	9f 81       	ldd	r25, Y+7	; 0x07
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	9f 83       	std	Y+7, r25	; 0x07
    2c38:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c3e:	00 97       	sbiw	r24, 0x00	; 0
    2c40:	69 f7       	brne	.-38     	; 0x2c1c <HUS_u16CalcDistancd+0x136>
    2c42:	24 c0       	rjmp	.+72     	; 0x2c8c <HUS_u16CalcDistancd+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c44:	68 85       	ldd	r22, Y+8	; 0x08
    2c46:	79 85       	ldd	r23, Y+9	; 0x09
    2c48:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	9f 83       	std	Y+7, r25	; 0x07
    2c56:	8e 83       	std	Y+6, r24	; 0x06
    2c58:	8e 81       	ldd	r24, Y+6	; 0x06
    2c5a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c5c:	9b 83       	std	Y+3, r25	; 0x03
    2c5e:	8a 83       	std	Y+2, r24	; 0x02
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	9b 81       	ldd	r25, Y+3	; 0x03
    2c64:	01 97       	sbiw	r24, 0x01	; 1
    2c66:	f1 f7       	brne	.-4      	; 0x2c64 <HUS_u16CalcDistancd+0x17e>
    2c68:	9b 83       	std	Y+3, r25	; 0x03
    2c6a:	8a 83       	std	Y+2, r24	; 0x02
    2c6c:	0f c0       	rjmp	.+30     	; 0x2c8c <HUS_u16CalcDistancd+0x1a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c6e:	69 89       	ldd	r22, Y+17	; 0x11
    2c70:	7a 89       	ldd	r23, Y+18	; 0x12
    2c72:	8b 89       	ldd	r24, Y+19	; 0x13
    2c74:	9c 89       	ldd	r25, Y+20	; 0x14
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	88 8b       	std	Y+16, r24	; 0x10
    2c80:	88 89       	ldd	r24, Y+16	; 0x10
    2c82:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	8a 95       	dec	r24
    2c88:	f1 f7       	brne	.-4      	; 0x2c86 <HUS_u16CalcDistancd+0x1a0>
    2c8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	MDIO_void_PinWrite(Trigger_Port,Trigger_Pin,LOW);
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	63 e0       	ldi	r22, 0x03	; 3
    2c90:	40 e0       	ldi	r20, 0x00	; 0
    2c92:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
	L_u16Distance=(US_WaveSpeed/2.0);
    2c96:	84 e9       	ldi	r24, 0x94	; 148
    2c98:	93 e4       	ldi	r25, 0x43	; 67
    2c9a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c9c:	89 8f       	std	Y+25, r24	; 0x19
	L_u16Distance=L_u16Distance*(f32)MTIMER1_u16TonCalc();
    2c9e:	89 8d       	ldd	r24, Y+25	; 0x19
    2ca0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ca2:	cc 01       	movw	r24, r24
    2ca4:	a0 e0       	ldi	r26, 0x00	; 0
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    2cb0:	7b 01       	movw	r14, r22
    2cb2:	8c 01       	movw	r16, r24
    2cb4:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <MTIMER1_u16TonCalc>
    2cb8:	cc 01       	movw	r24, r24
    2cba:	a0 e0       	ldi	r26, 0x00	; 0
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    2cc6:	9b 01       	movw	r18, r22
    2cc8:	ac 01       	movw	r20, r24
    2cca:	c8 01       	movw	r24, r16
    2ccc:	b7 01       	movw	r22, r14
    2cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	cd 01       	movw	r24, r26
    2cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	9a 8f       	std	Y+26, r25	; 0x1a
    2ce4:	89 8f       	std	Y+25, r24	; 0x19
	return L_u16Distance;
    2ce6:	89 8d       	ldd	r24, Y+25	; 0x19
    2ce8:	9a 8d       	ldd	r25, Y+26	; 0x1a
}
    2cea:	6a 96       	adiw	r28, 0x1a	; 26
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	de bf       	out	0x3e, r29	; 62
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	cd bf       	out	0x3d, r28	; 61
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	1f 91       	pop	r17
    2cfc:	0f 91       	pop	r16
    2cfe:	ff 90       	pop	r15
    2d00:	ef 90       	pop	r14
    2d02:	08 95       	ret

00002d04 <HUS_voidOvCounter>:
void HUS_voidOvCounter(void)
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
	G_u32Counter++;
    2d0c:	80 91 ba 01 	lds	r24, 0x01BA
    2d10:	90 91 bb 01 	lds	r25, 0x01BB
    2d14:	a0 91 bc 01 	lds	r26, 0x01BC
    2d18:	b0 91 bd 01 	lds	r27, 0x01BD
    2d1c:	01 96       	adiw	r24, 0x01	; 1
    2d1e:	a1 1d       	adc	r26, r1
    2d20:	b1 1d       	adc	r27, r1
    2d22:	80 93 ba 01 	sts	0x01BA, r24
    2d26:	90 93 bb 01 	sts	0x01BB, r25
    2d2a:	a0 93 bc 01 	sts	0x01BC, r26
    2d2e:	b0 93 bd 01 	sts	0x01BD, r27
}
    2d32:	cf 91       	pop	r28
    2d34:	df 91       	pop	r29
    2d36:	08 95       	ret

00002d38 <HServoMotor>:
#include "SM_Interface.h"
#include "SM_Private.h"
#include "SM_Config.h"

void HServoMotor(f32 A_f32Angle)
{
    2d38:	df 93       	push	r29
    2d3a:	cf 93       	push	r28
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
    2d40:	2a 97       	sbiw	r28, 0x0a	; 10
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	f8 94       	cli
    2d46:	de bf       	out	0x3e, r29	; 62
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	cd bf       	out	0x3d, r28	; 61
    2d4c:	6d 83       	std	Y+5, r22	; 0x05
    2d4e:	7e 83       	std	Y+6, r23	; 0x06
    2d50:	8f 83       	std	Y+7, r24	; 0x07
    2d52:	98 87       	std	Y+8, r25	; 0x08

	f32 L_f32OCRAValue;
	if(A_f32Angle>=0 &&A_f32Angle<=90 )
    2d54:	1a 86       	std	Y+10, r1	; 0x0a
    2d56:	6d 81       	ldd	r22, Y+5	; 0x05
    2d58:	7e 81       	ldd	r23, Y+6	; 0x06
    2d5a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d5c:	98 85       	ldd	r25, Y+8	; 0x08
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e0       	ldi	r20, 0x00	; 0
    2d64:	50 e0       	ldi	r21, 0x00	; 0
    2d66:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
    2d6a:	88 23       	and	r24, r24
    2d6c:	14 f0       	brlt	.+4      	; 0x2d72 <HServoMotor+0x3a>
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	8a 87       	std	Y+10, r24	; 0x0a
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d76:	89 27       	eor	r24, r25
    2d78:	88 23       	and	r24, r24
    2d7a:	79 f5       	brne	.+94     	; 0x2dda <HServoMotor+0xa2>
    2d7c:	19 86       	std	Y+9, r1	; 0x09
    2d7e:	6d 81       	ldd	r22, Y+5	; 0x05
    2d80:	7e 81       	ldd	r23, Y+6	; 0x06
    2d82:	8f 81       	ldd	r24, Y+7	; 0x07
    2d84:	98 85       	ldd	r25, Y+8	; 0x08
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	44 eb       	ldi	r20, 0xB4	; 180
    2d8c:	52 e4       	ldi	r21, 0x42	; 66
    2d8e:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    2d92:	18 16       	cp	r1, r24
    2d94:	14 f0       	brlt	.+4      	; 0x2d9a <HServoMotor+0x62>
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	89 87       	std	Y+9, r24	; 0x09
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	99 85       	ldd	r25, Y+9	; 0x09
    2d9e:	89 27       	eor	r24, r25
    2da0:	88 23       	and	r24, r24
    2da2:	d9 f4       	brne	.+54     	; 0x2dda <HServoMotor+0xa2>
	{
		L_f32OCRAValue=1.5+A_f32Angle*Single_Angle_Time;
    2da4:	6d 81       	ldd	r22, Y+5	; 0x05
    2da6:	7e 81       	ldd	r23, Y+6	; 0x06
    2da8:	8f 81       	ldd	r24, Y+7	; 0x07
    2daa:	98 85       	ldd	r25, Y+8	; 0x08
    2dac:	22 e6       	ldi	r18, 0x62	; 98
    2dae:	3b e0       	ldi	r19, 0x0B	; 11
    2db0:	46 eb       	ldi	r20, 0xB6	; 182
    2db2:	5b e3       	ldi	r21, 0x3B	; 59
    2db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	bc 01       	movw	r22, r24
    2dbe:	cd 01       	movw	r24, r26
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 ec       	ldi	r20, 0xC0	; 192
    2dc6:	5f e3       	ldi	r21, 0x3F	; 63
    2dc8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	89 83       	std	Y+1, r24	; 0x01
    2dd2:	9a 83       	std	Y+2, r25	; 0x02
    2dd4:	ab 83       	std	Y+3, r26	; 0x03
    2dd6:	bc 83       	std	Y+4, r27	; 0x04
    2dd8:	32 c0       	rjmp	.+100    	; 0x2e3e <HServoMotor+0x106>
	}
	else if (A_f32Angle>=-90 && A_f32Angle<=0)
    2dda:	6d 81       	ldd	r22, Y+5	; 0x05
    2ddc:	7e 81       	ldd	r23, Y+6	; 0x06
    2dde:	8f 81       	ldd	r24, Y+7	; 0x07
    2de0:	98 85       	ldd	r25, Y+8	; 0x08
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	44 eb       	ldi	r20, 0xB4	; 180
    2de8:	52 ec       	ldi	r21, 0xC2	; 194
    2dea:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
    2dee:	88 23       	and	r24, r24
    2df0:	34 f1       	brlt	.+76     	; 0x2e3e <HServoMotor+0x106>
    2df2:	6d 81       	ldd	r22, Y+5	; 0x05
    2df4:	7e 81       	ldd	r23, Y+6	; 0x06
    2df6:	8f 81       	ldd	r24, Y+7	; 0x07
    2df8:	98 85       	ldd	r25, Y+8	; 0x08
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e0       	ldi	r20, 0x00	; 0
    2e00:	50 e0       	ldi	r21, 0x00	; 0
    2e02:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    2e06:	18 16       	cp	r1, r24
    2e08:	d4 f0       	brlt	.+52     	; 0x2e3e <HServoMotor+0x106>
	{
		L_f32OCRAValue=1.5-A_f32Angle*-Single_Angle_Time;
    2e0a:	6d 81       	ldd	r22, Y+5	; 0x05
    2e0c:	7e 81       	ldd	r23, Y+6	; 0x06
    2e0e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e10:	98 85       	ldd	r25, Y+8	; 0x08
    2e12:	22 e6       	ldi	r18, 0x62	; 98
    2e14:	3b e0       	ldi	r19, 0x0B	; 11
    2e16:	46 eb       	ldi	r20, 0xB6	; 182
    2e18:	5b e3       	ldi	r21, 0x3B	; 59
    2e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	bc 01       	movw	r22, r24
    2e24:	cd 01       	movw	r24, r26
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 ec       	ldi	r20, 0xC0	; 192
    2e2c:	5f e3       	ldi	r21, 0x3F	; 63
    2e2e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	89 83       	std	Y+1, r24	; 0x01
    2e38:	9a 83       	std	Y+2, r25	; 0x02
    2e3a:	ab 83       	std	Y+3, r26	; 0x03
    2e3c:	bc 83       	std	Y+4, r27	; 0x04
	}
	else
	{

	}
	L_f32OCRAValue=(u16)((L_f32OCRAValue*0.001)/(((f32)Timer1Prescaling)/(8000000.0))); //Watch out of integer division
    2e3e:	69 81       	ldd	r22, Y+1	; 0x01
    2e40:	7a 81       	ldd	r23, Y+2	; 0x02
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	9c 81       	ldd	r25, Y+4	; 0x04
    2e46:	2f e6       	ldi	r18, 0x6F	; 111
    2e48:	32 e1       	ldi	r19, 0x12	; 18
    2e4a:	43 e8       	ldi	r20, 0x83	; 131
    2e4c:	5a e3       	ldi	r21, 0x3A	; 58
    2e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	bc 01       	movw	r22, r24
    2e58:	cd 01       	movw	r24, r26
    2e5a:	2d eb       	ldi	r18, 0xBD	; 189
    2e5c:	37 e3       	ldi	r19, 0x37	; 55
    2e5e:	46 e0       	ldi	r20, 0x06	; 6
    2e60:	54 e3       	ldi	r21, 0x34	; 52
    2e62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	bc 01       	movw	r22, r24
    2e6c:	cd 01       	movw	r24, r26
    2e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	cc 01       	movw	r24, r24
    2e78:	a0 e0       	ldi	r26, 0x00	; 0
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	bc 01       	movw	r22, r24
    2e7e:	cd 01       	movw	r24, r26
    2e80:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatunsisf>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	89 83       	std	Y+1, r24	; 0x01
    2e8a:	9a 83       	std	Y+2, r25	; 0x02
    2e8c:	ab 83       	std	Y+3, r26	; 0x03
    2e8e:	bc 83       	std	Y+4, r27	; 0x04
	MTIMER1_voidSetOCR1A(L_f32OCRAValue);
    2e90:	69 81       	ldd	r22, Y+1	; 0x01
    2e92:	7a 81       	ldd	r23, Y+2	; 0x02
    2e94:	8b 81       	ldd	r24, Y+3	; 0x03
    2e96:	9c 81       	ldd	r25, Y+4	; 0x04
    2e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <MTIMER1_voidSetOCR1A>
}
    2ea4:	2a 96       	adiw	r28, 0x0a	; 10
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	f8 94       	cli
    2eaa:	de bf       	out	0x3e, r29	; 62
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	cd bf       	out	0x3d, r28	; 61
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	08 95       	ret

00002eb6 <HLCD_voidInit>:
#include "LCD_Private.h"
#include "LCD_Config.h"
#include "util/delay.h"

void HLCD_voidInit(void)
{
    2eb6:	0f 93       	push	r16
    2eb8:	1f 93       	push	r17
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	c6 54       	subi	r28, 0x46	; 70
    2ec4:	d0 40       	sbci	r29, 0x00	; 0
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	f8 94       	cli
    2eca:	de bf       	out	0x3e, r29	; 62
    2ecc:	0f be       	out	0x3f, r0	; 63
    2ece:	cd bf       	out	0x3d, r28	; 61
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	ed 5b       	subi	r30, 0xBD	; 189
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	a8 ec       	ldi	r26, 0xC8	; 200
    2edc:	b2 e4       	ldi	r27, 0x42	; 66
    2ede:	80 83       	st	Z, r24
    2ee0:	91 83       	std	Z+1, r25	; 0x01
    2ee2:	a2 83       	std	Z+2, r26	; 0x02
    2ee4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee6:	8e 01       	movw	r16, r28
    2ee8:	01 5c       	subi	r16, 0xC1	; 193
    2eea:	1f 4f       	sbci	r17, 0xFF	; 255
    2eec:	fe 01       	movw	r30, r28
    2eee:	ed 5b       	subi	r30, 0xBD	; 189
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	60 81       	ld	r22, Z
    2ef4:	71 81       	ldd	r23, Z+1	; 0x01
    2ef6:	82 81       	ldd	r24, Z+2	; 0x02
    2ef8:	93 81       	ldd	r25, Z+3	; 0x03
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	4a ef       	ldi	r20, 0xFA	; 250
    2f00:	54 e4       	ldi	r21, 0x44	; 68
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	f8 01       	movw	r30, r16
    2f0c:	80 83       	st	Z, r24
    2f0e:	91 83       	std	Z+1, r25	; 0x01
    2f10:	a2 83       	std	Z+2, r26	; 0x02
    2f12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f14:	fe 01       	movw	r30, r28
    2f16:	ff 96       	adiw	r30, 0x3f	; 63
    2f18:	60 81       	ld	r22, Z
    2f1a:	71 81       	ldd	r23, Z+1	; 0x01
    2f1c:	82 81       	ldd	r24, Z+2	; 0x02
    2f1e:	93 81       	ldd	r25, Z+3	; 0x03
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	40 e8       	ldi	r20, 0x80	; 128
    2f26:	5f e3       	ldi	r21, 0x3F	; 63
    2f28:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f2c:	88 23       	and	r24, r24
    2f2e:	2c f4       	brge	.+10     	; 0x2f3a <HLCD_voidInit+0x84>
		__ticks = 1;
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	9e af       	std	Y+62, r25	; 0x3e
    2f36:	8d af       	std	Y+61, r24	; 0x3d
    2f38:	46 c0       	rjmp	.+140    	; 0x2fc6 <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	ff 96       	adiw	r30, 0x3f	; 63
    2f3e:	60 81       	ld	r22, Z
    2f40:	71 81       	ldd	r23, Z+1	; 0x01
    2f42:	82 81       	ldd	r24, Z+2	; 0x02
    2f44:	93 81       	ldd	r25, Z+3	; 0x03
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	3f ef       	ldi	r19, 0xFF	; 255
    2f4a:	4f e7       	ldi	r20, 0x7F	; 127
    2f4c:	57 e4       	ldi	r21, 0x47	; 71
    2f4e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f52:	18 16       	cp	r1, r24
    2f54:	64 f5       	brge	.+88     	; 0x2fae <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f56:	fe 01       	movw	r30, r28
    2f58:	ed 5b       	subi	r30, 0xBD	; 189
    2f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5c:	60 81       	ld	r22, Z
    2f5e:	71 81       	ldd	r23, Z+1	; 0x01
    2f60:	82 81       	ldd	r24, Z+2	; 0x02
    2f62:	93 81       	ldd	r25, Z+3	; 0x03
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e2       	ldi	r20, 0x20	; 32
    2f6a:	51 e4       	ldi	r21, 0x41	; 65
    2f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	bc 01       	movw	r22, r24
    2f76:	cd 01       	movw	r24, r26
    2f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	9e af       	std	Y+62, r25	; 0x3e
    2f82:	8d af       	std	Y+61, r24	; 0x3d
    2f84:	0f c0       	rjmp	.+30     	; 0x2fa4 <HLCD_voidInit+0xee>
    2f86:	88 ec       	ldi	r24, 0xC8	; 200
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	9c af       	std	Y+60, r25	; 0x3c
    2f8c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f8e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f90:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <HLCD_voidInit+0xdc>
    2f96:	9c af       	std	Y+60, r25	; 0x3c
    2f98:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	9e af       	std	Y+62, r25	; 0x3e
    2fa2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fa6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	69 f7       	brne	.-38     	; 0x2f86 <HLCD_voidInit+0xd0>
    2fac:	16 c0       	rjmp	.+44     	; 0x2fda <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fae:	fe 01       	movw	r30, r28
    2fb0:	ff 96       	adiw	r30, 0x3f	; 63
    2fb2:	60 81       	ld	r22, Z
    2fb4:	71 81       	ldd	r23, Z+1	; 0x01
    2fb6:	82 81       	ldd	r24, Z+2	; 0x02
    2fb8:	93 81       	ldd	r25, Z+3	; 0x03
    2fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	9e af       	std	Y+62, r25	; 0x3e
    2fc4:	8d af       	std	Y+61, r24	; 0x3d
    2fc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fca:	9a af       	std	Y+58, r25	; 0x3a
    2fcc:	89 af       	std	Y+57, r24	; 0x39
    2fce:	89 ad       	ldd	r24, Y+57	; 0x39
    2fd0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	f1 f7       	brne	.-4      	; 0x2fd2 <HLCD_voidInit+0x11c>
    2fd6:	9a af       	std	Y+58, r25	; 0x3a
    2fd8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);
	if(LCD_MODE==LCD_COM_8BitOperation)
	{
		HLCD_voidSendCom(LCD_COM_8BitOperation);
    2fda:	88 e3       	ldi	r24, 0x38	; 56
    2fdc:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <HLCD_voidSendCom>
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	a0 e8       	ldi	r26, 0x80	; 128
    2fe6:	bf e3       	ldi	r27, 0x3F	; 63
    2fe8:	8d ab       	std	Y+53, r24	; 0x35
    2fea:	9e ab       	std	Y+54, r25	; 0x36
    2fec:	af ab       	std	Y+55, r26	; 0x37
    2fee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ff2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ff4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ff6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	4a ef       	ldi	r20, 0xFA	; 250
    2ffe:	54 e4       	ldi	r21, 0x44	; 68
    3000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	89 ab       	std	Y+49, r24	; 0x31
    300a:	9a ab       	std	Y+50, r25	; 0x32
    300c:	ab ab       	std	Y+51, r26	; 0x33
    300e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3010:	69 a9       	ldd	r22, Y+49	; 0x31
    3012:	7a a9       	ldd	r23, Y+50	; 0x32
    3014:	8b a9       	ldd	r24, Y+51	; 0x33
    3016:	9c a9       	ldd	r25, Y+52	; 0x34
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	40 e8       	ldi	r20, 0x80	; 128
    301e:	5f e3       	ldi	r21, 0x3F	; 63
    3020:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3024:	88 23       	and	r24, r24
    3026:	2c f4       	brge	.+10     	; 0x3032 <HLCD_voidInit+0x17c>
		__ticks = 1;
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	98 ab       	std	Y+48, r25	; 0x30
    302e:	8f a7       	std	Y+47, r24	; 0x2f
    3030:	3f c0       	rjmp	.+126    	; 0x30b0 <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    3032:	69 a9       	ldd	r22, Y+49	; 0x31
    3034:	7a a9       	ldd	r23, Y+50	; 0x32
    3036:	8b a9       	ldd	r24, Y+51	; 0x33
    3038:	9c a9       	ldd	r25, Y+52	; 0x34
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	3f ef       	ldi	r19, 0xFF	; 255
    303e:	4f e7       	ldi	r20, 0x7F	; 127
    3040:	57 e4       	ldi	r21, 0x47	; 71
    3042:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3046:	18 16       	cp	r1, r24
    3048:	4c f5       	brge	.+82     	; 0x309c <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304a:	6d a9       	ldd	r22, Y+53	; 0x35
    304c:	7e a9       	ldd	r23, Y+54	; 0x36
    304e:	8f a9       	ldd	r24, Y+55	; 0x37
    3050:	98 ad       	ldd	r25, Y+56	; 0x38
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	40 e2       	ldi	r20, 0x20	; 32
    3058:	51 e4       	ldi	r21, 0x41	; 65
    305a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	bc 01       	movw	r22, r24
    3064:	cd 01       	movw	r24, r26
    3066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	98 ab       	std	Y+48, r25	; 0x30
    3070:	8f a7       	std	Y+47, r24	; 0x2f
    3072:	0f c0       	rjmp	.+30     	; 0x3092 <HLCD_voidInit+0x1dc>
    3074:	88 ec       	ldi	r24, 0xC8	; 200
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	9e a7       	std	Y+46, r25	; 0x2e
    307a:	8d a7       	std	Y+45, r24	; 0x2d
    307c:	8d a5       	ldd	r24, Y+45	; 0x2d
    307e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	f1 f7       	brne	.-4      	; 0x3080 <HLCD_voidInit+0x1ca>
    3084:	9e a7       	std	Y+46, r25	; 0x2e
    3086:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3088:	8f a5       	ldd	r24, Y+47	; 0x2f
    308a:	98 a9       	ldd	r25, Y+48	; 0x30
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	98 ab       	std	Y+48, r25	; 0x30
    3090:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3092:	8f a5       	ldd	r24, Y+47	; 0x2f
    3094:	98 a9       	ldd	r25, Y+48	; 0x30
    3096:	00 97       	sbiw	r24, 0x00	; 0
    3098:	69 f7       	brne	.-38     	; 0x3074 <HLCD_voidInit+0x1be>
    309a:	14 c0       	rjmp	.+40     	; 0x30c4 <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    309c:	69 a9       	ldd	r22, Y+49	; 0x31
    309e:	7a a9       	ldd	r23, Y+50	; 0x32
    30a0:	8b a9       	ldd	r24, Y+51	; 0x33
    30a2:	9c a9       	ldd	r25, Y+52	; 0x34
    30a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	98 ab       	std	Y+48, r25	; 0x30
    30ae:	8f a7       	std	Y+47, r24	; 0x2f
    30b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30b2:	98 a9       	ldd	r25, Y+48	; 0x30
    30b4:	9c a7       	std	Y+44, r25	; 0x2c
    30b6:	8b a7       	std	Y+43, r24	; 0x2b
    30b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    30ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	f1 f7       	brne	.-4      	; 0x30bc <HLCD_voidInit+0x206>
    30c0:	9c a7       	std	Y+44, r25	; 0x2c
    30c2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		HLCD_voidSendCom(LCD_COM_DisplayOn_CursorOn);
    30c4:	8e e0       	ldi	r24, 0x0E	; 14
    30c6:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <HLCD_voidSendCom>
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	a0 e8       	ldi	r26, 0x80	; 128
    30d0:	bf e3       	ldi	r27, 0x3F	; 63
    30d2:	8f a3       	std	Y+39, r24	; 0x27
    30d4:	98 a7       	std	Y+40, r25	; 0x28
    30d6:	a9 a7       	std	Y+41, r26	; 0x29
    30d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30da:	6f a1       	ldd	r22, Y+39	; 0x27
    30dc:	78 a5       	ldd	r23, Y+40	; 0x28
    30de:	89 a5       	ldd	r24, Y+41	; 0x29
    30e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	4a ef       	ldi	r20, 0xFA	; 250
    30e8:	54 e4       	ldi	r21, 0x44	; 68
    30ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	8b a3       	std	Y+35, r24	; 0x23
    30f4:	9c a3       	std	Y+36, r25	; 0x24
    30f6:	ad a3       	std	Y+37, r26	; 0x25
    30f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30fa:	6b a1       	ldd	r22, Y+35	; 0x23
    30fc:	7c a1       	ldd	r23, Y+36	; 0x24
    30fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3100:	9e a1       	ldd	r25, Y+38	; 0x26
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	40 e8       	ldi	r20, 0x80	; 128
    3108:	5f e3       	ldi	r21, 0x3F	; 63
    310a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    310e:	88 23       	and	r24, r24
    3110:	2c f4       	brge	.+10     	; 0x311c <HLCD_voidInit+0x266>
		__ticks = 1;
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	9a a3       	std	Y+34, r25	; 0x22
    3118:	89 a3       	std	Y+33, r24	; 0x21
    311a:	3f c0       	rjmp	.+126    	; 0x319a <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    311c:	6b a1       	ldd	r22, Y+35	; 0x23
    311e:	7c a1       	ldd	r23, Y+36	; 0x24
    3120:	8d a1       	ldd	r24, Y+37	; 0x25
    3122:	9e a1       	ldd	r25, Y+38	; 0x26
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	3f ef       	ldi	r19, 0xFF	; 255
    3128:	4f e7       	ldi	r20, 0x7F	; 127
    312a:	57 e4       	ldi	r21, 0x47	; 71
    312c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3130:	18 16       	cp	r1, r24
    3132:	4c f5       	brge	.+82     	; 0x3186 <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3134:	6f a1       	ldd	r22, Y+39	; 0x27
    3136:	78 a5       	ldd	r23, Y+40	; 0x28
    3138:	89 a5       	ldd	r24, Y+41	; 0x29
    313a:	9a a5       	ldd	r25, Y+42	; 0x2a
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	40 e2       	ldi	r20, 0x20	; 32
    3142:	51 e4       	ldi	r21, 0x41	; 65
    3144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	bc 01       	movw	r22, r24
    314e:	cd 01       	movw	r24, r26
    3150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	9a a3       	std	Y+34, r25	; 0x22
    315a:	89 a3       	std	Y+33, r24	; 0x21
    315c:	0f c0       	rjmp	.+30     	; 0x317c <HLCD_voidInit+0x2c6>
    315e:	88 ec       	ldi	r24, 0xC8	; 200
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	98 a3       	std	Y+32, r25	; 0x20
    3164:	8f 8f       	std	Y+31, r24	; 0x1f
    3166:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3168:	98 a1       	ldd	r25, Y+32	; 0x20
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	f1 f7       	brne	.-4      	; 0x316a <HLCD_voidInit+0x2b4>
    316e:	98 a3       	std	Y+32, r25	; 0x20
    3170:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3172:	89 a1       	ldd	r24, Y+33	; 0x21
    3174:	9a a1       	ldd	r25, Y+34	; 0x22
    3176:	01 97       	sbiw	r24, 0x01	; 1
    3178:	9a a3       	std	Y+34, r25	; 0x22
    317a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    317c:	89 a1       	ldd	r24, Y+33	; 0x21
    317e:	9a a1       	ldd	r25, Y+34	; 0x22
    3180:	00 97       	sbiw	r24, 0x00	; 0
    3182:	69 f7       	brne	.-38     	; 0x315e <HLCD_voidInit+0x2a8>
    3184:	14 c0       	rjmp	.+40     	; 0x31ae <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3186:	6b a1       	ldd	r22, Y+35	; 0x23
    3188:	7c a1       	ldd	r23, Y+36	; 0x24
    318a:	8d a1       	ldd	r24, Y+37	; 0x25
    318c:	9e a1       	ldd	r25, Y+38	; 0x26
    318e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	9a a3       	std	Y+34, r25	; 0x22
    3198:	89 a3       	std	Y+33, r24	; 0x21
    319a:	89 a1       	ldd	r24, Y+33	; 0x21
    319c:	9a a1       	ldd	r25, Y+34	; 0x22
    319e:	9e 8f       	std	Y+30, r25	; 0x1e
    31a0:	8d 8f       	std	Y+29, r24	; 0x1d
    31a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	f1 f7       	brne	.-4      	; 0x31a6 <HLCD_voidInit+0x2f0>
    31aa:	9e 8f       	std	Y+30, r25	; 0x1e
    31ac:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		HLCD_voidSendCom(LCD_COM_ClearDisplay);
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <HLCD_voidSendCom>
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	a0 e2       	ldi	r26, 0x20	; 32
    31ba:	b1 e4       	ldi	r27, 0x41	; 65
    31bc:	89 8f       	std	Y+25, r24	; 0x19
    31be:	9a 8f       	std	Y+26, r25	; 0x1a
    31c0:	ab 8f       	std	Y+27, r26	; 0x1b
    31c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c4:	69 8d       	ldd	r22, Y+25	; 0x19
    31c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	4a ef       	ldi	r20, 0xFA	; 250
    31d2:	54 e4       	ldi	r21, 0x44	; 68
    31d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d8:	dc 01       	movw	r26, r24
    31da:	cb 01       	movw	r24, r22
    31dc:	8d 8b       	std	Y+21, r24	; 0x15
    31de:	9e 8b       	std	Y+22, r25	; 0x16
    31e0:	af 8b       	std	Y+23, r26	; 0x17
    31e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31e4:	6d 89       	ldd	r22, Y+21	; 0x15
    31e6:	7e 89       	ldd	r23, Y+22	; 0x16
    31e8:	8f 89       	ldd	r24, Y+23	; 0x17
    31ea:	98 8d       	ldd	r25, Y+24	; 0x18
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	40 e8       	ldi	r20, 0x80	; 128
    31f2:	5f e3       	ldi	r21, 0x3F	; 63
    31f4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    31f8:	88 23       	and	r24, r24
    31fa:	2c f4       	brge	.+10     	; 0x3206 <HLCD_voidInit+0x350>
		__ticks = 1;
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	9c 8b       	std	Y+20, r25	; 0x14
    3202:	8b 8b       	std	Y+19, r24	; 0x13
    3204:	3f c0       	rjmp	.+126    	; 0x3284 <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    3206:	6d 89       	ldd	r22, Y+21	; 0x15
    3208:	7e 89       	ldd	r23, Y+22	; 0x16
    320a:	8f 89       	ldd	r24, Y+23	; 0x17
    320c:	98 8d       	ldd	r25, Y+24	; 0x18
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	3f ef       	ldi	r19, 0xFF	; 255
    3212:	4f e7       	ldi	r20, 0x7F	; 127
    3214:	57 e4       	ldi	r21, 0x47	; 71
    3216:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    321a:	18 16       	cp	r1, r24
    321c:	4c f5       	brge	.+82     	; 0x3270 <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    321e:	69 8d       	ldd	r22, Y+25	; 0x19
    3220:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3222:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3224:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	40 e2       	ldi	r20, 0x20	; 32
    322c:	51 e4       	ldi	r21, 0x41	; 65
    322e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	bc 01       	movw	r22, r24
    3238:	cd 01       	movw	r24, r26
    323a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	9c 8b       	std	Y+20, r25	; 0x14
    3244:	8b 8b       	std	Y+19, r24	; 0x13
    3246:	0f c0       	rjmp	.+30     	; 0x3266 <HLCD_voidInit+0x3b0>
    3248:	88 ec       	ldi	r24, 0xC8	; 200
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	9a 8b       	std	Y+18, r25	; 0x12
    324e:	89 8b       	std	Y+17, r24	; 0x11
    3250:	89 89       	ldd	r24, Y+17	; 0x11
    3252:	9a 89       	ldd	r25, Y+18	; 0x12
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	f1 f7       	brne	.-4      	; 0x3254 <HLCD_voidInit+0x39e>
    3258:	9a 8b       	std	Y+18, r25	; 0x12
    325a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325c:	8b 89       	ldd	r24, Y+19	; 0x13
    325e:	9c 89       	ldd	r25, Y+20	; 0x14
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	9c 8b       	std	Y+20, r25	; 0x14
    3264:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3266:	8b 89       	ldd	r24, Y+19	; 0x13
    3268:	9c 89       	ldd	r25, Y+20	; 0x14
    326a:	00 97       	sbiw	r24, 0x00	; 0
    326c:	69 f7       	brne	.-38     	; 0x3248 <HLCD_voidInit+0x392>
    326e:	14 c0       	rjmp	.+40     	; 0x3298 <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3270:	6d 89       	ldd	r22, Y+21	; 0x15
    3272:	7e 89       	ldd	r23, Y+22	; 0x16
    3274:	8f 89       	ldd	r24, Y+23	; 0x17
    3276:	98 8d       	ldd	r25, Y+24	; 0x18
    3278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	9c 8b       	std	Y+20, r25	; 0x14
    3282:	8b 8b       	std	Y+19, r24	; 0x13
    3284:	8b 89       	ldd	r24, Y+19	; 0x13
    3286:	9c 89       	ldd	r25, Y+20	; 0x14
    3288:	98 8b       	std	Y+16, r25	; 0x10
    328a:	8f 87       	std	Y+15, r24	; 0x0f
    328c:	8f 85       	ldd	r24, Y+15	; 0x0f
    328e:	98 89       	ldd	r25, Y+16	; 0x10
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	f1 f7       	brne	.-4      	; 0x3290 <HLCD_voidInit+0x3da>
    3294:	98 8b       	std	Y+16, r25	; 0x10
    3296:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		HLCD_voidSendCom(LCD_COM_EntryMode);
    3298:	86 e0       	ldi	r24, 0x06	; 6
    329a:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <HLCD_voidSendCom>
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	a0 e8       	ldi	r26, 0x80	; 128
    32a4:	bf e3       	ldi	r27, 0x3F	; 63
    32a6:	8b 87       	std	Y+11, r24	; 0x0b
    32a8:	9c 87       	std	Y+12, r25	; 0x0c
    32aa:	ad 87       	std	Y+13, r26	; 0x0d
    32ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    32b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    32b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	4a ef       	ldi	r20, 0xFA	; 250
    32bc:	54 e4       	ldi	r21, 0x44	; 68
    32be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	8f 83       	std	Y+7, r24	; 0x07
    32c8:	98 87       	std	Y+8, r25	; 0x08
    32ca:	a9 87       	std	Y+9, r26	; 0x09
    32cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32ce:	6f 81       	ldd	r22, Y+7	; 0x07
    32d0:	78 85       	ldd	r23, Y+8	; 0x08
    32d2:	89 85       	ldd	r24, Y+9	; 0x09
    32d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	40 e8       	ldi	r20, 0x80	; 128
    32dc:	5f e3       	ldi	r21, 0x3F	; 63
    32de:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    32e2:	88 23       	and	r24, r24
    32e4:	2c f4       	brge	.+10     	; 0x32f0 <HLCD_voidInit+0x43a>
		__ticks = 1;
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	9e 83       	std	Y+6, r25	; 0x06
    32ec:	8d 83       	std	Y+5, r24	; 0x05
    32ee:	3f c0       	rjmp	.+126    	; 0x336e <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    32f0:	6f 81       	ldd	r22, Y+7	; 0x07
    32f2:	78 85       	ldd	r23, Y+8	; 0x08
    32f4:	89 85       	ldd	r24, Y+9	; 0x09
    32f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	3f ef       	ldi	r19, 0xFF	; 255
    32fc:	4f e7       	ldi	r20, 0x7F	; 127
    32fe:	57 e4       	ldi	r21, 0x47	; 71
    3300:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3304:	18 16       	cp	r1, r24
    3306:	4c f5       	brge	.+82     	; 0x335a <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3308:	6b 85       	ldd	r22, Y+11	; 0x0b
    330a:	7c 85       	ldd	r23, Y+12	; 0x0c
    330c:	8d 85       	ldd	r24, Y+13	; 0x0d
    330e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	40 e2       	ldi	r20, 0x20	; 32
    3316:	51 e4       	ldi	r21, 0x41	; 65
    3318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	bc 01       	movw	r22, r24
    3322:	cd 01       	movw	r24, r26
    3324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	9e 83       	std	Y+6, r25	; 0x06
    332e:	8d 83       	std	Y+5, r24	; 0x05
    3330:	0f c0       	rjmp	.+30     	; 0x3350 <HLCD_voidInit+0x49a>
    3332:	88 ec       	ldi	r24, 0xC8	; 200
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	9c 83       	std	Y+4, r25	; 0x04
    3338:	8b 83       	std	Y+3, r24	; 0x03
    333a:	8b 81       	ldd	r24, Y+3	; 0x03
    333c:	9c 81       	ldd	r25, Y+4	; 0x04
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	f1 f7       	brne	.-4      	; 0x333e <HLCD_voidInit+0x488>
    3342:	9c 83       	std	Y+4, r25	; 0x04
    3344:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3346:	8d 81       	ldd	r24, Y+5	; 0x05
    3348:	9e 81       	ldd	r25, Y+6	; 0x06
    334a:	01 97       	sbiw	r24, 0x01	; 1
    334c:	9e 83       	std	Y+6, r25	; 0x06
    334e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3350:	8d 81       	ldd	r24, Y+5	; 0x05
    3352:	9e 81       	ldd	r25, Y+6	; 0x06
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	69 f7       	brne	.-38     	; 0x3332 <HLCD_voidInit+0x47c>
    3358:	14 c0       	rjmp	.+40     	; 0x3382 <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    335a:	6f 81       	ldd	r22, Y+7	; 0x07
    335c:	78 85       	ldd	r23, Y+8	; 0x08
    335e:	89 85       	ldd	r24, Y+9	; 0x09
    3360:	9a 85       	ldd	r25, Y+10	; 0x0a
    3362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	9e 83       	std	Y+6, r25	; 0x06
    336c:	8d 83       	std	Y+5, r24	; 0x05
    336e:	8d 81       	ldd	r24, Y+5	; 0x05
    3370:	9e 81       	ldd	r25, Y+6	; 0x06
    3372:	9a 83       	std	Y+2, r25	; 0x02
    3374:	89 83       	std	Y+1, r24	; 0x01
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	9a 81       	ldd	r25, Y+2	; 0x02
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	f1 f7       	brne	.-4      	; 0x337a <HLCD_voidInit+0x4c4>
    337e:	9a 83       	std	Y+2, r25	; 0x02
    3380:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//Do Nothing
	}
}
    3382:	ca 5b       	subi	r28, 0xBA	; 186
    3384:	df 4f       	sbci	r29, 0xFF	; 255
    3386:	0f b6       	in	r0, 0x3f	; 63
    3388:	f8 94       	cli
    338a:	de bf       	out	0x3e, r29	; 62
    338c:	0f be       	out	0x3f, r0	; 63
    338e:	cd bf       	out	0x3d, r28	; 61
    3390:	cf 91       	pop	r28
    3392:	df 91       	pop	r29
    3394:	1f 91       	pop	r17
    3396:	0f 91       	pop	r16
    3398:	08 95       	ret

0000339a <HLCD_voidSendData>:
void HLCD_voidSendData(u8 A_u8Data)
{
    339a:	df 93       	push	r29
    339c:	cf 93       	push	r28
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    33a2:	2f 97       	sbiw	r28, 0x0f	; 15
    33a4:	0f b6       	in	r0, 0x3f	; 63
    33a6:	f8 94       	cli
    33a8:	de bf       	out	0x3e, r29	; 62
    33aa:	0f be       	out	0x3f, r0	; 63
    33ac:	cd bf       	out	0x3d, r28	; 61
    33ae:	8f 87       	std	Y+15, r24	; 0x0f
	if(LCD_MODE==LCD_COM_8BitOperation)
	{
		MDIO_void_PortSetDir(LCD_DATA_PORT,PORT_OUTPUT);
    33b0:	82 e0       	ldi	r24, 0x02	; 2
    33b2:	6f ef       	ldi	r22, 0xFF	; 255
    33b4:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <MDIO_void_PortSetDir>
		MDIO_void_SetDir(LCD_CONTROL_PORT,LCD_RS_PIN,PIN_OUTPUT);
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	65 e0       	ldi	r22, 0x05	; 5
    33bc:	41 e0       	ldi	r20, 0x01	; 1
    33be:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
		MDIO_void_SetDir(LCD_CONTROL_PORT,LCD_E_PIN,PIN_OUTPUT);
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	67 e0       	ldi	r22, 0x07	; 7
    33c6:	41 e0       	ldi	r20, 0x01	; 1
    33c8:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
		MDIO_void_SetDir(LCD_CONTROL_PORT,LCD_RW_PIN,PIN_OUTPUT);
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	66 e0       	ldi	r22, 0x06	; 6
    33d0:	41 e0       	ldi	r20, 0x01	; 1
    33d2:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>

		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_RS_PIN,HIGH);
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	65 e0       	ldi	r22, 0x05	; 5
    33da:	41 e0       	ldi	r20, 0x01	; 1
    33dc:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_RW_PIN,LOW);
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	66 e0       	ldi	r22, 0x06	; 6
    33e4:	40 e0       	ldi	r20, 0x00	; 0
    33e6:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
		MDIO_void_PortWrite(LCD_DATA_PORT,A_u8Data);
    33ea:	82 e0       	ldi	r24, 0x02	; 2
    33ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    33ee:	0e 94 12 14 	call	0x2824	; 0x2824 <MDIO_void_PortWrite>

		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_E_PIN,HIGH);
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	67 e0       	ldi	r22, 0x07	; 7
    33f6:	41 e0       	ldi	r20, 0x01	; 1
    33f8:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	a0 e8       	ldi	r26, 0x80	; 128
    3402:	bf e3       	ldi	r27, 0x3F	; 63
    3404:	8b 87       	std	Y+11, r24	; 0x0b
    3406:	9c 87       	std	Y+12, r25	; 0x0c
    3408:	ad 87       	std	Y+13, r26	; 0x0d
    340a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    340c:	6b 85       	ldd	r22, Y+11	; 0x0b
    340e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3410:	8d 85       	ldd	r24, Y+13	; 0x0d
    3412:	9e 85       	ldd	r25, Y+14	; 0x0e
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	4a ef       	ldi	r20, 0xFA	; 250
    341a:	54 e4       	ldi	r21, 0x44	; 68
    341c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	8f 83       	std	Y+7, r24	; 0x07
    3426:	98 87       	std	Y+8, r25	; 0x08
    3428:	a9 87       	std	Y+9, r26	; 0x09
    342a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    342c:	6f 81       	ldd	r22, Y+7	; 0x07
    342e:	78 85       	ldd	r23, Y+8	; 0x08
    3430:	89 85       	ldd	r24, Y+9	; 0x09
    3432:	9a 85       	ldd	r25, Y+10	; 0x0a
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	40 e8       	ldi	r20, 0x80	; 128
    343a:	5f e3       	ldi	r21, 0x3F	; 63
    343c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3440:	88 23       	and	r24, r24
    3442:	2c f4       	brge	.+10     	; 0x344e <HLCD_voidSendData+0xb4>
		__ticks = 1;
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	9e 83       	std	Y+6, r25	; 0x06
    344a:	8d 83       	std	Y+5, r24	; 0x05
    344c:	3f c0       	rjmp	.+126    	; 0x34cc <HLCD_voidSendData+0x132>
	else if (__tmp > 65535)
    344e:	6f 81       	ldd	r22, Y+7	; 0x07
    3450:	78 85       	ldd	r23, Y+8	; 0x08
    3452:	89 85       	ldd	r24, Y+9	; 0x09
    3454:	9a 85       	ldd	r25, Y+10	; 0x0a
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	3f ef       	ldi	r19, 0xFF	; 255
    345a:	4f e7       	ldi	r20, 0x7F	; 127
    345c:	57 e4       	ldi	r21, 0x47	; 71
    345e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3462:	18 16       	cp	r1, r24
    3464:	4c f5       	brge	.+82     	; 0x34b8 <HLCD_voidSendData+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3466:	6b 85       	ldd	r22, Y+11	; 0x0b
    3468:	7c 85       	ldd	r23, Y+12	; 0x0c
    346a:	8d 85       	ldd	r24, Y+13	; 0x0d
    346c:	9e 85       	ldd	r25, Y+14	; 0x0e
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	40 e2       	ldi	r20, 0x20	; 32
    3474:	51 e4       	ldi	r21, 0x41	; 65
    3476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	bc 01       	movw	r22, r24
    3480:	cd 01       	movw	r24, r26
    3482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	9e 83       	std	Y+6, r25	; 0x06
    348c:	8d 83       	std	Y+5, r24	; 0x05
    348e:	0f c0       	rjmp	.+30     	; 0x34ae <HLCD_voidSendData+0x114>
    3490:	88 ec       	ldi	r24, 0xC8	; 200
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	9c 83       	std	Y+4, r25	; 0x04
    3496:	8b 83       	std	Y+3, r24	; 0x03
    3498:	8b 81       	ldd	r24, Y+3	; 0x03
    349a:	9c 81       	ldd	r25, Y+4	; 0x04
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <HLCD_voidSendData+0x102>
    34a0:	9c 83       	std	Y+4, r25	; 0x04
    34a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a4:	8d 81       	ldd	r24, Y+5	; 0x05
    34a6:	9e 81       	ldd	r25, Y+6	; 0x06
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	9e 83       	std	Y+6, r25	; 0x06
    34ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ae:	8d 81       	ldd	r24, Y+5	; 0x05
    34b0:	9e 81       	ldd	r25, Y+6	; 0x06
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	69 f7       	brne	.-38     	; 0x3490 <HLCD_voidSendData+0xf6>
    34b6:	14 c0       	rjmp	.+40     	; 0x34e0 <HLCD_voidSendData+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b8:	6f 81       	ldd	r22, Y+7	; 0x07
    34ba:	78 85       	ldd	r23, Y+8	; 0x08
    34bc:	89 85       	ldd	r24, Y+9	; 0x09
    34be:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	9e 83       	std	Y+6, r25	; 0x06
    34ca:	8d 83       	std	Y+5, r24	; 0x05
    34cc:	8d 81       	ldd	r24, Y+5	; 0x05
    34ce:	9e 81       	ldd	r25, Y+6	; 0x06
    34d0:	9a 83       	std	Y+2, r25	; 0x02
    34d2:	89 83       	std	Y+1, r24	; 0x01
    34d4:	89 81       	ldd	r24, Y+1	; 0x01
    34d6:	9a 81       	ldd	r25, Y+2	; 0x02
    34d8:	01 97       	sbiw	r24, 0x01	; 1
    34da:	f1 f7       	brne	.-4      	; 0x34d8 <HLCD_voidSendData+0x13e>
    34dc:	9a 83       	std	Y+2, r25	; 0x02
    34de:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_E_PIN,LOW);
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	67 e0       	ldi	r22, 0x07	; 7
    34e4:	40 e0       	ldi	r20, 0x00	; 0
    34e6:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
	}
	else
	{
		//Do Nothing
	}
}
    34ea:	2f 96       	adiw	r28, 0x0f	; 15
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	f8 94       	cli
    34f0:	de bf       	out	0x3e, r29	; 62
    34f2:	0f be       	out	0x3f, r0	; 63
    34f4:	cd bf       	out	0x3d, r28	; 61
    34f6:	cf 91       	pop	r28
    34f8:	df 91       	pop	r29
    34fa:	08 95       	ret

000034fc <HLCD_voidSendCom>:
void HLCD_voidSendCom(u8 A_u8Command)
{
    34fc:	df 93       	push	r29
    34fe:	cf 93       	push	r28
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
    3504:	2f 97       	sbiw	r28, 0x0f	; 15
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61
    3510:	8f 87       	std	Y+15, r24	; 0x0f
	if(LCD_MODE==LCD_COM_8BitOperation)
	{
		MDIO_void_PortSetDir(LCD_DATA_PORT,PORT_OUTPUT);
    3512:	82 e0       	ldi	r24, 0x02	; 2
    3514:	6f ef       	ldi	r22, 0xFF	; 255
    3516:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <MDIO_void_PortSetDir>
		MDIO_void_SetDir(LCD_CONTROL_PORT,LCD_RS_PIN,PIN_OUTPUT);
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	65 e0       	ldi	r22, 0x05	; 5
    351e:	41 e0       	ldi	r20, 0x01	; 1
    3520:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
		MDIO_void_SetDir(LCD_CONTROL_PORT,LCD_E_PIN,PIN_OUTPUT);
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	67 e0       	ldi	r22, 0x07	; 7
    3528:	41 e0       	ldi	r20, 0x01	; 1
    352a:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
		MDIO_void_SetDir(LCD_CONTROL_PORT,LCD_RW_PIN,PIN_OUTPUT);
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	66 e0       	ldi	r22, 0x06	; 6
    3532:	41 e0       	ldi	r20, 0x01	; 1
    3534:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>

		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_RS_PIN,LOW);
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	65 e0       	ldi	r22, 0x05	; 5
    353c:	40 e0       	ldi	r20, 0x00	; 0
    353e:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_RW_PIN,LOW);
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	66 e0       	ldi	r22, 0x06	; 6
    3546:	40 e0       	ldi	r20, 0x00	; 0
    3548:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
		MDIO_void_PortWrite(LCD_DATA_PORT,A_u8Command);
    354c:	82 e0       	ldi	r24, 0x02	; 2
    354e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3550:	0e 94 12 14 	call	0x2824	; 0x2824 <MDIO_void_PortWrite>

		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_E_PIN,HIGH);
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	67 e0       	ldi	r22, 0x07	; 7
    3558:	41 e0       	ldi	r20, 0x01	; 1
    355a:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
    355e:	80 e0       	ldi	r24, 0x00	; 0
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	a0 e8       	ldi	r26, 0x80	; 128
    3564:	bf e3       	ldi	r27, 0x3F	; 63
    3566:	8b 87       	std	Y+11, r24	; 0x0b
    3568:	9c 87       	std	Y+12, r25	; 0x0c
    356a:	ad 87       	std	Y+13, r26	; 0x0d
    356c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    356e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3570:	7c 85       	ldd	r23, Y+12	; 0x0c
    3572:	8d 85       	ldd	r24, Y+13	; 0x0d
    3574:	9e 85       	ldd	r25, Y+14	; 0x0e
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	4a ef       	ldi	r20, 0xFA	; 250
    357c:	54 e4       	ldi	r21, 0x44	; 68
    357e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	8f 83       	std	Y+7, r24	; 0x07
    3588:	98 87       	std	Y+8, r25	; 0x08
    358a:	a9 87       	std	Y+9, r26	; 0x09
    358c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    358e:	6f 81       	ldd	r22, Y+7	; 0x07
    3590:	78 85       	ldd	r23, Y+8	; 0x08
    3592:	89 85       	ldd	r24, Y+9	; 0x09
    3594:	9a 85       	ldd	r25, Y+10	; 0x0a
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	40 e8       	ldi	r20, 0x80	; 128
    359c:	5f e3       	ldi	r21, 0x3F	; 63
    359e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    35a2:	88 23       	and	r24, r24
    35a4:	2c f4       	brge	.+10     	; 0x35b0 <HLCD_voidSendCom+0xb4>
		__ticks = 1;
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	9e 83       	std	Y+6, r25	; 0x06
    35ac:	8d 83       	std	Y+5, r24	; 0x05
    35ae:	3f c0       	rjmp	.+126    	; 0x362e <HLCD_voidSendCom+0x132>
	else if (__tmp > 65535)
    35b0:	6f 81       	ldd	r22, Y+7	; 0x07
    35b2:	78 85       	ldd	r23, Y+8	; 0x08
    35b4:	89 85       	ldd	r24, Y+9	; 0x09
    35b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	3f ef       	ldi	r19, 0xFF	; 255
    35bc:	4f e7       	ldi	r20, 0x7F	; 127
    35be:	57 e4       	ldi	r21, 0x47	; 71
    35c0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    35c4:	18 16       	cp	r1, r24
    35c6:	4c f5       	brge	.+82     	; 0x361a <HLCD_voidSendCom+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    35cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    35d0:	20 e0       	ldi	r18, 0x00	; 0
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	40 e2       	ldi	r20, 0x20	; 32
    35d6:	51 e4       	ldi	r21, 0x41	; 65
    35d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	bc 01       	movw	r22, r24
    35e2:	cd 01       	movw	r24, r26
    35e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	9e 83       	std	Y+6, r25	; 0x06
    35ee:	8d 83       	std	Y+5, r24	; 0x05
    35f0:	0f c0       	rjmp	.+30     	; 0x3610 <HLCD_voidSendCom+0x114>
    35f2:	88 ec       	ldi	r24, 0xC8	; 200
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	9c 83       	std	Y+4, r25	; 0x04
    35f8:	8b 83       	std	Y+3, r24	; 0x03
    35fa:	8b 81       	ldd	r24, Y+3	; 0x03
    35fc:	9c 81       	ldd	r25, Y+4	; 0x04
    35fe:	01 97       	sbiw	r24, 0x01	; 1
    3600:	f1 f7       	brne	.-4      	; 0x35fe <HLCD_voidSendCom+0x102>
    3602:	9c 83       	std	Y+4, r25	; 0x04
    3604:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3606:	8d 81       	ldd	r24, Y+5	; 0x05
    3608:	9e 81       	ldd	r25, Y+6	; 0x06
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	9e 83       	std	Y+6, r25	; 0x06
    360e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3610:	8d 81       	ldd	r24, Y+5	; 0x05
    3612:	9e 81       	ldd	r25, Y+6	; 0x06
    3614:	00 97       	sbiw	r24, 0x00	; 0
    3616:	69 f7       	brne	.-38     	; 0x35f2 <HLCD_voidSendCom+0xf6>
    3618:	14 c0       	rjmp	.+40     	; 0x3642 <HLCD_voidSendCom+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    361a:	6f 81       	ldd	r22, Y+7	; 0x07
    361c:	78 85       	ldd	r23, Y+8	; 0x08
    361e:	89 85       	ldd	r24, Y+9	; 0x09
    3620:	9a 85       	ldd	r25, Y+10	; 0x0a
    3622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3626:	dc 01       	movw	r26, r24
    3628:	cb 01       	movw	r24, r22
    362a:	9e 83       	std	Y+6, r25	; 0x06
    362c:	8d 83       	std	Y+5, r24	; 0x05
    362e:	8d 81       	ldd	r24, Y+5	; 0x05
    3630:	9e 81       	ldd	r25, Y+6	; 0x06
    3632:	9a 83       	std	Y+2, r25	; 0x02
    3634:	89 83       	std	Y+1, r24	; 0x01
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	9a 81       	ldd	r25, Y+2	; 0x02
    363a:	01 97       	sbiw	r24, 0x01	; 1
    363c:	f1 f7       	brne	.-4      	; 0x363a <HLCD_voidSendCom+0x13e>
    363e:	9a 83       	std	Y+2, r25	; 0x02
    3640:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_E_PIN,LOW);
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	67 e0       	ldi	r22, 0x07	; 7
    3646:	40 e0       	ldi	r20, 0x00	; 0
    3648:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
	}
	else
	{
		//Do Nothing
	}
}
    364c:	2f 96       	adiw	r28, 0x0f	; 15
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	f8 94       	cli
    3652:	de bf       	out	0x3e, r29	; 62
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	cd bf       	out	0x3d, r28	; 61
    3658:	cf 91       	pop	r28
    365a:	df 91       	pop	r29
    365c:	08 95       	ret

0000365e <HLCD_voidSendString>:
void HLCD_voidSendString(u8 *A_Pu8String)
{
    365e:	df 93       	push	r29
    3660:	cf 93       	push	r28
    3662:	00 d0       	rcall	.+0      	; 0x3664 <HLCD_voidSendString+0x6>
    3664:	00 d0       	rcall	.+0      	; 0x3666 <HLCD_voidSendString+0x8>
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
    366a:	9c 83       	std	Y+4, r25	; 0x04
    366c:	8b 83       	std	Y+3, r24	; 0x03
	u8 *L_u8Incrementer=A_Pu8String;
    366e:	8b 81       	ldd	r24, Y+3	; 0x03
    3670:	9c 81       	ldd	r25, Y+4	; 0x04
    3672:	9a 83       	std	Y+2, r25	; 0x02
    3674:	89 83       	std	Y+1, r24	; 0x01
    3676:	0a c0       	rjmp	.+20     	; 0x368c <HLCD_voidSendString+0x2e>
	while(*L_u8Incrementer!=0)
	{
		HLCD_voidSendData(*L_u8Incrementer);
    3678:	e9 81       	ldd	r30, Y+1	; 0x01
    367a:	fa 81       	ldd	r31, Y+2	; 0x02
    367c:	80 81       	ld	r24, Z
    367e:	0e 94 cd 19 	call	0x339a	; 0x339a <HLCD_voidSendData>
		L_u8Incrementer++;
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	9a 81       	ldd	r25, Y+2	; 0x02
    3686:	01 96       	adiw	r24, 0x01	; 1
    3688:	9a 83       	std	Y+2, r25	; 0x02
    368a:	89 83       	std	Y+1, r24	; 0x01
	}
}
void HLCD_voidSendString(u8 *A_Pu8String)
{
	u8 *L_u8Incrementer=A_Pu8String;
	while(*L_u8Incrementer!=0)
    368c:	e9 81       	ldd	r30, Y+1	; 0x01
    368e:	fa 81       	ldd	r31, Y+2	; 0x02
    3690:	80 81       	ld	r24, Z
    3692:	88 23       	and	r24, r24
    3694:	89 f7       	brne	.-30     	; 0x3678 <HLCD_voidSendString+0x1a>
	{
		HLCD_voidSendData(*L_u8Incrementer);
		L_u8Incrementer++;
	}
}
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	08 95       	ret

000036a4 <HLCD_voidSetCursor_DDRAM>:

void HLCD_voidSetCursor_DDRAM(u8 A_u8RowNum,u8 A_u8ColNum)
{
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	00 d0       	rcall	.+0      	; 0x36aa <HLCD_voidSetCursor_DDRAM+0x6>
    36aa:	0f 92       	push	r0
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	8a 83       	std	Y+2, r24	; 0x02
    36b2:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8DDramMemAddress;

	if((A_u8RowNum>=LCD_MinRowSize && A_u8RowNum<=LCD_MaxRowSize) && (A_u8ColNum>=LCD_MinCloSize && A_u8ColNum<=LCD_MaxColSize))
    36b4:	8a 81       	ldd	r24, Y+2	; 0x02
    36b6:	88 23       	and	r24, r24
    36b8:	c9 f0       	breq	.+50     	; 0x36ec <HLCD_voidSetCursor_DDRAM+0x48>
    36ba:	8a 81       	ldd	r24, Y+2	; 0x02
    36bc:	83 30       	cpi	r24, 0x03	; 3
    36be:	b0 f4       	brcc	.+44     	; 0x36ec <HLCD_voidSetCursor_DDRAM+0x48>
    36c0:	8b 81       	ldd	r24, Y+3	; 0x03
    36c2:	88 23       	and	r24, r24
    36c4:	99 f0       	breq	.+38     	; 0x36ec <HLCD_voidSetCursor_DDRAM+0x48>
    36c6:	8b 81       	ldd	r24, Y+3	; 0x03
    36c8:	81 31       	cpi	r24, 0x11	; 17
    36ca:	80 f4       	brcc	.+32     	; 0x36ec <HLCD_voidSetCursor_DDRAM+0x48>
	{
		if (A_u8RowNum==LCD_ROW1)
    36cc:	8a 81       	ldd	r24, Y+2	; 0x02
    36ce:	81 30       	cpi	r24, 0x01	; 1
    36d0:	21 f4       	brne	.+8      	; 0x36da <HLCD_voidSetCursor_DDRAM+0x36>
		{
			L_u8DDramMemAddress=LCD_FirstRowStart+A_u8ColNum-1;
    36d2:	8b 81       	ldd	r24, Y+3	; 0x03
    36d4:	81 58       	subi	r24, 0x81	; 129
    36d6:	89 83       	std	Y+1, r24	; 0x01
    36d8:	06 c0       	rjmp	.+12     	; 0x36e6 <HLCD_voidSetCursor_DDRAM+0x42>
		}
		else if(A_u8RowNum==LCD_ROW2)
    36da:	8a 81       	ldd	r24, Y+2	; 0x02
    36dc:	82 30       	cpi	r24, 0x02	; 2
    36de:	19 f4       	brne	.+6      	; 0x36e6 <HLCD_voidSetCursor_DDRAM+0x42>
		{
			L_u8DDramMemAddress=LCD_SecondRowStart+A_u8ColNum-1;
    36e0:	8b 81       	ldd	r24, Y+3	; 0x03
    36e2:	81 54       	subi	r24, 0x41	; 65
    36e4:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			//This part will be added if the lcd is changed to bigger one
		}
		HLCD_voidSendCom(L_u8DDramMemAddress);
    36e6:	89 81       	ldd	r24, Y+1	; 0x01
    36e8:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <HLCD_voidSendCom>
	}
	else
	{
		//Do Nothing
	}
}
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	0f 90       	pop	r0
    36f2:	cf 91       	pop	r28
    36f4:	df 91       	pop	r29
    36f6:	08 95       	ret

000036f8 <HLCD_voidSendSpecial>:


void HLCD_voidSendSpecial(u8 * A_u8PSpecialChar ,u8 A_u8BlockNum,u8 A_u8RowNum,u8 A_u8ColNum)
{
    36f8:	df 93       	push	r29
    36fa:	cf 93       	push	r28
    36fc:	00 d0       	rcall	.+0      	; 0x36fe <HLCD_voidSendSpecial+0x6>
    36fe:	00 d0       	rcall	.+0      	; 0x3700 <HLCD_voidSendSpecial+0x8>
    3700:	00 d0       	rcall	.+0      	; 0x3702 <HLCD_voidSendSpecial+0xa>
    3702:	cd b7       	in	r28, 0x3d	; 61
    3704:	de b7       	in	r29, 0x3e	; 62
    3706:	9b 83       	std	Y+3, r25	; 0x03
    3708:	8a 83       	std	Y+2, r24	; 0x02
    370a:	6c 83       	std	Y+4, r22	; 0x04
    370c:	4d 83       	std	Y+5, r20	; 0x05
    370e:	2e 83       	std	Y+6, r18	; 0x06
	u8 L_u8Incrementer;
	HLCD_voidSendCom(LCD_CgromStartAddress+A_u8BlockNum*LCD_CgromMaxBlockNumber);
    3710:	8c 81       	ldd	r24, Y+4	; 0x04
    3712:	88 2f       	mov	r24, r24
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	08 96       	adiw	r24, 0x08	; 8
    3718:	88 0f       	add	r24, r24
    371a:	99 1f       	adc	r25, r25
    371c:	88 0f       	add	r24, r24
    371e:	99 1f       	adc	r25, r25
    3720:	88 0f       	add	r24, r24
    3722:	99 1f       	adc	r25, r25
    3724:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <HLCD_voidSendCom>
	for(L_u8Incrementer=LCD_MinPixelsRowNo;L_u8Incrementer<LCD_MaxPixelsRowNo;L_u8Incrementer++)
    3728:	19 82       	std	Y+1, r1	; 0x01
    372a:	0e c0       	rjmp	.+28     	; 0x3748 <HLCD_voidSendSpecial+0x50>
	{
		HLCD_voidSendData(*(A_u8PSpecialChar+L_u8Incrementer));
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	28 2f       	mov	r18, r24
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	8a 81       	ldd	r24, Y+2	; 0x02
    3734:	9b 81       	ldd	r25, Y+3	; 0x03
    3736:	fc 01       	movw	r30, r24
    3738:	e2 0f       	add	r30, r18
    373a:	f3 1f       	adc	r31, r19
    373c:	80 81       	ld	r24, Z
    373e:	0e 94 cd 19 	call	0x339a	; 0x339a <HLCD_voidSendData>

void HLCD_voidSendSpecial(u8 * A_u8PSpecialChar ,u8 A_u8BlockNum,u8 A_u8RowNum,u8 A_u8ColNum)
{
	u8 L_u8Incrementer;
	HLCD_voidSendCom(LCD_CgromStartAddress+A_u8BlockNum*LCD_CgromMaxBlockNumber);
	for(L_u8Incrementer=LCD_MinPixelsRowNo;L_u8Incrementer<LCD_MaxPixelsRowNo;L_u8Incrementer++)
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	8f 5f       	subi	r24, 0xFF	; 255
    3746:	89 83       	std	Y+1, r24	; 0x01
    3748:	89 81       	ldd	r24, Y+1	; 0x01
    374a:	88 30       	cpi	r24, 0x08	; 8
    374c:	78 f3       	brcs	.-34     	; 0x372c <HLCD_voidSendSpecial+0x34>
	{
		HLCD_voidSendData(*(A_u8PSpecialChar+L_u8Incrementer));
	}
	HLCD_voidSetCursor_DDRAM(A_u8RowNum,A_u8ColNum);
    374e:	8d 81       	ldd	r24, Y+5	; 0x05
    3750:	6e 81       	ldd	r22, Y+6	; 0x06
    3752:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <HLCD_voidSetCursor_DDRAM>
	HLCD_voidSendData(A_u8BlockNum);
    3756:	8c 81       	ldd	r24, Y+4	; 0x04
    3758:	0e 94 cd 19 	call	0x339a	; 0x339a <HLCD_voidSendData>
}
    375c:	26 96       	adiw	r28, 0x06	; 6
    375e:	0f b6       	in	r0, 0x3f	; 63
    3760:	f8 94       	cli
    3762:	de bf       	out	0x3e, r29	; 62
    3764:	0f be       	out	0x3f, r0	; 63
    3766:	cd bf       	out	0x3d, r28	; 61
    3768:	cf 91       	pop	r28
    376a:	df 91       	pop	r29
    376c:	08 95       	ret

0000376e <HKP_voidKpInit>:
#include "util/delay.h"

u8 G_u8PressedValue=NoValueEntered;
u8 G_u8KpChars [4][4]={{'7','8','9','/'},{'4','5','6','x'},{'1','2','3','-'},{'O','0','=','+'}};
void HKP_voidKpInit(void)
{
    376e:	df 93       	push	r29
    3770:	cf 93       	push	r28
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
	MDIO_void_PortWrite(KP_PORT,KP_ALL_PINS_HIGH);
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	6f ef       	ldi	r22, 0xFF	; 255
    377a:	0e 94 12 14 	call	0x2824	; 0x2824 <MDIO_void_PortWrite>
	if(KP_COL_START==PIN0 && KP_ROW_START==PIN4)
	{
		MDIO_void_PortSetDir(KP_PORT,KP_LOWER_HIGH);
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	6f e0       	ldi	r22, 0x0F	; 15
    3782:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <MDIO_void_PortSetDir>
	}
	else
	{

	}
}
    3786:	cf 91       	pop	r28
    3788:	df 91       	pop	r29
    378a:	08 95       	ret

0000378c <HKP_u8GetPressedValue>:

u8 HKP_u8GetPressedValue(void)
{
    378c:	df 93       	push	r29
    378e:	cf 93       	push	r28
    3790:	cd b7       	in	r28, 0x3d	; 61
    3792:	de b7       	in	r29, 0x3e	; 62
    3794:	60 97       	sbiw	r28, 0x10	; 16
    3796:	0f b6       	in	r0, 0x3f	; 63
    3798:	f8 94       	cli
    379a:	de bf       	out	0x3e, r29	; 62
    379c:	0f be       	out	0x3f, r0	; 63
    379e:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8ColIncrementer;
	u8 L_u8RowIncrementer;
	for(L_u8ColIncrementer=KP_COL_START;L_u8ColIncrementer<=KP_COL_END;L_u8ColIncrementer++)
    37a0:	18 8a       	std	Y+16, r1	; 0x10
    37a2:	ac c0       	rjmp	.+344    	; 0x38fc <HKP_u8GetPressedValue+0x170>
	{
		MDIO_void_PinWrite(KP_PORT,L_u8ColIncrementer,LOW);
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	68 89       	ldd	r22, Y+16	; 0x10
    37a8:	40 e0       	ldi	r20, 0x00	; 0
    37aa:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
		for(L_u8RowIncrementer=KP_ROW_START;L_u8RowIncrementer<=KP_ROW_END;L_u8RowIncrementer++)
    37ae:	84 e0       	ldi	r24, 0x04	; 4
    37b0:	8f 87       	std	Y+15, r24	; 0x0f
    37b2:	98 c0       	rjmp	.+304    	; 0x38e4 <HKP_u8GetPressedValue+0x158>
		{
			if(MDIO_u8_PinRead(KP_PORT,L_u8RowIncrementer)==PRESSED)
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	6f 85       	ldd	r22, Y+15	; 0x0f
    37b8:	0e 94 a9 12 	call	0x2552	; 0x2552 <MDIO_u8_PinRead>
    37bc:	88 23       	and	r24, r24
    37be:	09 f0       	breq	.+2      	; 0x37c2 <HKP_u8GetPressedValue+0x36>
    37c0:	8e c0       	rjmp	.+284    	; 0x38de <HKP_u8GetPressedValue+0x152>
			{
				G_u8PressedValue=G_u8KpChars[L_u8RowIncrementer-KP_ROW_START][L_u8ColIncrementer-KP_COL_START];
    37c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    37c4:	88 2f       	mov	r24, r24
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	ac 01       	movw	r20, r24
    37ca:	44 50       	subi	r20, 0x04	; 4
    37cc:	50 40       	sbci	r21, 0x00	; 0
    37ce:	88 89       	ldd	r24, Y+16	; 0x10
    37d0:	28 2f       	mov	r18, r24
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	ca 01       	movw	r24, r20
    37d6:	88 0f       	add	r24, r24
    37d8:	99 1f       	adc	r25, r25
    37da:	88 0f       	add	r24, r24
    37dc:	99 1f       	adc	r25, r25
    37de:	82 0f       	add	r24, r18
    37e0:	93 1f       	adc	r25, r19
    37e2:	fc 01       	movw	r30, r24
    37e4:	ea 55       	subi	r30, 0x5A	; 90
    37e6:	fe 4f       	sbci	r31, 0xFE	; 254
    37e8:	80 81       	ld	r24, Z
    37ea:	80 93 a5 01 	sts	0x01A5, r24
				while(MDIO_u8_PinRead(KP_PORT,L_u8RowIncrementer)==PRESSED);
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    37f2:	0e 94 a9 12 	call	0x2552	; 0x2552 <MDIO_u8_PinRead>
    37f6:	88 23       	and	r24, r24
    37f8:	d1 f3       	breq	.-12     	; 0x37ee <HKP_u8GetPressedValue+0x62>
    37fa:	80 e0       	ldi	r24, 0x00	; 0
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	a0 e2       	ldi	r26, 0x20	; 32
    3800:	b1 e4       	ldi	r27, 0x41	; 65
    3802:	8b 87       	std	Y+11, r24	; 0x0b
    3804:	9c 87       	std	Y+12, r25	; 0x0c
    3806:	ad 87       	std	Y+13, r26	; 0x0d
    3808:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    380a:	6b 85       	ldd	r22, Y+11	; 0x0b
    380c:	7c 85       	ldd	r23, Y+12	; 0x0c
    380e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3810:	9e 85       	ldd	r25, Y+14	; 0x0e
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	4a ef       	ldi	r20, 0xFA	; 250
    3818:	54 e4       	ldi	r21, 0x44	; 68
    381a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	8f 83       	std	Y+7, r24	; 0x07
    3824:	98 87       	std	Y+8, r25	; 0x08
    3826:	a9 87       	std	Y+9, r26	; 0x09
    3828:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    382a:	6f 81       	ldd	r22, Y+7	; 0x07
    382c:	78 85       	ldd	r23, Y+8	; 0x08
    382e:	89 85       	ldd	r24, Y+9	; 0x09
    3830:	9a 85       	ldd	r25, Y+10	; 0x0a
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	40 e8       	ldi	r20, 0x80	; 128
    3838:	5f e3       	ldi	r21, 0x3F	; 63
    383a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    383e:	88 23       	and	r24, r24
    3840:	2c f4       	brge	.+10     	; 0x384c <HKP_u8GetPressedValue+0xc0>
		__ticks = 1;
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	9e 83       	std	Y+6, r25	; 0x06
    3848:	8d 83       	std	Y+5, r24	; 0x05
    384a:	3f c0       	rjmp	.+126    	; 0x38ca <HKP_u8GetPressedValue+0x13e>
	else if (__tmp > 65535)
    384c:	6f 81       	ldd	r22, Y+7	; 0x07
    384e:	78 85       	ldd	r23, Y+8	; 0x08
    3850:	89 85       	ldd	r24, Y+9	; 0x09
    3852:	9a 85       	ldd	r25, Y+10	; 0x0a
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	3f ef       	ldi	r19, 0xFF	; 255
    3858:	4f e7       	ldi	r20, 0x7F	; 127
    385a:	57 e4       	ldi	r21, 0x47	; 71
    385c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3860:	18 16       	cp	r1, r24
    3862:	4c f5       	brge	.+82     	; 0x38b6 <HKP_u8GetPressedValue+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3864:	6b 85       	ldd	r22, Y+11	; 0x0b
    3866:	7c 85       	ldd	r23, Y+12	; 0x0c
    3868:	8d 85       	ldd	r24, Y+13	; 0x0d
    386a:	9e 85       	ldd	r25, Y+14	; 0x0e
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	40 e2       	ldi	r20, 0x20	; 32
    3872:	51 e4       	ldi	r21, 0x41	; 65
    3874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	bc 01       	movw	r22, r24
    387e:	cd 01       	movw	r24, r26
    3880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	9e 83       	std	Y+6, r25	; 0x06
    388a:	8d 83       	std	Y+5, r24	; 0x05
    388c:	0f c0       	rjmp	.+30     	; 0x38ac <HKP_u8GetPressedValue+0x120>
    388e:	88 ec       	ldi	r24, 0xC8	; 200
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	9c 83       	std	Y+4, r25	; 0x04
    3894:	8b 83       	std	Y+3, r24	; 0x03
    3896:	8b 81       	ldd	r24, Y+3	; 0x03
    3898:	9c 81       	ldd	r25, Y+4	; 0x04
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	f1 f7       	brne	.-4      	; 0x389a <HKP_u8GetPressedValue+0x10e>
    389e:	9c 83       	std	Y+4, r25	; 0x04
    38a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a2:	8d 81       	ldd	r24, Y+5	; 0x05
    38a4:	9e 81       	ldd	r25, Y+6	; 0x06
    38a6:	01 97       	sbiw	r24, 0x01	; 1
    38a8:	9e 83       	std	Y+6, r25	; 0x06
    38aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ac:	8d 81       	ldd	r24, Y+5	; 0x05
    38ae:	9e 81       	ldd	r25, Y+6	; 0x06
    38b0:	00 97       	sbiw	r24, 0x00	; 0
    38b2:	69 f7       	brne	.-38     	; 0x388e <HKP_u8GetPressedValue+0x102>
    38b4:	14 c0       	rjmp	.+40     	; 0x38de <HKP_u8GetPressedValue+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b6:	6f 81       	ldd	r22, Y+7	; 0x07
    38b8:	78 85       	ldd	r23, Y+8	; 0x08
    38ba:	89 85       	ldd	r24, Y+9	; 0x09
    38bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	9e 83       	std	Y+6, r25	; 0x06
    38c8:	8d 83       	std	Y+5, r24	; 0x05
    38ca:	8d 81       	ldd	r24, Y+5	; 0x05
    38cc:	9e 81       	ldd	r25, Y+6	; 0x06
    38ce:	9a 83       	std	Y+2, r25	; 0x02
    38d0:	89 83       	std	Y+1, r24	; 0x01
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	9a 81       	ldd	r25, Y+2	; 0x02
    38d6:	01 97       	sbiw	r24, 0x01	; 1
    38d8:	f1 f7       	brne	.-4      	; 0x38d6 <HKP_u8GetPressedValue+0x14a>
    38da:	9a 83       	std	Y+2, r25	; 0x02
    38dc:	89 83       	std	Y+1, r24	; 0x01
	u8 L_u8ColIncrementer;
	u8 L_u8RowIncrementer;
	for(L_u8ColIncrementer=KP_COL_START;L_u8ColIncrementer<=KP_COL_END;L_u8ColIncrementer++)
	{
		MDIO_void_PinWrite(KP_PORT,L_u8ColIncrementer,LOW);
		for(L_u8RowIncrementer=KP_ROW_START;L_u8RowIncrementer<=KP_ROW_END;L_u8RowIncrementer++)
    38de:	8f 85       	ldd	r24, Y+15	; 0x0f
    38e0:	8f 5f       	subi	r24, 0xFF	; 255
    38e2:	8f 87       	std	Y+15, r24	; 0x0f
    38e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    38e6:	88 30       	cpi	r24, 0x08	; 8
    38e8:	08 f4       	brcc	.+2      	; 0x38ec <HKP_u8GetPressedValue+0x160>
    38ea:	64 cf       	rjmp	.-312    	; 0x37b4 <HKP_u8GetPressedValue+0x28>
				G_u8PressedValue=G_u8KpChars[L_u8RowIncrementer-KP_ROW_START][L_u8ColIncrementer-KP_COL_START];
				while(MDIO_u8_PinRead(KP_PORT,L_u8RowIncrementer)==PRESSED);
				_delay_ms(10); //delay for bouncing
			}
		}
		MDIO_void_PinWrite(KP_PORT,L_u8ColIncrementer,HIGH);
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	68 89       	ldd	r22, Y+16	; 0x10
    38f0:	41 e0       	ldi	r20, 0x01	; 1
    38f2:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>

u8 HKP_u8GetPressedValue(void)
{
	u8 L_u8ColIncrementer;
	u8 L_u8RowIncrementer;
	for(L_u8ColIncrementer=KP_COL_START;L_u8ColIncrementer<=KP_COL_END;L_u8ColIncrementer++)
    38f6:	88 89       	ldd	r24, Y+16	; 0x10
    38f8:	8f 5f       	subi	r24, 0xFF	; 255
    38fa:	88 8b       	std	Y+16, r24	; 0x10
    38fc:	88 89       	ldd	r24, Y+16	; 0x10
    38fe:	84 30       	cpi	r24, 0x04	; 4
    3900:	08 f4       	brcc	.+2      	; 0x3904 <HKP_u8GetPressedValue+0x178>
    3902:	50 cf       	rjmp	.-352    	; 0x37a4 <HKP_u8GetPressedValue+0x18>
				_delay_ms(10); //delay for bouncing
			}
		}
		MDIO_void_PinWrite(KP_PORT,L_u8ColIncrementer,HIGH);
	}
	return G_u8PressedValue;
    3904:	80 91 a5 01 	lds	r24, 0x01A5
}
    3908:	60 96       	adiw	r28, 0x10	; 16
    390a:	0f b6       	in	r0, 0x3f	; 63
    390c:	f8 94       	cli
    390e:	de bf       	out	0x3e, r29	; 62
    3910:	0f be       	out	0x3f, r0	; 63
    3912:	cd bf       	out	0x3d, r28	; 61
    3914:	cf 91       	pop	r28
    3916:	df 91       	pop	r29
    3918:	08 95       	ret

0000391a <HEEPROM_voidInit>:
#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/MI2C/I2C_int.h"
#include "EEPROM_init.h"

void HEEPROM_voidInit (u32 A_u32Scl)
{
    391a:	df 93       	push	r29
    391c:	cf 93       	push	r28
    391e:	00 d0       	rcall	.+0      	; 0x3920 <HEEPROM_voidInit+0x6>
    3920:	00 d0       	rcall	.+0      	; 0x3922 <HEEPROM_voidInit+0x8>
    3922:	cd b7       	in	r28, 0x3d	; 61
    3924:	de b7       	in	r29, 0x3e	; 62
    3926:	69 83       	std	Y+1, r22	; 0x01
    3928:	7a 83       	std	Y+2, r23	; 0x02
    392a:	8b 83       	std	Y+3, r24	; 0x03
    392c:	9c 83       	std	Y+4, r25	; 0x04
	MTWI_voidMasterInt(A_u32Scl) ;
    392e:	89 81       	ldd	r24, Y+1	; 0x01
    3930:	9a 81       	ldd	r25, Y+2	; 0x02
    3932:	ab 81       	ldd	r26, Y+3	; 0x03
    3934:	bc 81       	ldd	r27, Y+4	; 0x04
    3936:	bc 01       	movw	r22, r24
    3938:	cd 01       	movw	r24, r26
    393a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <MTWI_voidMasterInt>
}
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	cf 91       	pop	r28
    3948:	df 91       	pop	r29
    394a:	08 95       	ret

0000394c <HEEPROM_voidWriteByte>:

void HEEPROM_voidWriteByte (u16 A_u16Address , u8 A_u8Data)
{
    394c:	df 93       	push	r29
    394e:	cf 93       	push	r28
    3950:	00 d0       	rcall	.+0      	; 0x3952 <HEEPROM_voidWriteByte+0x6>
    3952:	00 d0       	rcall	.+0      	; 0x3954 <HEEPROM_voidWriteByte+0x8>
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
    3958:	9b 83       	std	Y+3, r25	; 0x03
    395a:	8a 83       	std	Y+2, r24	; 0x02
    395c:	6c 83       	std	Y+4, r22	; 0x04
	u8 L_u8WordAddress ;
	L_u8WordAddress = ((0b10100000) | ((A_u16Address>>8)<<1)) ; //Address format (10 address bits,r/w-bit)
    395e:	8a 81       	ldd	r24, Y+2	; 0x02
    3960:	9b 81       	ldd	r25, Y+3	; 0x03
    3962:	89 2f       	mov	r24, r25
    3964:	99 27       	eor	r25, r25
    3966:	88 0f       	add	r24, r24
    3968:	80 6a       	ori	r24, 0xA0	; 160
    396a:	89 83       	std	Y+1, r24	; 0x01
	MTWI_voidMasterSendStartCondition() ;
    396c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <MTWI_voidMasterSendStartCondition>
	MTWI_voidMasterSendAddress(L_u8WordAddress) ;
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <MTWI_voidMasterSendAddress>
	MTWI_voidMasterSendData((u8)A_u16Address) ;
    3976:	8a 81       	ldd	r24, Y+2	; 0x02
    3978:	0e 94 76 0e 	call	0x1cec	; 0x1cec <MTWI_voidMasterSendData>
	MTWI_voidMasterSendData(A_u8Data) ;
    397c:	8c 81       	ldd	r24, Y+4	; 0x04
    397e:	0e 94 76 0e 	call	0x1cec	; 0x1cec <MTWI_voidMasterSendData>
	MTWI_voidMasterSendStopCondition() ;
    3982:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <MTWI_voidMasterSendStopCondition>
}
    3986:	0f 90       	pop	r0
    3988:	0f 90       	pop	r0
    398a:	0f 90       	pop	r0
    398c:	0f 90       	pop	r0
    398e:	cf 91       	pop	r28
    3990:	df 91       	pop	r29
    3992:	08 95       	ret

00003994 <HEEPROM_u8ReadByte>:

u8 HEEPROM_u8ReadByte (u16 A_u16Address)
{
    3994:	df 93       	push	r29
    3996:	cf 93       	push	r28
    3998:	00 d0       	rcall	.+0      	; 0x399a <HEEPROM_u8ReadByte+0x6>
    399a:	00 d0       	rcall	.+0      	; 0x399c <HEEPROM_u8ReadByte+0x8>
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	9c 83       	std	Y+4, r25	; 0x04
    39a2:	8b 83       	std	Y+3, r24	; 0x03
	u8 L_u8WordAddress ;
	u8 L_u8ReturnByte ;
	L_u8WordAddress = ((0b10100000) | ((A_u16Address>>8)<<1)) ;
    39a4:	8b 81       	ldd	r24, Y+3	; 0x03
    39a6:	9c 81       	ldd	r25, Y+4	; 0x04
    39a8:	89 2f       	mov	r24, r25
    39aa:	99 27       	eor	r25, r25
    39ac:	88 0f       	add	r24, r24
    39ae:	80 6a       	ori	r24, 0xA0	; 160
    39b0:	8a 83       	std	Y+2, r24	; 0x02
	MTWI_voidMasterSendStartCondition() ;
    39b2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <MTWI_voidMasterSendStartCondition>
	MTWI_voidMasterSendAddress(L_u8WordAddress) ;
    39b6:	8a 81       	ldd	r24, Y+2	; 0x02
    39b8:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <MTWI_voidMasterSendAddress>
	MTWI_voidMasterSendData((u8)A_u16Address) ;
    39bc:	8b 81       	ldd	r24, Y+3	; 0x03
    39be:	0e 94 76 0e 	call	0x1cec	; 0x1cec <MTWI_voidMasterSendData>
	MTWI_voidMasterSendRepetedStartCondition() ;
    39c2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <MTWI_voidMasterSendRepetedStartCondition>
	L_u8WordAddress = ((0b10100001) | ((A_u16Address>>8)<<1)) ;
    39c6:	8b 81       	ldd	r24, Y+3	; 0x03
    39c8:	9c 81       	ldd	r25, Y+4	; 0x04
    39ca:	89 2f       	mov	r24, r25
    39cc:	99 27       	eor	r25, r25
    39ce:	88 0f       	add	r24, r24
    39d0:	81 6a       	ori	r24, 0xA1	; 161
    39d2:	8a 83       	std	Y+2, r24	; 0x02
	MTWI_voidMasterSendAddressToRead(L_u8WordAddress) ;
    39d4:	8a 81       	ldd	r24, Y+2	; 0x02
    39d6:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <MTWI_voidMasterSendAddressToRead>
	L_u8ReturnByte = MTWI_voidMasterReadDataWithNACK() ;
    39da:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <MTWI_voidMasterReadDataWithNACK>
    39de:	89 83       	std	Y+1, r24	; 0x01
	MTWI_voidMasterSendStopCondition() ;
    39e0:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <MTWI_voidMasterSendStopCondition>
	return L_u8ReturnByte ;
    39e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    39e6:	0f 90       	pop	r0
    39e8:	0f 90       	pop	r0
    39ea:	0f 90       	pop	r0
    39ec:	0f 90       	pop	r0
    39ee:	cf 91       	pop	r28
    39f0:	df 91       	pop	r29
    39f2:	08 95       	ret

000039f4 <Waiting_For_Password>:
 * P=1
 * R=2
 * D=3
 * */
void Waiting_For_Password(void)
{
    39f4:	df 93       	push	r29
    39f6:	cf 93       	push	r28
    39f8:	cd b7       	in	r28, 0x3d	; 61
    39fa:	de b7       	in	r29, 0x3e	; 62
	MUART_voidUartInit();
    39fc:	0e 94 77 07 	call	0xeee	; 0xeee <MUART_voidUartInit>
	MDIO_void_SetDir(DIO_PORTD,PIND0,PIN_INPUT);
    3a00:	83 e0       	ldi	r24, 0x03	; 3
    3a02:	60 e0       	ldi	r22, 0x00	; 0
    3a04:	40 e0       	ldi	r20, 0x00	; 0
    3a06:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
	MDIO_void_SetDir(DIO_PORTD,PIND1,PIN_OUTPUT);
    3a0a:	83 e0       	ldi	r24, 0x03	; 3
    3a0c:	61 e0       	ldi	r22, 0x01	; 1
    3a0e:	41 e0       	ldi	r20, 0x01	; 1
    3a10:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
	MDIO_void_SetDir(DIO_PORTA,PINA2,PIN_INPUT);
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	62 e0       	ldi	r22, 0x02	; 2
    3a18:	40 e0       	ldi	r20, 0x00	; 0
    3a1a:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
	while(MUART_u8UartRecieve()!='A' && MDIO_u8_PinRead(DIO_PORTA,PINA2)!=1);
    3a1e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <MUART_u8UartRecieve>
    3a22:	81 34       	cpi	r24, 0x41	; 65
    3a24:	31 f0       	breq	.+12     	; 0x3a32 <Waiting_For_Password+0x3e>
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	62 e0       	ldi	r22, 0x02	; 2
    3a2a:	0e 94 a9 12 	call	0x2552	; 0x2552 <MDIO_u8_PinRead>
    3a2e:	81 30       	cpi	r24, 0x01	; 1
    3a30:	b1 f7       	brne	.-20     	; 0x3a1e <Waiting_For_Password+0x2a>
}
    3a32:	cf 91       	pop	r28
    3a34:	df 91       	pop	r29
    3a36:	08 95       	ret

00003a38 <Detecting_BasSystem>:

void Detecting_BasSystem(void)
{
    3a38:	df 93       	push	r29
    3a3a:	cf 93       	push	r28
    3a3c:	cd b7       	in	r28, 0x3d	; 61
    3a3e:	de b7       	in	r29, 0x3e	; 62
	G_u8SystemMode++;
    3a40:	80 91 c4 01 	lds	r24, 0x01C4
    3a44:	8f 5f       	subi	r24, 0xFF	; 255
    3a46:	80 93 c4 01 	sts	0x01C4, r24
	if(G_u8SystemMode==4)
    3a4a:	80 91 c4 01 	lds	r24, 0x01C4
    3a4e:	84 30       	cpi	r24, 0x04	; 4
    3a50:	11 f4       	brne	.+4      	; 0x3a56 <Detecting_BasSystem+0x1e>
		G_u8SystemMode=0;
    3a52:	10 92 c4 01 	sts	0x01C4, r1
}
    3a56:	cf 91       	pop	r28
    3a58:	df 91       	pop	r29
    3a5a:	08 95       	ret

00003a5c <Detecting_SlSystem>:
void Detecting_SlSystem(void)
{
    3a5c:	df 93       	push	r29
    3a5e:	cf 93       	push	r28
    3a60:	cd b7       	in	r28, 0x3d	; 61
    3a62:	de b7       	in	r29, 0x3e	; 62

		G_u8SlMode++;
    3a64:	80 91 c5 01 	lds	r24, 0x01C5
    3a68:	8f 5f       	subi	r24, 0xFF	; 255
    3a6a:	80 93 c5 01 	sts	0x01C5, r24
			if(G_u8SlMode==2)
    3a6e:	80 91 c5 01 	lds	r24, 0x01C5
    3a72:	82 30       	cpi	r24, 0x02	; 2
    3a74:	11 f4       	brne	.+4      	; 0x3a7a <Detecting_SlSystem+0x1e>
				G_u8SlMode=0;
    3a76:	10 92 c5 01 	sts	0x01C5, r1

}
    3a7a:	cf 91       	pop	r28
    3a7c:	df 91       	pop	r29
    3a7e:	08 95       	ret

00003a80 <Detecting_CSSSystem>:
void Detecting_CSSSystem(void)
{
    3a80:	df 93       	push	r29
    3a82:	cf 93       	push	r28
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62

			G_u8CSSMode++;
    3a88:	80 91 c6 01 	lds	r24, 0x01C6
    3a8c:	8f 5f       	subi	r24, 0xFF	; 255
    3a8e:	80 93 c6 01 	sts	0x01C6, r24
			if(G_u8CSSMode==2)
    3a92:	80 91 c6 01 	lds	r24, 0x01C6
    3a96:	82 30       	cpi	r24, 0x02	; 2
    3a98:	11 f4       	brne	.+4      	; 0x3a9e <Detecting_CSSSystem+0x1e>
				G_u8CSSMode=0;
    3a9a:	10 92 c6 01 	sts	0x01C6, r1


}
    3a9e:	cf 91       	pop	r28
    3aa0:	df 91       	pop	r29
    3aa2:	08 95       	ret

00003aa4 <Break_Assistance_System>:

void Break_Assistance_System(void)
{
    3aa4:	df 93       	push	r29
    3aa6:	cf 93       	push	r28
    3aa8:	0f 92       	push	r0
    3aaa:	cd b7       	in	r28, 0x3d	; 61
    3aac:	de b7       	in	r29, 0x3e	; 62
	u8 L_u8CalculatedDistance;

	//L_u8CalculatedDistance=HUS_u16CalcDistancd();
	L_u8CalculatedDistance=7;
    3aae:	87 e0       	ldi	r24, 0x07	; 7
    3ab0:	89 83       	std	Y+1, r24	; 0x01
	if(L_u8CalculatedDistance>10)
    3ab2:	89 81       	ldd	r24, Y+1	; 0x01
    3ab4:	8b 30       	cpi	r24, 0x0B	; 11
    3ab6:	98 f0       	brcs	.+38     	; 0x3ade <Break_Assistance_System+0x3a>
	{
		HLCD_voidSetCursor_DDRAM(1,1);
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	61 e0       	ldi	r22, 0x01	; 1
    3abc:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <HLCD_voidSetCursor_DDRAM>
		HLCD_voidSendString("BAS: ON");
    3ac0:	80 e6       	ldi	r24, 0x60	; 96
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>
		MDIO_void_SetDir(DIO_PORTB,PINB4,PIN_OUTPUT);
    3ac8:	81 e0       	ldi	r24, 0x01	; 1
    3aca:	64 e0       	ldi	r22, 0x04	; 4
    3acc:	41 e0       	ldi	r20, 0x01	; 1
    3ace:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
		MDIO_void_PinWrite(DIO_PORTB,PINB4,LOW);
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	64 e0       	ldi	r22, 0x04	; 4
    3ad6:	40 e0       	ldi	r20, 0x00	; 0
    3ad8:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
    3adc:	27 c0       	rjmp	.+78     	; 0x3b2c <Break_Assistance_System+0x88>
	}
	else if (L_u8CalculatedDistance>5)
    3ade:	89 81       	ldd	r24, Y+1	; 0x01
    3ae0:	86 30       	cpi	r24, 0x06	; 6
    3ae2:	90 f0       	brcs	.+36     	; 0x3b08 <Break_Assistance_System+0x64>
	{
		HLCD_voidSetCursor_DDRAM(1,1);
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	61 e0       	ldi	r22, 0x01	; 1
    3ae8:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <HLCD_voidSetCursor_DDRAM>
		HLCD_voidSendString("BAS: ON");
    3aec:	80 e6       	ldi	r24, 0x60	; 96
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>
		MDIO_void_SetDir(DIO_PORTB,PINB4,PIN_OUTPUT);
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	64 e0       	ldi	r22, 0x04	; 4
    3af8:	41 e0       	ldi	r20, 0x01	; 1
    3afa:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
		MDIO_void_PinToggle(DIO_PORTB,PINB4);
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	64 e0       	ldi	r22, 0x04	; 4
    3b02:	0e 94 54 13 	call	0x26a8	; 0x26a8 <MDIO_void_PinToggle>
    3b06:	12 c0       	rjmp	.+36     	; 0x3b2c <Break_Assistance_System+0x88>

		//_delay_ms(110);
	}
	else
	{
		HLCD_voidSetCursor_DDRAM(1,1);
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	61 e0       	ldi	r22, 0x01	; 1
    3b0c:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <HLCD_voidSetCursor_DDRAM>
		HLCD_voidSendString("BAS: ON");
    3b10:	80 e6       	ldi	r24, 0x60	; 96
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>
		MDIO_void_SetDir(DIO_PORTB,PINB4,PIN_OUTPUT);
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	64 e0       	ldi	r22, 0x04	; 4
    3b1c:	41 e0       	ldi	r20, 0x01	; 1
    3b1e:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
		MDIO_void_PinWrite(DIO_PORTB,PINB4,HIGH);
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	64 e0       	ldi	r22, 0x04	; 4
    3b26:	41 e0       	ldi	r20, 0x01	; 1
    3b28:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
	}
}
    3b2c:	0f 90       	pop	r0
    3b2e:	cf 91       	pop	r28
    3b30:	df 91       	pop	r29
    3b32:	08 95       	ret

00003b34 <SL_System>:

void SL_System(void)
{
    3b34:	df 93       	push	r29
    3b36:	cf 93       	push	r28
    3b38:	cd b7       	in	r28, 0x3d	; 61
    3b3a:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSetCursor_DDRAM(2,1);
    3b3c:	82 e0       	ldi	r24, 0x02	; 2
    3b3e:	61 e0       	ldi	r22, 0x01	; 1
    3b40:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <HLCD_voidSetCursor_DDRAM>
	HLCD_voidSendString("SL: ON");
    3b44:	88 e6       	ldi	r24, 0x68	; 104
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>
	//MDIO_void_SetDir(DIO_PORTB,PINB1,PIN_OUTPUT);
	MDIO_void_PinWrite(DIO_PORTB,PINB1,HIGH);
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	61 e0       	ldi	r22, 0x01	; 1
    3b50:	41 e0       	ldi	r20, 0x01	; 1
    3b52:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
}
    3b56:	cf 91       	pop	r28
    3b58:	df 91       	pop	r29
    3b5a:	08 95       	ret

00003b5c <CSS_System>:
void CSS_System(void)
{
    3b5c:	df 93       	push	r29
    3b5e:	cf 93       	push	r28
    3b60:	cd b7       	in	r28, 0x3d	; 61
    3b62:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSetCursor_DDRAM(1,9);
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	69 e0       	ldi	r22, 0x09	; 9
    3b68:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <HLCD_voidSetCursor_DDRAM>
	HLCD_voidSendString("CSS: ON");
    3b6c:	8f e6       	ldi	r24, 0x6F	; 111
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>
	//MDIO_void_SetDir(DIO_PORTB,PINB0,PIN_OUTPUT);
	MDIO_void_PinWrite(DIO_PORTB,PINB0,HIGH);
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	60 e0       	ldi	r22, 0x00	; 0
    3b78:	41 e0       	ldi	r20, 0x01	; 1
    3b7a:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
}
    3b7e:	cf 91       	pop	r28
    3b80:	df 91       	pop	r29
    3b82:	08 95       	ret

00003b84 <Drive_Monitoring_System>:
void Drive_Monitoring_System(void)
{
    3b84:	df 93       	push	r29
    3b86:	cf 93       	push	r28
    3b88:	cd b7       	in	r28, 0x3d	; 61
    3b8a:	de b7       	in	r29, 0x3e	; 62
		TMR2_VoidSetOCMValue(125);
		MGINT_voidGlobalIntEnable();
		G_Timer2IntEnabled=1;
	}
	*/
	DMS_Counter++;
    3b8c:	80 91 cb 01 	lds	r24, 0x01CB
    3b90:	90 91 cc 01 	lds	r25, 0x01CC
    3b94:	a0 91 cd 01 	lds	r26, 0x01CD
    3b98:	b0 91 ce 01 	lds	r27, 0x01CE
    3b9c:	bc 01       	movw	r22, r24
    3b9e:	cd 01       	movw	r24, r26
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	40 e8       	ldi	r20, 0x80	; 128
    3ba6:	5f e3       	ldi	r21, 0x3F	; 63
    3ba8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	80 93 cb 01 	sts	0x01CB, r24
    3bb4:	90 93 cc 01 	sts	0x01CC, r25
    3bb8:	a0 93 cd 01 	sts	0x01CD, r26
    3bbc:	b0 93 ce 01 	sts	0x01CE, r27
	if(DMS_Counter==50)
    3bc0:	80 91 cb 01 	lds	r24, 0x01CB
    3bc4:	90 91 cc 01 	lds	r25, 0x01CC
    3bc8:	a0 91 cd 01 	lds	r26, 0x01CD
    3bcc:	b0 91 ce 01 	lds	r27, 0x01CE
    3bd0:	bc 01       	movw	r22, r24
    3bd2:	cd 01       	movw	r24, r26
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	48 e4       	ldi	r20, 0x48	; 72
    3bda:	52 e4       	ldi	r21, 0x42	; 66
    3bdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3be0:	88 23       	and	r24, r24
    3be2:	79 f4       	brne	.+30     	; 0x3c02 <Drive_Monitoring_System+0x7e>
	{
		G_BuzzerEnabled=1;
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	80 93 ca 01 	sts	0x01CA, r24
		DMS_Counter=0;
    3bea:	80 e0       	ldi	r24, 0x00	; 0
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	a0 e0       	ldi	r26, 0x00	; 0
    3bf0:	b0 e0       	ldi	r27, 0x00	; 0
    3bf2:	80 93 cb 01 	sts	0x01CB, r24
    3bf6:	90 93 cc 01 	sts	0x01CC, r25
    3bfa:	a0 93 cd 01 	sts	0x01CD, r26
    3bfe:	b0 93 ce 01 	sts	0x01CE, r27
	}
	if(G_BuzzerEnabled==1)
    3c02:	80 91 ca 01 	lds	r24, 0x01CA
    3c06:	81 30       	cpi	r24, 0x01	; 1
    3c08:	49 f4       	brne	.+18     	; 0x3c1c <Drive_Monitoring_System+0x98>
	{
		/*Buzzer Enable*/
		MDIO_void_SetDir(DIO_PORTA,PINA1,PIN_OUTPUT);
    3c0a:	80 e0       	ldi	r24, 0x00	; 0
    3c0c:	61 e0       	ldi	r22, 0x01	; 1
    3c0e:	41 e0       	ldi	r20, 0x01	; 1
    3c10:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
		MDIO_void_PinToggle(DIO_PORTA,PINA1);
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	61 e0       	ldi	r22, 0x01	; 1
    3c18:	0e 94 54 13 	call	0x26a8	; 0x26a8 <MDIO_void_PinToggle>
	}
}
    3c1c:	cf 91       	pop	r28
    3c1e:	df 91       	pop	r29
    3c20:	08 95       	ret

00003c22 <Time_Count_SameState>:
		TMR0_VoidSetPreload(64);
	}
}
*/
void Time_Count_SameState(void)
{
    3c22:	df 93       	push	r29
    3c24:	cf 93       	push	r28
    3c26:	cd b7       	in	r28, 0x3d	; 61
    3c28:	de b7       	in	r29, 0x3e	; 62
	static u8 L_u32Counter1=0;
	L_u32Counter1++;
    3c2a:	80 91 cf 01 	lds	r24, 0x01CF
    3c2e:	8f 5f       	subi	r24, 0xFF	; 255
    3c30:	80 93 cf 01 	sts	0x01CF, r24
			G_Timer2IntEnabled=0;
			TMR2_VoidOCMInterruptDisable();
		}
		L_u32Counter1=0;
	}
}
    3c34:	cf 91       	pop	r28
    3c36:	df 91       	pop	r29
    3c38:	08 95       	ret

00003c3a <main>:
extern u8 G_u8CSSMode;
extern u16 G_u16Kilometers;
extern u8 G_BuzzerEnabled;
extern f64 DMS_Counter;
int main(void)
{
    3c3a:	df 93       	push	r29
    3c3c:	cf 93       	push	r28
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
    3c42:	a2 97       	sbiw	r28, 0x22	; 34
    3c44:	0f b6       	in	r0, 0x3f	; 63
    3c46:	f8 94       	cli
    3c48:	de bf       	out	0x3e, r29	; 62
    3c4a:	0f be       	out	0x3f, r0	; 63
    3c4c:	cd bf       	out	0x3d, r28	; 61
	Waiting_For_Password();
    3c4e:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <Waiting_For_Password>
	/*External Interrups setting*/
	MDIO_void_SetDir(DIO_PORTD,PIND2,PIN_INPUT);
    3c52:	83 e0       	ldi	r24, 0x03	; 3
    3c54:	62 e0       	ldi	r22, 0x02	; 2
    3c56:	40 e0       	ldi	r20, 0x00	; 0
    3c58:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
	MDIO_void_SetDir(DIO_PORTD,PIND3,PIN_INPUT);
    3c5c:	83 e0       	ldi	r24, 0x03	; 3
    3c5e:	63 e0       	ldi	r22, 0x03	; 3
    3c60:	40 e0       	ldi	r20, 0x00	; 0
    3c62:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
	MDIO_void_SetDir(DIO_PORTB,PINB2,PIN_INPUT);
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	62 e0       	ldi	r22, 0x02	; 2
    3c6a:	40 e0       	ldi	r20, 0x00	; 0
    3c6c:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
	MDIO_void_PinWrite(DIO_PORTD,PIND2,HIGH);
    3c70:	83 e0       	ldi	r24, 0x03	; 3
    3c72:	62 e0       	ldi	r22, 0x02	; 2
    3c74:	41 e0       	ldi	r20, 0x01	; 1
    3c76:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
	MDIO_void_PinWrite(DIO_PORTD,PIND3,HIGH);
    3c7a:	83 e0       	ldi	r24, 0x03	; 3
    3c7c:	63 e0       	ldi	r22, 0x03	; 3
    3c7e:	41 e0       	ldi	r20, 0x01	; 1
    3c80:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
	MDIO_void_PinWrite(DIO_PORTB,PINB2,HIGH);
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	62 e0       	ldi	r22, 0x02	; 2
    3c88:	41 e0       	ldi	r20, 0x01	; 1
    3c8a:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
	MEXTI_voidExt0CallBack(Detecting_BasSystem);
    3c8e:	8c e1       	ldi	r24, 0x1C	; 28
    3c90:	9d e1       	ldi	r25, 0x1D	; 29
    3c92:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <MEXTI_voidExt0CallBack>
	MEXTI_voidExt1CallBack(Detecting_SlSystem);
    3c96:	8e e2       	ldi	r24, 0x2E	; 46
    3c98:	9d e1       	ldi	r25, 0x1D	; 29
    3c9a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <MEXTI_voidExt1CallBack>
	MEXTI_voidExt2CallBack(Detecting_CSSSystem);
    3c9e:	80 e4       	ldi	r24, 0x40	; 64
    3ca0:	9d e1       	ldi	r25, 0x1D	; 29
    3ca2:	0e 94 10 10 	call	0x2020	; 0x2020 <MEXTI_voidExt2CallBack>
	MEXTI_voidExtInit();
    3ca6:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <MEXTI_voidExtInit>
	MEXTI_voidExtEnable(EXTI_EXTI0);
    3caa:	80 e0       	ldi	r24, 0x00	; 0
    3cac:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <MEXTI_voidExtEnable>
	MEXTI_voidExtEnable(EXTI_EXTI1);
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <MEXTI_voidExtEnable>
	MEXTI_voidExtEnable(EXTI_EXTI2);
    3cb6:	82 e0       	ldi	r24, 0x02	; 2
    3cb8:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <MEXTI_voidExtEnable>
	MGINT_voidGlobalIntEnable();
    3cbc:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <MGINT_voidGlobalIntEnable>

	MDIO_void_SetDir(DIO_PORTB,PINB0,PIN_OUTPUT);
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	60 e0       	ldi	r22, 0x00	; 0
    3cc4:	41 e0       	ldi	r20, 0x01	; 1
    3cc6:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
	MDIO_void_SetDir(DIO_PORTB,PINB1,PIN_OUTPUT);
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	61 e0       	ldi	r22, 0x01	; 1
    3cce:	41 e0       	ldi	r20, 0x01	; 1
    3cd0:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>

	/*LCD start*/
	HLCD_voidInit();
    3cd4:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <HLCD_voidInit>

	/*US Initialization*/

	MTIMER1_voidTimer1Init();
    3cd8:	0e 94 0c 09 	call	0x1218	; 0x1218 <MTIMER1_voidTimer1Init>
	MTIMER1_voidOvCallBack(HUS_voidOvCounter);
    3cdc:	82 e8       	ldi	r24, 0x82	; 130
    3cde:	96 e1       	ldi	r25, 0x16	; 22
    3ce0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <MTIMER1_voidOvCallBack>
	MTIMER1_voidOvIntEnable();
    3ce4:	0e 94 a8 09 	call	0x1350	; 0x1350 <MTIMER1_voidOvIntEnable>
	MGINT_voidGlobalIntEnable();
    3ce8:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <MGINT_voidGlobalIntEnable>
	HUS_voidUsInit();
    3cec:	0e 94 67 15 	call	0x2ace	; 0x2ace <HUS_voidUsInit>
	/*ADC*/
	MDIO_void_SetDir(DIO_PORTA,PINA0,PIN_INPUT);
    3cf0:	80 e0       	ldi	r24, 0x00	; 0
    3cf2:	60 e0       	ldi	r22, 0x00	; 0
    3cf4:	40 e0       	ldi	r20, 0x00	; 0
    3cf6:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
	u32 L_u32ADCReadPrev=0,L_u32ADCReadLast=0;
    3cfa:	1f 8a       	std	Y+23, r1	; 0x17
    3cfc:	18 8e       	std	Y+24, r1	; 0x18
    3cfe:	19 8e       	std	Y+25, r1	; 0x19
    3d00:	1a 8e       	std	Y+26, r1	; 0x1a
    3d02:	1b 8a       	std	Y+19, r1	; 0x13
    3d04:	1c 8a       	std	Y+20, r1	; 0x14
    3d06:	1d 8a       	std	Y+21, r1	; 0x15
    3d08:	1e 8a       	std	Y+22, r1	; 0x16
	MADC_voidInit();
    3d0a:	0e 94 a8 14 	call	0x2950	; 0x2950 <MADC_voidInit>
	MADC_voidStartConv();
    3d0e:	0e 94 e7 14 	call	0x29ce	; 0x29ce <MADC_voidStartConv>
	L_u32ADCReadLast=MADC_u16ReadOut();
    3d12:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <MADC_u16ReadOut>
    3d16:	cc 01       	movw	r24, r24
    3d18:	a0 e0       	ldi	r26, 0x00	; 0
    3d1a:	b0 e0       	ldi	r27, 0x00	; 0
    3d1c:	8b 8b       	std	Y+19, r24	; 0x13
    3d1e:	9c 8b       	std	Y+20, r25	; 0x14
    3d20:	ad 8b       	std	Y+21, r26	; 0x15
    3d22:	be 8b       	std	Y+22, r27	; 0x16
	L_u32ADCReadPrev=L_u32ADCReadLast;
    3d24:	8b 89       	ldd	r24, Y+19	; 0x13
    3d26:	9c 89       	ldd	r25, Y+20	; 0x14
    3d28:	ad 89       	ldd	r26, Y+21	; 0x15
    3d2a:	be 89       	ldd	r27, Y+22	; 0x16
    3d2c:	8f 8b       	std	Y+23, r24	; 0x17
    3d2e:	98 8f       	std	Y+24, r25	; 0x18
    3d30:	a9 8f       	std	Y+25, r26	; 0x19
    3d32:	ba 8f       	std	Y+26, r27	; 0x1a
	/*Kilometer Printing*/

	u8 L_u8KilometersSt[8];
	//u8 L_u8Tim1=1,L_u8Tim2=1,L_u8Tim3=1;
	u32 L_f64LoopCounter=0;
    3d34:	1f 86       	std	Y+15, r1	; 0x0f
    3d36:	18 8a       	std	Y+16, r1	; 0x10
    3d38:	19 8a       	std	Y+17, r1	; 0x11
    3d3a:	1a 8a       	std	Y+18, r1	; 0x12
	while(1)
	{
		MADC_voidStartConv();
    3d3c:	0e 94 e7 14 	call	0x29ce	; 0x29ce <MADC_voidStartConv>
		L_u32ADCReadLast=MADC_u16ReadOut();
    3d40:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <MADC_u16ReadOut>
    3d44:	cc 01       	movw	r24, r24
    3d46:	a0 e0       	ldi	r26, 0x00	; 0
    3d48:	b0 e0       	ldi	r27, 0x00	; 0
    3d4a:	8b 8b       	std	Y+19, r24	; 0x13
    3d4c:	9c 8b       	std	Y+20, r25	; 0x14
    3d4e:	ad 8b       	std	Y+21, r26	; 0x15
    3d50:	be 8b       	std	Y+22, r27	; 0x16
		if(G_u8SystemMode==3)
    3d52:	80 91 c4 01 	lds	r24, 0x01C4
    3d56:	83 30       	cpi	r24, 0x03	; 3
    3d58:	21 f4       	brne	.+8      	; 0x3d62 <main+0x128>
		{
			Break_Assistance_System();
    3d5a:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <Break_Assistance_System>
			Drive_Monitoring_System();
    3d5e:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <Drive_Monitoring_System>
		}
		if(G_u8SystemMode==3 && G_u8SlMode==1)
    3d62:	80 91 c4 01 	lds	r24, 0x01C4
    3d66:	83 30       	cpi	r24, 0x03	; 3
    3d68:	31 f4       	brne	.+12     	; 0x3d76 <main+0x13c>
    3d6a:	80 91 c5 01 	lds	r24, 0x01C5
    3d6e:	81 30       	cpi	r24, 0x01	; 1
    3d70:	11 f4       	brne	.+4      	; 0x3d76 <main+0x13c>
		{
			SL_System();
    3d72:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <SL_System>
		}
		if(G_u8SystemMode==3 && G_u8CSSMode==1 && L_u32ADCReadLast-L_u32ADCReadPrev==0)
    3d76:	80 91 c4 01 	lds	r24, 0x01C4
    3d7a:	83 30       	cpi	r24, 0x03	; 3
    3d7c:	99 f4       	brne	.+38     	; 0x3da4 <main+0x16a>
    3d7e:	80 91 c6 01 	lds	r24, 0x01C6
    3d82:	81 30       	cpi	r24, 0x01	; 1
    3d84:	79 f4       	brne	.+30     	; 0x3da4 <main+0x16a>
    3d86:	2b 89       	ldd	r18, Y+19	; 0x13
    3d88:	3c 89       	ldd	r19, Y+20	; 0x14
    3d8a:	4d 89       	ldd	r20, Y+21	; 0x15
    3d8c:	5e 89       	ldd	r21, Y+22	; 0x16
    3d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    3d90:	98 8d       	ldd	r25, Y+24	; 0x18
    3d92:	a9 8d       	ldd	r26, Y+25	; 0x19
    3d94:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3d96:	28 17       	cp	r18, r24
    3d98:	39 07       	cpc	r19, r25
    3d9a:	4a 07       	cpc	r20, r26
    3d9c:	5b 07       	cpc	r21, r27
    3d9e:	11 f4       	brne	.+4      	; 0x3da4 <main+0x16a>
		{
			CSS_System();
    3da0:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <CSS_System>
		}
		if(G_u8SystemMode!=3)
    3da4:	80 91 c4 01 	lds	r24, 0x01C4
    3da8:	83 30       	cpi	r24, 0x03	; 3
    3daa:	09 f4       	brne	.+2      	; 0x3dae <main+0x174>
    3dac:	49 c0       	rjmp	.+146    	; 0x3e40 <main+0x206>
		{
			/*Turn off all leds and lcd on*/
			HLCD_voidSetCursor_DDRAM(1,1);
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	61 e0       	ldi	r22, 0x01	; 1
    3db2:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <HLCD_voidSetCursor_DDRAM>
			HLCD_voidSendString("BAS:OFF");
    3db6:	87 e7       	ldi	r24, 0x77	; 119
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>
			HLCD_voidSetCursor_DDRAM(2,1);
    3dbe:	82 e0       	ldi	r24, 0x02	; 2
    3dc0:	61 e0       	ldi	r22, 0x01	; 1
    3dc2:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <HLCD_voidSetCursor_DDRAM>
			HLCD_voidSendString("SL:OFF");
    3dc6:	8f e7       	ldi	r24, 0x7F	; 127
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>
			HLCD_voidSetCursor_DDRAM(1,9);
    3dce:	81 e0       	ldi	r24, 0x01	; 1
    3dd0:	69 e0       	ldi	r22, 0x09	; 9
    3dd2:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <HLCD_voidSetCursor_DDRAM>
			HLCD_voidSendString("CSS:OFF");
    3dd6:	86 e8       	ldi	r24, 0x86	; 134
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>
			MDIO_void_SetDir(DIO_PORTB,PINB4,PIN_OUTPUT);
    3dde:	81 e0       	ldi	r24, 0x01	; 1
    3de0:	64 e0       	ldi	r22, 0x04	; 4
    3de2:	41 e0       	ldi	r20, 0x01	; 1
    3de4:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
			MDIO_void_PinWrite(DIO_PORTB,PINB4,LOW);
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	64 e0       	ldi	r22, 0x04	; 4
    3dec:	40 e0       	ldi	r20, 0x00	; 0
    3dee:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
			MDIO_void_SetDir(DIO_PORTB,PINB1,PIN_OUTPUT);
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	61 e0       	ldi	r22, 0x01	; 1
    3df6:	41 e0       	ldi	r20, 0x01	; 1
    3df8:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
			MDIO_void_PinWrite(DIO_PORTB,PINB1,LOW);
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	61 e0       	ldi	r22, 0x01	; 1
    3e00:	40 e0       	ldi	r20, 0x00	; 0
    3e02:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
			MDIO_void_SetDir(DIO_PORTB,PINB0,PIN_OUTPUT);
    3e06:	81 e0       	ldi	r24, 0x01	; 1
    3e08:	60 e0       	ldi	r22, 0x00	; 0
    3e0a:	41 e0       	ldi	r20, 0x01	; 1
    3e0c:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
			MDIO_void_PinWrite(DIO_PORTB,PINB0,LOW);
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	60 e0       	ldi	r22, 0x00	; 0
    3e14:	40 e0       	ldi	r20, 0x00	; 0
    3e16:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
			G_BuzzerEnabled=0;
    3e1a:	10 92 ca 01 	sts	0x01CA, r1
			DMS_Counter=0;
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	a0 e0       	ldi	r26, 0x00	; 0
    3e24:	b0 e0       	ldi	r27, 0x00	; 0
    3e26:	80 93 cb 01 	sts	0x01CB, r24
    3e2a:	90 93 cc 01 	sts	0x01CC, r25
    3e2e:	a0 93 cd 01 	sts	0x01CD, r26
    3e32:	b0 93 ce 01 	sts	0x01CE, r27
			MDIO_void_PinWrite(DIO_PORTA,PINA1,LOW);
    3e36:	80 e0       	ldi	r24, 0x00	; 0
    3e38:	61 e0       	ldi	r22, 0x01	; 1
    3e3a:	40 e0       	ldi	r20, 0x00	; 0
    3e3c:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
		}
		if(G_u8SlMode==0 && G_u8SystemMode==3)
    3e40:	80 91 c5 01 	lds	r24, 0x01C5
    3e44:	88 23       	and	r24, r24
    3e46:	b1 f4       	brne	.+44     	; 0x3e74 <main+0x23a>
    3e48:	80 91 c4 01 	lds	r24, 0x01C4
    3e4c:	83 30       	cpi	r24, 0x03	; 3
    3e4e:	91 f4       	brne	.+36     	; 0x3e74 <main+0x23a>
		{
			/*turn off sl */
			HLCD_voidSetCursor_DDRAM(2,1);
    3e50:	82 e0       	ldi	r24, 0x02	; 2
    3e52:	61 e0       	ldi	r22, 0x01	; 1
    3e54:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <HLCD_voidSetCursor_DDRAM>
			HLCD_voidSendString("SL:OFF");
    3e58:	8f e7       	ldi	r24, 0x7F	; 127
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>
			MDIO_void_SetDir(DIO_PORTB,PINB1,PIN_OUTPUT);
    3e60:	81 e0       	ldi	r24, 0x01	; 1
    3e62:	61 e0       	ldi	r22, 0x01	; 1
    3e64:	41 e0       	ldi	r20, 0x01	; 1
    3e66:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
			MDIO_void_PinWrite(DIO_PORTB,PINB1,LOW);
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	61 e0       	ldi	r22, 0x01	; 1
    3e6e:	40 e0       	ldi	r20, 0x00	; 0
    3e70:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
		}
		if((G_u8CSSMode==0 || ((L_u32ADCReadLast-L_u32ADCReadPrev>3) && (L_u32ADCReadLast-L_u32ADCReadPrev<-3) )) && G_u8SystemMode==3)
    3e74:	80 91 c6 01 	lds	r24, 0x01C6
    3e78:	88 23       	and	r24, r24
    3e7a:	29 f1       	breq	.+74     	; 0x3ec6 <main+0x28c>
    3e7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e7e:	9c 89       	ldd	r25, Y+20	; 0x14
    3e80:	ad 89       	ldd	r26, Y+21	; 0x15
    3e82:	be 89       	ldd	r27, Y+22	; 0x16
    3e84:	2f 89       	ldd	r18, Y+23	; 0x17
    3e86:	38 8d       	ldd	r19, Y+24	; 0x18
    3e88:	49 8d       	ldd	r20, Y+25	; 0x19
    3e8a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3e8c:	82 1b       	sub	r24, r18
    3e8e:	93 0b       	sbc	r25, r19
    3e90:	a4 0b       	sbc	r26, r20
    3e92:	b5 0b       	sbc	r27, r21
    3e94:	84 30       	cpi	r24, 0x04	; 4
    3e96:	91 05       	cpc	r25, r1
    3e98:	a1 05       	cpc	r26, r1
    3e9a:	b1 05       	cpc	r27, r1
    3e9c:	c8 f1       	brcs	.+114    	; 0x3f10 <main+0x2d6>
    3e9e:	8b 89       	ldd	r24, Y+19	; 0x13
    3ea0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ea2:	ad 89       	ldd	r26, Y+21	; 0x15
    3ea4:	be 89       	ldd	r27, Y+22	; 0x16
    3ea6:	2f 89       	ldd	r18, Y+23	; 0x17
    3ea8:	38 8d       	ldd	r19, Y+24	; 0x18
    3eaa:	49 8d       	ldd	r20, Y+25	; 0x19
    3eac:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3eae:	82 1b       	sub	r24, r18
    3eb0:	93 0b       	sbc	r25, r19
    3eb2:	a4 0b       	sbc	r26, r20
    3eb4:	b5 0b       	sbc	r27, r21
    3eb6:	8d 3f       	cpi	r24, 0xFD	; 253
    3eb8:	2f ef       	ldi	r18, 0xFF	; 255
    3eba:	92 07       	cpc	r25, r18
    3ebc:	2f ef       	ldi	r18, 0xFF	; 255
    3ebe:	a2 07       	cpc	r26, r18
    3ec0:	2f ef       	ldi	r18, 0xFF	; 255
    3ec2:	b2 07       	cpc	r27, r18
    3ec4:	28 f5       	brcc	.+74     	; 0x3f10 <main+0x2d6>
    3ec6:	80 91 c4 01 	lds	r24, 0x01C4
    3eca:	83 30       	cpi	r24, 0x03	; 3
    3ecc:	09 f5       	brne	.+66     	; 0x3f10 <main+0x2d6>
		{
			if(L_u32ADCReadLast-L_u32ADCReadPrev!=0)
    3ece:	2b 89       	ldd	r18, Y+19	; 0x13
    3ed0:	3c 89       	ldd	r19, Y+20	; 0x14
    3ed2:	4d 89       	ldd	r20, Y+21	; 0x15
    3ed4:	5e 89       	ldd	r21, Y+22	; 0x16
    3ed6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ed8:	98 8d       	ldd	r25, Y+24	; 0x18
    3eda:	a9 8d       	ldd	r26, Y+25	; 0x19
    3edc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3ede:	28 17       	cp	r18, r24
    3ee0:	39 07       	cpc	r19, r25
    3ee2:	4a 07       	cpc	r20, r26
    3ee4:	5b 07       	cpc	r21, r27
    3ee6:	11 f0       	breq	.+4      	; 0x3eec <main+0x2b2>
				G_u8CSSMode=0;
    3ee8:	10 92 c6 01 	sts	0x01C6, r1
			/*turn off css*/
			HLCD_voidSetCursor_DDRAM(1,9);
    3eec:	81 e0       	ldi	r24, 0x01	; 1
    3eee:	69 e0       	ldi	r22, 0x09	; 9
    3ef0:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <HLCD_voidSetCursor_DDRAM>
			HLCD_voidSendString("CSS:OFF");
    3ef4:	86 e8       	ldi	r24, 0x86	; 134
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>
			MDIO_void_SetDir(DIO_PORTB,PINB0,PIN_OUTPUT);
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	60 e0       	ldi	r22, 0x00	; 0
    3f00:	41 e0       	ldi	r20, 0x01	; 1
    3f02:	0e 94 a9 10 	call	0x2152	; 0x2152 <MDIO_void_SetDir>
			MDIO_void_PinWrite(DIO_PORTB,PINB0,LOW);
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	60 e0       	ldi	r22, 0x00	; 0
    3f0a:	40 e0       	ldi	r20, 0x00	; 0
    3f0c:	0e 94 a9 11 	call	0x2352	; 0x2352 <MDIO_void_PinWrite>
			TMR0_VoidOVFInterruptEnable();
			TMR0_VoidSetPreload(64);
			MGINT_voidGlobalIntEnable();
		}
		 */
		if(L_u32ADCReadLast>0 && L_u32ADCReadLast<350 && G_u8SystemMode!=0 && G_u8SystemMode!=1)
    3f10:	8b 89       	ldd	r24, Y+19	; 0x13
    3f12:	9c 89       	ldd	r25, Y+20	; 0x14
    3f14:	ad 89       	ldd	r26, Y+21	; 0x15
    3f16:	be 89       	ldd	r27, Y+22	; 0x16
    3f18:	00 97       	sbiw	r24, 0x00	; 0
    3f1a:	a1 05       	cpc	r26, r1
    3f1c:	b1 05       	cpc	r27, r1
    3f1e:	89 f1       	breq	.+98     	; 0x3f82 <main+0x348>
    3f20:	8b 89       	ldd	r24, Y+19	; 0x13
    3f22:	9c 89       	ldd	r25, Y+20	; 0x14
    3f24:	ad 89       	ldd	r26, Y+21	; 0x15
    3f26:	be 89       	ldd	r27, Y+22	; 0x16
    3f28:	8e 35       	cpi	r24, 0x5E	; 94
    3f2a:	21 e0       	ldi	r18, 0x01	; 1
    3f2c:	92 07       	cpc	r25, r18
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	a2 07       	cpc	r26, r18
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	b2 07       	cpc	r27, r18
    3f36:	28 f5       	brcc	.+74     	; 0x3f82 <main+0x348>
    3f38:	80 91 c4 01 	lds	r24, 0x01C4
    3f3c:	88 23       	and	r24, r24
    3f3e:	09 f1       	breq	.+66     	; 0x3f82 <main+0x348>
    3f40:	80 91 c4 01 	lds	r24, 0x01C4
    3f44:	81 30       	cpi	r24, 0x01	; 1
    3f46:	e9 f0       	breq	.+58     	; 0x3f82 <main+0x348>
		{
			if(L_f64LoopCounter % 100==0)
    3f48:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f4a:	98 89       	ldd	r25, Y+16	; 0x10
    3f4c:	a9 89       	ldd	r26, Y+17	; 0x11
    3f4e:	ba 89       	ldd	r27, Y+18	; 0x12
    3f50:	24 e6       	ldi	r18, 0x64	; 100
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	40 e0       	ldi	r20, 0x00	; 0
    3f56:	50 e0       	ldi	r21, 0x00	; 0
    3f58:	bc 01       	movw	r22, r24
    3f5a:	cd 01       	movw	r24, r26
    3f5c:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
    3f60:	dc 01       	movw	r26, r24
    3f62:	cb 01       	movw	r24, r22
    3f64:	00 97       	sbiw	r24, 0x00	; 0
    3f66:	a1 05       	cpc	r26, r1
    3f68:	b1 05       	cpc	r27, r1
    3f6a:	09 f0       	breq	.+2      	; 0x3f6e <main+0x334>
    3f6c:	82 c0       	rjmp	.+260    	; 0x4072 <main+0x438>
			{
				G_u16Kilometers++;
    3f6e:	80 91 c7 01 	lds	r24, 0x01C7
    3f72:	90 91 c8 01 	lds	r25, 0x01C8
    3f76:	01 96       	adiw	r24, 0x01	; 1
    3f78:	90 93 c8 01 	sts	0x01C8, r25
    3f7c:	80 93 c7 01 	sts	0x01C7, r24
    3f80:	78 c0       	rjmp	.+240    	; 0x4072 <main+0x438>
			}
		}
		else if (L_u32ADCReadLast>=350 && L_u32ADCReadLast<700 && G_u8SystemMode!=0 && G_u8SystemMode!=1 )
    3f82:	8b 89       	ldd	r24, Y+19	; 0x13
    3f84:	9c 89       	ldd	r25, Y+20	; 0x14
    3f86:	ad 89       	ldd	r26, Y+21	; 0x15
    3f88:	be 89       	ldd	r27, Y+22	; 0x16
    3f8a:	8e 35       	cpi	r24, 0x5E	; 94
    3f8c:	21 e0       	ldi	r18, 0x01	; 1
    3f8e:	92 07       	cpc	r25, r18
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	a2 07       	cpc	r26, r18
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	b2 07       	cpc	r27, r18
    3f98:	88 f1       	brcs	.+98     	; 0x3ffc <main+0x3c2>
    3f9a:	8b 89       	ldd	r24, Y+19	; 0x13
    3f9c:	9c 89       	ldd	r25, Y+20	; 0x14
    3f9e:	ad 89       	ldd	r26, Y+21	; 0x15
    3fa0:	be 89       	ldd	r27, Y+22	; 0x16
    3fa2:	8c 3b       	cpi	r24, 0xBC	; 188
    3fa4:	22 e0       	ldi	r18, 0x02	; 2
    3fa6:	92 07       	cpc	r25, r18
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	a2 07       	cpc	r26, r18
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	b2 07       	cpc	r27, r18
    3fb0:	28 f5       	brcc	.+74     	; 0x3ffc <main+0x3c2>
    3fb2:	80 91 c4 01 	lds	r24, 0x01C4
    3fb6:	88 23       	and	r24, r24
    3fb8:	09 f1       	breq	.+66     	; 0x3ffc <main+0x3c2>
    3fba:	80 91 c4 01 	lds	r24, 0x01C4
    3fbe:	81 30       	cpi	r24, 0x01	; 1
    3fc0:	e9 f0       	breq	.+58     	; 0x3ffc <main+0x3c2>
		{
			if(L_f64LoopCounter % 50==0)
    3fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fc4:	98 89       	ldd	r25, Y+16	; 0x10
    3fc6:	a9 89       	ldd	r26, Y+17	; 0x11
    3fc8:	ba 89       	ldd	r27, Y+18	; 0x12
    3fca:	22 e3       	ldi	r18, 0x32	; 50
    3fcc:	30 e0       	ldi	r19, 0x00	; 0
    3fce:	40 e0       	ldi	r20, 0x00	; 0
    3fd0:	50 e0       	ldi	r21, 0x00	; 0
    3fd2:	bc 01       	movw	r22, r24
    3fd4:	cd 01       	movw	r24, r26
    3fd6:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
    3fda:	dc 01       	movw	r26, r24
    3fdc:	cb 01       	movw	r24, r22
    3fde:	00 97       	sbiw	r24, 0x00	; 0
    3fe0:	a1 05       	cpc	r26, r1
    3fe2:	b1 05       	cpc	r27, r1
    3fe4:	09 f0       	breq	.+2      	; 0x3fe8 <main+0x3ae>
    3fe6:	45 c0       	rjmp	.+138    	; 0x4072 <main+0x438>
			{
				G_u16Kilometers++;
    3fe8:	80 91 c7 01 	lds	r24, 0x01C7
    3fec:	90 91 c8 01 	lds	r25, 0x01C8
    3ff0:	01 96       	adiw	r24, 0x01	; 1
    3ff2:	90 93 c8 01 	sts	0x01C8, r25
    3ff6:	80 93 c7 01 	sts	0x01C7, r24
    3ffa:	3b c0       	rjmp	.+118    	; 0x4072 <main+0x438>
			}
		}
		else if (L_u32ADCReadLast>=700 && L_u32ADCReadLast<1100 && G_u8SystemMode!=0 && G_u8SystemMode!=1 )
    3ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    3ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    4000:	ad 89       	ldd	r26, Y+21	; 0x15
    4002:	be 89       	ldd	r27, Y+22	; 0x16
    4004:	8c 3b       	cpi	r24, 0xBC	; 188
    4006:	22 e0       	ldi	r18, 0x02	; 2
    4008:	92 07       	cpc	r25, r18
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	a2 07       	cpc	r26, r18
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	b2 07       	cpc	r27, r18
    4012:	78 f1       	brcs	.+94     	; 0x4072 <main+0x438>
    4014:	8b 89       	ldd	r24, Y+19	; 0x13
    4016:	9c 89       	ldd	r25, Y+20	; 0x14
    4018:	ad 89       	ldd	r26, Y+21	; 0x15
    401a:	be 89       	ldd	r27, Y+22	; 0x16
    401c:	8c 34       	cpi	r24, 0x4C	; 76
    401e:	24 e0       	ldi	r18, 0x04	; 4
    4020:	92 07       	cpc	r25, r18
    4022:	20 e0       	ldi	r18, 0x00	; 0
    4024:	a2 07       	cpc	r26, r18
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	b2 07       	cpc	r27, r18
    402a:	18 f5       	brcc	.+70     	; 0x4072 <main+0x438>
    402c:	80 91 c4 01 	lds	r24, 0x01C4
    4030:	88 23       	and	r24, r24
    4032:	f9 f0       	breq	.+62     	; 0x4072 <main+0x438>
    4034:	80 91 c4 01 	lds	r24, 0x01C4
    4038:	81 30       	cpi	r24, 0x01	; 1
    403a:	d9 f0       	breq	.+54     	; 0x4072 <main+0x438>
		{
			if(L_f64LoopCounter % 25==0)
    403c:	8f 85       	ldd	r24, Y+15	; 0x0f
    403e:	98 89       	ldd	r25, Y+16	; 0x10
    4040:	a9 89       	ldd	r26, Y+17	; 0x11
    4042:	ba 89       	ldd	r27, Y+18	; 0x12
    4044:	29 e1       	ldi	r18, 0x19	; 25
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	40 e0       	ldi	r20, 0x00	; 0
    404a:	50 e0       	ldi	r21, 0x00	; 0
    404c:	bc 01       	movw	r22, r24
    404e:	cd 01       	movw	r24, r26
    4050:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
    4054:	dc 01       	movw	r26, r24
    4056:	cb 01       	movw	r24, r22
    4058:	00 97       	sbiw	r24, 0x00	; 0
    405a:	a1 05       	cpc	r26, r1
    405c:	b1 05       	cpc	r27, r1
    405e:	49 f4       	brne	.+18     	; 0x4072 <main+0x438>
			{
				G_u16Kilometers++;
    4060:	80 91 c7 01 	lds	r24, 0x01C7
    4064:	90 91 c8 01 	lds	r25, 0x01C8
    4068:	01 96       	adiw	r24, 0x01	; 1
    406a:	90 93 c8 01 	sts	0x01C8, r25
    406e:	80 93 c7 01 	sts	0x01C7, r24
			}
		}
		itoa(G_u16Kilometers,L_u8KilometersSt,10);
    4072:	80 91 c7 01 	lds	r24, 0x01C7
    4076:	90 91 c8 01 	lds	r25, 0x01C8
    407a:	9e 01       	movw	r18, r28
    407c:	25 5e       	subi	r18, 0xE5	; 229
    407e:	3f 4f       	sbci	r19, 0xFF	; 255
    4080:	b9 01       	movw	r22, r18
    4082:	4a e0       	ldi	r20, 0x0A	; 10
    4084:	50 e0       	ldi	r21, 0x00	; 0
    4086:	0e 94 72 21 	call	0x42e4	; 0x42e4 <itoa>
		HLCD_voidSetCursor_DDRAM(2,9);
    408a:	82 e0       	ldi	r24, 0x02	; 2
    408c:	69 e0       	ldi	r22, 0x09	; 9
    408e:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <HLCD_voidSetCursor_DDRAM>
		HLCD_voidSendString("D=");
    4092:	8e e8       	ldi	r24, 0x8E	; 142
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>
		HLCD_voidSendString(L_u8KilometersSt);
    409a:	ce 01       	movw	r24, r28
    409c:	4b 96       	adiw	r24, 0x1b	; 27
    409e:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>

		if(G_u8SystemMode==0)
    40a2:	80 91 c4 01 	lds	r24, 0x01C4
    40a6:	88 23       	and	r24, r24
    40a8:	29 f4       	brne	.+10     	; 0x40b4 <main+0x47a>
		{
			HLCD_voidSendString(" N");
    40aa:	81 e9       	ldi	r24, 0x91	; 145
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>
    40b2:	1a c0       	rjmp	.+52     	; 0x40e8 <main+0x4ae>

		}
		else if(G_u8SystemMode==1)
    40b4:	80 91 c4 01 	lds	r24, 0x01C4
    40b8:	81 30       	cpi	r24, 0x01	; 1
    40ba:	29 f4       	brne	.+10     	; 0x40c6 <main+0x48c>
		{
			HLCD_voidSendString(" P");
    40bc:	84 e9       	ldi	r24, 0x94	; 148
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>
    40c4:	11 c0       	rjmp	.+34     	; 0x40e8 <main+0x4ae>
		}
		else if(G_u8SystemMode==2)
    40c6:	80 91 c4 01 	lds	r24, 0x01C4
    40ca:	82 30       	cpi	r24, 0x02	; 2
    40cc:	29 f4       	brne	.+10     	; 0x40d8 <main+0x49e>
		{
			HLCD_voidSendString(" R");
    40ce:	87 e9       	ldi	r24, 0x97	; 151
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>
    40d6:	08 c0       	rjmp	.+16     	; 0x40e8 <main+0x4ae>
		}
		else if(G_u8SystemMode==3)
    40d8:	80 91 c4 01 	lds	r24, 0x01C4
    40dc:	83 30       	cpi	r24, 0x03	; 3
    40de:	21 f4       	brne	.+8      	; 0x40e8 <main+0x4ae>
		{
			HLCD_voidSendString(" D");
    40e0:	8a e9       	ldi	r24, 0x9A	; 154
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	0e 94 2f 1b 	call	0x365e	; 0x365e <HLCD_voidSendString>
		}


		L_u32ADCReadPrev=L_u32ADCReadLast;
    40e8:	8b 89       	ldd	r24, Y+19	; 0x13
    40ea:	9c 89       	ldd	r25, Y+20	; 0x14
    40ec:	ad 89       	ldd	r26, Y+21	; 0x15
    40ee:	be 89       	ldd	r27, Y+22	; 0x16
    40f0:	8f 8b       	std	Y+23, r24	; 0x17
    40f2:	98 8f       	std	Y+24, r25	; 0x18
    40f4:	a9 8f       	std	Y+25, r26	; 0x19
    40f6:	ba 8f       	std	Y+26, r27	; 0x1a
		L_f64LoopCounter++;
    40f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    40fa:	98 89       	ldd	r25, Y+16	; 0x10
    40fc:	a9 89       	ldd	r26, Y+17	; 0x11
    40fe:	ba 89       	ldd	r27, Y+18	; 0x12
    4100:	01 96       	adiw	r24, 0x01	; 1
    4102:	a1 1d       	adc	r26, r1
    4104:	b1 1d       	adc	r27, r1
    4106:	8f 87       	std	Y+15, r24	; 0x0f
    4108:	98 8b       	std	Y+16, r25	; 0x10
    410a:	a9 8b       	std	Y+17, r26	; 0x11
    410c:	ba 8b       	std	Y+18, r27	; 0x12
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	ac ed       	ldi	r26, 0xDC	; 220
    4114:	b2 e4       	ldi	r27, 0x42	; 66
    4116:	8b 87       	std	Y+11, r24	; 0x0b
    4118:	9c 87       	std	Y+12, r25	; 0x0c
    411a:	ad 87       	std	Y+13, r26	; 0x0d
    411c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    411e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4120:	7c 85       	ldd	r23, Y+12	; 0x0c
    4122:	8d 85       	ldd	r24, Y+13	; 0x0d
    4124:	9e 85       	ldd	r25, Y+14	; 0x0e
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	4a ef       	ldi	r20, 0xFA	; 250
    412c:	54 e4       	ldi	r21, 0x44	; 68
    412e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	8f 83       	std	Y+7, r24	; 0x07
    4138:	98 87       	std	Y+8, r25	; 0x08
    413a:	a9 87       	std	Y+9, r26	; 0x09
    413c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    413e:	6f 81       	ldd	r22, Y+7	; 0x07
    4140:	78 85       	ldd	r23, Y+8	; 0x08
    4142:	89 85       	ldd	r24, Y+9	; 0x09
    4144:	9a 85       	ldd	r25, Y+10	; 0x0a
    4146:	20 e0       	ldi	r18, 0x00	; 0
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	40 e8       	ldi	r20, 0x80	; 128
    414c:	5f e3       	ldi	r21, 0x3F	; 63
    414e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4152:	88 23       	and	r24, r24
    4154:	2c f4       	brge	.+10     	; 0x4160 <main+0x526>
		__ticks = 1;
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	9e 83       	std	Y+6, r25	; 0x06
    415c:	8d 83       	std	Y+5, r24	; 0x05
    415e:	3f c0       	rjmp	.+126    	; 0x41de <main+0x5a4>
	else if (__tmp > 65535)
    4160:	6f 81       	ldd	r22, Y+7	; 0x07
    4162:	78 85       	ldd	r23, Y+8	; 0x08
    4164:	89 85       	ldd	r24, Y+9	; 0x09
    4166:	9a 85       	ldd	r25, Y+10	; 0x0a
    4168:	20 e0       	ldi	r18, 0x00	; 0
    416a:	3f ef       	ldi	r19, 0xFF	; 255
    416c:	4f e7       	ldi	r20, 0x7F	; 127
    416e:	57 e4       	ldi	r21, 0x47	; 71
    4170:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4174:	18 16       	cp	r1, r24
    4176:	4c f5       	brge	.+82     	; 0x41ca <main+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4178:	6b 85       	ldd	r22, Y+11	; 0x0b
    417a:	7c 85       	ldd	r23, Y+12	; 0x0c
    417c:	8d 85       	ldd	r24, Y+13	; 0x0d
    417e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4180:	20 e0       	ldi	r18, 0x00	; 0
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	40 e2       	ldi	r20, 0x20	; 32
    4186:	51 e4       	ldi	r21, 0x41	; 65
    4188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    418c:	dc 01       	movw	r26, r24
    418e:	cb 01       	movw	r24, r22
    4190:	bc 01       	movw	r22, r24
    4192:	cd 01       	movw	r24, r26
    4194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4198:	dc 01       	movw	r26, r24
    419a:	cb 01       	movw	r24, r22
    419c:	9e 83       	std	Y+6, r25	; 0x06
    419e:	8d 83       	std	Y+5, r24	; 0x05
    41a0:	0f c0       	rjmp	.+30     	; 0x41c0 <main+0x586>
    41a2:	88 ec       	ldi	r24, 0xC8	; 200
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	9c 83       	std	Y+4, r25	; 0x04
    41a8:	8b 83       	std	Y+3, r24	; 0x03
    41aa:	8b 81       	ldd	r24, Y+3	; 0x03
    41ac:	9c 81       	ldd	r25, Y+4	; 0x04
    41ae:	01 97       	sbiw	r24, 0x01	; 1
    41b0:	f1 f7       	brne	.-4      	; 0x41ae <main+0x574>
    41b2:	9c 83       	std	Y+4, r25	; 0x04
    41b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41b6:	8d 81       	ldd	r24, Y+5	; 0x05
    41b8:	9e 81       	ldd	r25, Y+6	; 0x06
    41ba:	01 97       	sbiw	r24, 0x01	; 1
    41bc:	9e 83       	std	Y+6, r25	; 0x06
    41be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41c0:	8d 81       	ldd	r24, Y+5	; 0x05
    41c2:	9e 81       	ldd	r25, Y+6	; 0x06
    41c4:	00 97       	sbiw	r24, 0x00	; 0
    41c6:	69 f7       	brne	.-38     	; 0x41a2 <main+0x568>
    41c8:	b9 cd       	rjmp	.-1166   	; 0x3d3c <main+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ca:	6f 81       	ldd	r22, Y+7	; 0x07
    41cc:	78 85       	ldd	r23, Y+8	; 0x08
    41ce:	89 85       	ldd	r24, Y+9	; 0x09
    41d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d6:	dc 01       	movw	r26, r24
    41d8:	cb 01       	movw	r24, r22
    41da:	9e 83       	std	Y+6, r25	; 0x06
    41dc:	8d 83       	std	Y+5, r24	; 0x05
    41de:	8d 81       	ldd	r24, Y+5	; 0x05
    41e0:	9e 81       	ldd	r25, Y+6	; 0x06
    41e2:	9a 83       	std	Y+2, r25	; 0x02
    41e4:	89 83       	std	Y+1, r24	; 0x01
    41e6:	89 81       	ldd	r24, Y+1	; 0x01
    41e8:	9a 81       	ldd	r25, Y+2	; 0x02
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	f1 f7       	brne	.-4      	; 0x41ea <main+0x5b0>
    41ee:	9a 83       	std	Y+2, r25	; 0x02
    41f0:	89 83       	std	Y+1, r24	; 0x01
    41f2:	a4 cd       	rjmp	.-1208   	; 0x3d3c <main+0x102>

000041f4 <__mulsi3>:
    41f4:	62 9f       	mul	r22, r18
    41f6:	d0 01       	movw	r26, r0
    41f8:	73 9f       	mul	r23, r19
    41fa:	f0 01       	movw	r30, r0
    41fc:	82 9f       	mul	r24, r18
    41fe:	e0 0d       	add	r30, r0
    4200:	f1 1d       	adc	r31, r1
    4202:	64 9f       	mul	r22, r20
    4204:	e0 0d       	add	r30, r0
    4206:	f1 1d       	adc	r31, r1
    4208:	92 9f       	mul	r25, r18
    420a:	f0 0d       	add	r31, r0
    420c:	83 9f       	mul	r24, r19
    420e:	f0 0d       	add	r31, r0
    4210:	74 9f       	mul	r23, r20
    4212:	f0 0d       	add	r31, r0
    4214:	65 9f       	mul	r22, r21
    4216:	f0 0d       	add	r31, r0
    4218:	99 27       	eor	r25, r25
    421a:	72 9f       	mul	r23, r18
    421c:	b0 0d       	add	r27, r0
    421e:	e1 1d       	adc	r30, r1
    4220:	f9 1f       	adc	r31, r25
    4222:	63 9f       	mul	r22, r19
    4224:	b0 0d       	add	r27, r0
    4226:	e1 1d       	adc	r30, r1
    4228:	f9 1f       	adc	r31, r25
    422a:	bd 01       	movw	r22, r26
    422c:	cf 01       	movw	r24, r30
    422e:	11 24       	eor	r1, r1
    4230:	08 95       	ret

00004232 <__udivmodsi4>:
    4232:	a1 e2       	ldi	r26, 0x21	; 33
    4234:	1a 2e       	mov	r1, r26
    4236:	aa 1b       	sub	r26, r26
    4238:	bb 1b       	sub	r27, r27
    423a:	fd 01       	movw	r30, r26
    423c:	0d c0       	rjmp	.+26     	; 0x4258 <__udivmodsi4_ep>

0000423e <__udivmodsi4_loop>:
    423e:	aa 1f       	adc	r26, r26
    4240:	bb 1f       	adc	r27, r27
    4242:	ee 1f       	adc	r30, r30
    4244:	ff 1f       	adc	r31, r31
    4246:	a2 17       	cp	r26, r18
    4248:	b3 07       	cpc	r27, r19
    424a:	e4 07       	cpc	r30, r20
    424c:	f5 07       	cpc	r31, r21
    424e:	20 f0       	brcs	.+8      	; 0x4258 <__udivmodsi4_ep>
    4250:	a2 1b       	sub	r26, r18
    4252:	b3 0b       	sbc	r27, r19
    4254:	e4 0b       	sbc	r30, r20
    4256:	f5 0b       	sbc	r31, r21

00004258 <__udivmodsi4_ep>:
    4258:	66 1f       	adc	r22, r22
    425a:	77 1f       	adc	r23, r23
    425c:	88 1f       	adc	r24, r24
    425e:	99 1f       	adc	r25, r25
    4260:	1a 94       	dec	r1
    4262:	69 f7       	brne	.-38     	; 0x423e <__udivmodsi4_loop>
    4264:	60 95       	com	r22
    4266:	70 95       	com	r23
    4268:	80 95       	com	r24
    426a:	90 95       	com	r25
    426c:	9b 01       	movw	r18, r22
    426e:	ac 01       	movw	r20, r24
    4270:	bd 01       	movw	r22, r26
    4272:	cf 01       	movw	r24, r30
    4274:	08 95       	ret

00004276 <__prologue_saves__>:
    4276:	2f 92       	push	r2
    4278:	3f 92       	push	r3
    427a:	4f 92       	push	r4
    427c:	5f 92       	push	r5
    427e:	6f 92       	push	r6
    4280:	7f 92       	push	r7
    4282:	8f 92       	push	r8
    4284:	9f 92       	push	r9
    4286:	af 92       	push	r10
    4288:	bf 92       	push	r11
    428a:	cf 92       	push	r12
    428c:	df 92       	push	r13
    428e:	ef 92       	push	r14
    4290:	ff 92       	push	r15
    4292:	0f 93       	push	r16
    4294:	1f 93       	push	r17
    4296:	cf 93       	push	r28
    4298:	df 93       	push	r29
    429a:	cd b7       	in	r28, 0x3d	; 61
    429c:	de b7       	in	r29, 0x3e	; 62
    429e:	ca 1b       	sub	r28, r26
    42a0:	db 0b       	sbc	r29, r27
    42a2:	0f b6       	in	r0, 0x3f	; 63
    42a4:	f8 94       	cli
    42a6:	de bf       	out	0x3e, r29	; 62
    42a8:	0f be       	out	0x3f, r0	; 63
    42aa:	cd bf       	out	0x3d, r28	; 61
    42ac:	09 94       	ijmp

000042ae <__epilogue_restores__>:
    42ae:	2a 88       	ldd	r2, Y+18	; 0x12
    42b0:	39 88       	ldd	r3, Y+17	; 0x11
    42b2:	48 88       	ldd	r4, Y+16	; 0x10
    42b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    42b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    42b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    42ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    42bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    42be:	aa 84       	ldd	r10, Y+10	; 0x0a
    42c0:	b9 84       	ldd	r11, Y+9	; 0x09
    42c2:	c8 84       	ldd	r12, Y+8	; 0x08
    42c4:	df 80       	ldd	r13, Y+7	; 0x07
    42c6:	ee 80       	ldd	r14, Y+6	; 0x06
    42c8:	fd 80       	ldd	r15, Y+5	; 0x05
    42ca:	0c 81       	ldd	r16, Y+4	; 0x04
    42cc:	1b 81       	ldd	r17, Y+3	; 0x03
    42ce:	aa 81       	ldd	r26, Y+2	; 0x02
    42d0:	b9 81       	ldd	r27, Y+1	; 0x01
    42d2:	ce 0f       	add	r28, r30
    42d4:	d1 1d       	adc	r29, r1
    42d6:	0f b6       	in	r0, 0x3f	; 63
    42d8:	f8 94       	cli
    42da:	de bf       	out	0x3e, r29	; 62
    42dc:	0f be       	out	0x3f, r0	; 63
    42de:	cd bf       	out	0x3d, r28	; 61
    42e0:	ed 01       	movw	r28, r26
    42e2:	08 95       	ret

000042e4 <itoa>:
    42e4:	fb 01       	movw	r30, r22
    42e6:	9f 01       	movw	r18, r30
    42e8:	e8 94       	clt
    42ea:	42 30       	cpi	r20, 0x02	; 2
    42ec:	c4 f0       	brlt	.+48     	; 0x431e <itoa+0x3a>
    42ee:	45 32       	cpi	r20, 0x25	; 37
    42f0:	b4 f4       	brge	.+44     	; 0x431e <itoa+0x3a>
    42f2:	4a 30       	cpi	r20, 0x0A	; 10
    42f4:	29 f4       	brne	.+10     	; 0x4300 <itoa+0x1c>
    42f6:	97 fb       	bst	r25, 7
    42f8:	1e f4       	brtc	.+6      	; 0x4300 <itoa+0x1c>
    42fa:	90 95       	com	r25
    42fc:	81 95       	neg	r24
    42fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4300:	64 2f       	mov	r22, r20
    4302:	77 27       	eor	r23, r23
    4304:	0e 94 a3 21 	call	0x4346	; 0x4346 <__udivmodhi4>
    4308:	80 5d       	subi	r24, 0xD0	; 208
    430a:	8a 33       	cpi	r24, 0x3A	; 58
    430c:	0c f0       	brlt	.+2      	; 0x4310 <itoa+0x2c>
    430e:	89 5d       	subi	r24, 0xD9	; 217
    4310:	81 93       	st	Z+, r24
    4312:	cb 01       	movw	r24, r22
    4314:	00 97       	sbiw	r24, 0x00	; 0
    4316:	a1 f7       	brne	.-24     	; 0x4300 <itoa+0x1c>
    4318:	16 f4       	brtc	.+4      	; 0x431e <itoa+0x3a>
    431a:	5d e2       	ldi	r21, 0x2D	; 45
    431c:	51 93       	st	Z+, r21
    431e:	10 82       	st	Z, r1
    4320:	c9 01       	movw	r24, r18
    4322:	0c 94 93 21 	jmp	0x4326	; 0x4326 <strrev>

00004326 <strrev>:
    4326:	dc 01       	movw	r26, r24
    4328:	fc 01       	movw	r30, r24
    432a:	67 2f       	mov	r22, r23
    432c:	71 91       	ld	r23, Z+
    432e:	77 23       	and	r23, r23
    4330:	e1 f7       	brne	.-8      	; 0x432a <strrev+0x4>
    4332:	32 97       	sbiw	r30, 0x02	; 2
    4334:	04 c0       	rjmp	.+8      	; 0x433e <strrev+0x18>
    4336:	7c 91       	ld	r23, X
    4338:	6d 93       	st	X+, r22
    433a:	70 83       	st	Z, r23
    433c:	62 91       	ld	r22, -Z
    433e:	ae 17       	cp	r26, r30
    4340:	bf 07       	cpc	r27, r31
    4342:	c8 f3       	brcs	.-14     	; 0x4336 <strrev+0x10>
    4344:	08 95       	ret

00004346 <__udivmodhi4>:
    4346:	aa 1b       	sub	r26, r26
    4348:	bb 1b       	sub	r27, r27
    434a:	51 e1       	ldi	r21, 0x11	; 17
    434c:	07 c0       	rjmp	.+14     	; 0x435c <__udivmodhi4_ep>

0000434e <__udivmodhi4_loop>:
    434e:	aa 1f       	adc	r26, r26
    4350:	bb 1f       	adc	r27, r27
    4352:	a6 17       	cp	r26, r22
    4354:	b7 07       	cpc	r27, r23
    4356:	10 f0       	brcs	.+4      	; 0x435c <__udivmodhi4_ep>
    4358:	a6 1b       	sub	r26, r22
    435a:	b7 0b       	sbc	r27, r23

0000435c <__udivmodhi4_ep>:
    435c:	88 1f       	adc	r24, r24
    435e:	99 1f       	adc	r25, r25
    4360:	5a 95       	dec	r21
    4362:	a9 f7       	brne	.-22     	; 0x434e <__udivmodhi4_loop>
    4364:	80 95       	com	r24
    4366:	90 95       	com	r25
    4368:	bc 01       	movw	r22, r24
    436a:	cd 01       	movw	r24, r26
    436c:	08 95       	ret

0000436e <_exit>:
    436e:	f8 94       	cli

00004370 <__stop_program>:
    4370:	ff cf       	rjmp	.-2      	; 0x4370 <__stop_program>
