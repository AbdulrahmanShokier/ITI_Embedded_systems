
ADAS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  000035e2  00003676  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080019c  0080019c  000037b2  2**0
                  ALLOC
  3 .stab         00003cc0  00000000  00000000  000037b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019a7  00000000  00000000  00007474  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00008fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  000091eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000b875  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000cd55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000e000  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000e4de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ee88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 af 08 	jmp	0x115e	; 0x115e <__vector_4>
      14:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__vector_10>
      2c:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3b       	cpi	r26, 0xBA	; 186
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8b 1a 	call	0x3516	; 0x3516 <main>
      8a:	0c 94 ef 1a 	jmp	0x35de	; 0x35de <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e8       	ldi	r26, 0x83	; 131
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e8       	ldi	r24, 0x83	; 131
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e8       	ldi	r22, 0x83	; 131
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e5 57       	subi	r30, 0x75	; 117
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <MUART_voidUartInit>:
#include <util/delay.h>
#include <stdlib.h>


void MUART_voidUartInit (void)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <MUART_voidUartInit+0x6>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	u16 UBRR;
	/* choose baud rate */
#if BAUD_RATE == 2400 || BAUD_RATE == 4800 || BAUD_RATE == 9600
	UBRR = (F_CPU/(16*(u32)BAUD_RATE))-1;
     e98:	83 e3       	ldi	r24, 0x33	; 51
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	89 83       	std	Y+1, r24	; 0x01
	UBRRL = (u8)UBRR;
     ea0:	e9 e2       	ldi	r30, 0x29	; 41
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	80 83       	st	Z, r24
	UBRRH = (u8)(UBRR>>8);
     ea8:	e0 e4       	ldi	r30, 0x40	; 64
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	89 2f       	mov	r24, r25
     eb2:	99 27       	eor	r25, r25
     eb4:	80 83       	st	Z, r24
#else
	#error "Select correct BAUD_RATE"
#endif

	/*Enable UART TRANSMITTER*/
	SET_BIT(UCSRB,TXEN);
     eb6:	aa e2       	ldi	r26, 0x2A	; 42
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	ea e2       	ldi	r30, 0x2A	; 42
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	88 60       	ori	r24, 0x08	; 8
     ec2:	8c 93       	st	X, r24
	/*Enable UART RECEIVER*/
	SET_BIT(UCSRB,RXEN);
     ec4:	aa e2       	ldi	r26, 0x2A	; 42
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ea e2       	ldi	r30, 0x2A	; 42
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 61       	ori	r24, 0x10	; 16
     ed0:	8c 93       	st	X, r24

	/*SELECT UCSRC REG*/
	SET_BIT(UCSRC, URSEL);
     ed2:	a0 e4       	ldi	r26, 0x40	; 64
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e0 e4       	ldi	r30, 0x40	; 64
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 68       	ori	r24, 0x80	; 128
     ede:	8c 93       	st	X, r24
	/* Choose  8-BITS number of bits of char size*/
	SET_BIT(UCSRC, UCSZ0);
     ee0:	a0 e4       	ldi	r26, 0x40	; 64
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e0 e4       	ldi	r30, 0x40	; 64
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	82 60       	ori	r24, 0x02	; 2
     eec:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
     eee:	a0 e4       	ldi	r26, 0x40	; 64
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e0 e4       	ldi	r30, 0x40	; 64
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	84 60       	ori	r24, 0x04	; 4
     efa:	8c 93       	st	X, r24
	CLR_BIT(UCSRB, UCSZ2);
     efc:	aa e2       	ldi	r26, 0x2A	; 42
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ea e2       	ldi	r30, 0x2A	; 42
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	8b 7f       	andi	r24, 0xFB	; 251
     f08:	8c 93       	st	X, r24

}
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <MUART_voidUartSend>:

void MUART_voidUartSend(u8 A_u8Data)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	0f 92       	push	r0
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	89 83       	std	Y+1, r24	; 0x01
	/* WAIT FOR UDR BUFFER TO BE EMPTY*/
	while(GET_BIT(UCSRA,UDRE) == 0);
     f20:	eb e2       	ldi	r30, 0x2B	; 43
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	82 95       	swap	r24
     f28:	86 95       	lsr	r24
     f2a:	87 70       	andi	r24, 0x07	; 7
     f2c:	88 2f       	mov	r24, r24
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	81 70       	andi	r24, 0x01	; 1
     f32:	90 70       	andi	r25, 0x00	; 0
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	a1 f3       	breq	.-24     	; 0xf20 <MUART_voidUartSend+0xc>
	UDR = A_u8Data;
     f38:	ec e2       	ldi	r30, 0x2C	; 44
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	80 83       	st	Z, r24
}
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <MUART_u8UartRecieve>:

u8 MUART_u8UartRecieve(void)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	/* WAIT FOR UDR BUFFER TO BE filled with unread data*/
	while(GET_BIT(UCSRA,RXC) == 0);
     f50:	eb e2       	ldi	r30, 0x2B	; 43
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	88 23       	and	r24, r24
     f58:	dc f7       	brge	.-10     	; 0xf50 <MUART_u8UartRecieve+0x8>
	return UDR;
     f5a:	ec e2       	ldi	r30, 0x2C	; 44
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
}
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <MUART_voidUartSendString>:

void MUART_voidUartSendString(u8* A_pu8Str)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <MUART_voidUartSendString+0x6>
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	0a c0       	rjmp	.+20     	; 0xf8a <MUART_voidUartSendString+0x24>
	while(*A_pu8Str != '\0')
	{
		MUART_voidUartSend(*A_pu8Str);
     f76:	e9 81       	ldd	r30, Y+1	; 0x01
     f78:	fa 81       	ldd	r31, Y+2	; 0x02
     f7a:	80 81       	ld	r24, Z
     f7c:	0e 94 8a 07 	call	0xf14	; 0xf14 <MUART_voidUartSend>
		A_pu8Str++;
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void MUART_voidUartSendString(u8* A_pu8Str)
{
	while(*A_pu8Str != '\0')
     f8a:	e9 81       	ldd	r30, Y+1	; 0x01
     f8c:	fa 81       	ldd	r31, Y+2	; 0x02
     f8e:	80 81       	ld	r24, Z
     f90:	88 23       	and	r24, r24
     f92:	89 f7       	brne	.-30     	; 0xf76 <MUART_voidUartSendString+0x10>
	{
		MUART_voidUartSend(*A_pu8Str);
		A_pu8Str++;
	}
	MUART_voidUartSend('\n');
     f94:	8a e0       	ldi	r24, 0x0A	; 10
     f96:	0e 94 8a 07 	call	0xf14	; 0xf14 <MUART_voidUartSend>

}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <TMR2_VoidInit>:

static void (* GP_OvfCallBack)(void);
static void (* GP_OCMCallBack)(void);

void TMR2_VoidInit(void)
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
#if TIMER2_Mood==Normal_MOOD
	clear_bit(TIMER2_TCCR2,WGM20);
     fac:	a5 e4       	ldi	r26, 0x45	; 69
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e5 e4       	ldi	r30, 0x45	; 69
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8f 7b       	andi	r24, 0xBF	; 191
     fb8:	8c 93       	st	X, r24
	clear_bit(TIMER2_TCCR2,WGM21);
     fba:	a5 e4       	ldi	r26, 0x45	; 69
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e5 e4       	ldi	r30, 0x45	; 69
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	87 7f       	andi	r24, 0xF7	; 247
     fc6:	8c 93       	st	X, r24
#elif Prescaler_Mood==NO_PRESCALER_TIMER2
	set_bit(TIMER2_TCCR2,CS20);
	clear_bit(TIMER2_TCCR2,CS21);
	clear_bit(TIMER2_TCCR2,CS22);
#elif Prescaler_Mood==PRESCALER_TIMER2_8
	clear_bit(TIMER2_TCCR2,CS20);
     fc8:	a5 e4       	ldi	r26, 0x45	; 69
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e5 e4       	ldi	r30, 0x45	; 69
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8e 7f       	andi	r24, 0xFE	; 254
     fd4:	8c 93       	st	X, r24
	set_bit(TIMER2_TCCR2,CS21);
     fd6:	a5 e4       	ldi	r26, 0x45	; 69
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e5 e4       	ldi	r30, 0x45	; 69
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	82 60       	ori	r24, 0x02	; 2
     fe2:	8c 93       	st	X, r24
	clear_bit(TIMER2_TCCR2,CS22);
     fe4:	a5 e4       	ldi	r26, 0x45	; 69
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e5 e4       	ldi	r30, 0x45	; 69
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8b 7f       	andi	r24, 0xFB	; 251
     ff0:	8c 93       	st	X, r24
	set_bit(TIMER2_TCCR2,CS22);

#else
#endif
#if OC2_MOOD==Normal_port_operation
	clear_bit(TIMER2_TCCR2,COM20);
     ff2:	a5 e4       	ldi	r26, 0x45	; 69
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e5 e4       	ldi	r30, 0x45	; 69
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	8f 7e       	andi	r24, 0xEF	; 239
     ffe:	8c 93       	st	X, r24
	clear_bit(TIMER2_TCCR2,COM21);
    1000:	a5 e4       	ldi	r26, 0x45	; 69
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e4       	ldi	r30, 0x45	; 69
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8f 7d       	andi	r24, 0xDF	; 223
    100c:	8c 93       	st	X, r24
	set_bit(TIMER2_TCCR2,COM21);
#else
#endif


}
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <TMR2_VoidOVFInterruptEnable>:
void TMR2_VoidOVFInterruptEnable(void)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMER2_TIMSK,TOIE2);
    101c:	a9 e5       	ldi	r26, 0x59	; 89
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e9 e5       	ldi	r30, 0x59	; 89
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 64       	ori	r24, 0x40	; 64
    1028:	8c 93       	st	X, r24
}
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <TMR2_VoidOCMInterruptEnable>:
void TMR2_VoidOCMInterruptEnable(void)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMER2_TIMSK,OCIE2);
    1038:	a9 e5       	ldi	r26, 0x59	; 89
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e9 e5       	ldi	r30, 0x59	; 89
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	80 68       	ori	r24, 0x80	; 128
    1044:	8c 93       	st	X, r24
}
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <TMR2_VoidOVFInterruptDisable>:
void TMR2_VoidOVFInterruptDisable(void)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
	clear_bit(TIMER2_TIMSK,TOIE2);
    1054:	a9 e5       	ldi	r26, 0x59	; 89
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e9 e5       	ldi	r30, 0x59	; 89
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8f 7b       	andi	r24, 0xBF	; 191
    1060:	8c 93       	st	X, r24
}
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <TMR2_VoidOCMInterruptDisable>:
void TMR2_VoidOCMInterruptDisable(void)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
	clear_bit(TIMER2_TIMSK,OCIE2);
    1070:	a9 e5       	ldi	r26, 0x59	; 89
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e9 e5       	ldi	r30, 0x59	; 89
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	8f 77       	andi	r24, 0x7F	; 127
    107c:	8c 93       	st	X, r24
}
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <TMR2_VoidSetPreload>:
void TMR2_VoidSetPreload(u8 A_u8PreLoading_Value)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	0f 92       	push	r0
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	89 83       	std	Y+1, r24	; 0x01
	TIMER2_TCNT2=A_u8PreLoading_Value;
    1090:	e4 e4       	ldi	r30, 0x44	; 68
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	80 83       	st	Z, r24
}
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <TMR2_VoidSetOCMValue>:
void TMR2_VoidSetOCMValue(u8 A_u8CompareMatchValue)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	0f 92       	push	r0
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	89 83       	std	Y+1, r24	; 0x01
	TIMER2_OCR2=A_u8CompareMatchValue;
    10ac:	e3 e4       	ldi	r30, 0x43	; 67
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	80 83       	st	Z, r24
}
    10b4:	0f 90       	pop	r0
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <TMR2_OFV_SetCallBack>:
void TMR2_OFV_SetCallBack(void(*ptr)(void))
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <TMR2_OFV_SetCallBack+0x6>
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	9a 83       	std	Y+2, r25	; 0x02
    10c8:	89 83       	std	Y+1, r24	; 0x01
	GP_OvfCallBack=ptr;
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	9a 81       	ldd	r25, Y+2	; 0x02
    10ce:	90 93 9d 01 	sts	0x019D, r25
    10d2:	80 93 9c 01 	sts	0x019C, r24
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <TMR2_OCM_SetCallBack>:
void TMR2_OCM_SetCallBack(void(*ptr)(void))
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <TMR2_OCM_SetCallBack+0x6>
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	9a 83       	std	Y+2, r25	; 0x02
    10ec:	89 83       	std	Y+1, r24	; 0x01
	GP_OCMCallBack=ptr;
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	9a 81       	ldd	r25, Y+2	; 0x02
    10f2:	90 93 9f 01 	sts	0x019F, r25
    10f6:	80 93 9e 01 	sts	0x019E, r24
}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <__vector_5>:
//OVF
void __vector_5 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_5 (void){
    1104:	1f 92       	push	r1
    1106:	0f 92       	push	r0
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	0f 92       	push	r0
    110c:	11 24       	eor	r1, r1
    110e:	2f 93       	push	r18
    1110:	3f 93       	push	r19
    1112:	4f 93       	push	r20
    1114:	5f 93       	push	r21
    1116:	6f 93       	push	r22
    1118:	7f 93       	push	r23
    111a:	8f 93       	push	r24
    111c:	9f 93       	push	r25
    111e:	af 93       	push	r26
    1120:	bf 93       	push	r27
    1122:	ef 93       	push	r30
    1124:	ff 93       	push	r31
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62

		GP_OvfCallBack();
    112e:	e0 91 9c 01 	lds	r30, 0x019C
    1132:	f0 91 9d 01 	lds	r31, 0x019D
    1136:	09 95       	icall
}
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	ff 91       	pop	r31
    113e:	ef 91       	pop	r30
    1140:	bf 91       	pop	r27
    1142:	af 91       	pop	r26
    1144:	9f 91       	pop	r25
    1146:	8f 91       	pop	r24
    1148:	7f 91       	pop	r23
    114a:	6f 91       	pop	r22
    114c:	5f 91       	pop	r21
    114e:	4f 91       	pop	r20
    1150:	3f 91       	pop	r19
    1152:	2f 91       	pop	r18
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	0f 90       	pop	r0
    115a:	1f 90       	pop	r1
    115c:	18 95       	reti

0000115e <__vector_4>:
//OCM
void __vector_4 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_4 (void){
    115e:	1f 92       	push	r1
    1160:	0f 92       	push	r0
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	0f 92       	push	r0
    1166:	11 24       	eor	r1, r1
    1168:	2f 93       	push	r18
    116a:	3f 93       	push	r19
    116c:	4f 93       	push	r20
    116e:	5f 93       	push	r21
    1170:	6f 93       	push	r22
    1172:	7f 93       	push	r23
    1174:	8f 93       	push	r24
    1176:	9f 93       	push	r25
    1178:	af 93       	push	r26
    117a:	bf 93       	push	r27
    117c:	ef 93       	push	r30
    117e:	ff 93       	push	r31
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62

		GP_OCMCallBack();
    1188:	e0 91 9e 01 	lds	r30, 0x019E
    118c:	f0 91 9f 01 	lds	r31, 0x019F
    1190:	09 95       	icall

}
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	ff 91       	pop	r31
    1198:	ef 91       	pop	r30
    119a:	bf 91       	pop	r27
    119c:	af 91       	pop	r26
    119e:	9f 91       	pop	r25
    11a0:	8f 91       	pop	r24
    11a2:	7f 91       	pop	r23
    11a4:	6f 91       	pop	r22
    11a6:	5f 91       	pop	r21
    11a8:	4f 91       	pop	r20
    11aa:	3f 91       	pop	r19
    11ac:	2f 91       	pop	r18
    11ae:	0f 90       	pop	r0
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	0f 90       	pop	r0
    11b4:	1f 90       	pop	r1
    11b6:	18 95       	reti

000011b8 <MTIMER1_voidTimer1Init>:
void (* GP_OvCallback)(void);
void (* GP_CM1ACallback)(void);
void (* GP_CM1BCallback)(void);

void MTIMER1_voidTimer1Init(void)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	clear_bit(TCCR1A,WGM10);
	clear_bit(TCCR1A,WGM11);
	set_bit(TCCR1B,WGM12);
	set_bit(TCCR1B,WGM13);
#elif Timer1Mode==FastPwm_ICR1
	clear_bit(TCCR1A,WGM10);
    11c0:	af e4       	ldi	r26, 0x4F	; 79
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	ef e4       	ldi	r30, 0x4F	; 79
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	8e 7f       	andi	r24, 0xFE	; 254
    11cc:	8c 93       	st	X, r24
	set_bit(TCCR1A,WGM11);
    11ce:	af e4       	ldi	r26, 0x4F	; 79
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	ef e4       	ldi	r30, 0x4F	; 79
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	82 60       	ori	r24, 0x02	; 2
    11da:	8c 93       	st	X, r24
	set_bit(TCCR1B,WGM12);
    11dc:	ae e4       	ldi	r26, 0x4E	; 78
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ee e4       	ldi	r30, 0x4E	; 78
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	88 60       	ori	r24, 0x08	; 8
    11e8:	8c 93       	st	X, r24
	set_bit(TCCR1B,WGM13);
    11ea:	ae e4       	ldi	r26, 0x4E	; 78
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	ee e4       	ldi	r30, 0x4E	; 78
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	80 61       	ori	r24, 0x10	; 16
    11f6:	8c 93       	st	X, r24
#elif Timer1Prescaling==NoPrescaling
	set_bit(TCCR1B,CS10);
	clear_bit(TCCR1B,CS11);
	clear_bit(TCCR1B,CS12);
#elif Timer1Prescaling==Prescaling_8
	clear_bit(TCCR1B,CS10);
    11f8:	ae e4       	ldi	r26, 0x4E	; 78
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	ee e4       	ldi	r30, 0x4E	; 78
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	8e 7f       	andi	r24, 0xFE	; 254
    1204:	8c 93       	st	X, r24
	set_bit(TCCR1B,CS11);
    1206:	ae e4       	ldi	r26, 0x4E	; 78
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	ee e4       	ldi	r30, 0x4E	; 78
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	82 60       	ori	r24, 0x02	; 2
    1212:	8c 93       	st	X, r24
	clear_bit(TCCR1B,CS12);
    1214:	ae e4       	ldi	r26, 0x4E	; 78
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	ee e4       	ldi	r30, 0x4E	; 78
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	8b 7f       	andi	r24, 0xFB	; 251
    1220:	8c 93       	st	X, r24
	clear_bit(TCCR1A,COM1A1);
#elif OC1A_CompareMode==ToggleOnCM
	set_bit(TCCR1A,COM1A0);
	clear_bit(TCCR1A,COM1A1);
#elif OC1A_CompareMode==ClearOnCM
	clear_bit(TCCR1A,COM1A0);
    1222:	af e4       	ldi	r26, 0x4F	; 79
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	ef e4       	ldi	r30, 0x4F	; 79
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	8f 7b       	andi	r24, 0xBF	; 191
    122e:	8c 93       	st	X, r24
	set_bit(TCCR1A,COM1A1);
    1230:	af e4       	ldi	r26, 0x4F	; 79
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	ef e4       	ldi	r30, 0x4F	; 79
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	80 68       	ori	r24, 0x80	; 128
    123c:	8c 93       	st	X, r24
#endif

	/*Select Compare Output Mode For OC1B*/

#if OC1B_CompareMode==NormalPortOperation
	clear_bit(TCCR1A,COM1B0);
    123e:	af e4       	ldi	r26, 0x4F	; 79
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	ef e4       	ldi	r30, 0x4F	; 79
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	8f 7e       	andi	r24, 0xEF	; 239
    124a:	8c 93       	st	X, r24
	clear_bit(TCCR1A,COM1B1);
    124c:	af e4       	ldi	r26, 0x4F	; 79
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ef e4       	ldi	r30, 0x4F	; 79
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	8f 7d       	andi	r24, 0xDF	; 223
    1258:	8c 93       	st	X, r24
	set_bit(TCCR1A,COM1B0);
	set_bit(TCCR1A,COM1B1);
#else
#endif

}
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <MTIMER1_voidSetPreload>:

void MTIMER1_voidSetPreload(u16 A_u16PreloadValue)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <MTIMER1_voidSetPreload+0x6>
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	9a 83       	std	Y+2, r25	; 0x02
    126c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=A_u16PreloadValue;
    126e:	ec e4       	ldi	r30, 0x4C	; 76
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	80 83       	st	Z, r24
}
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <MTIMER1_voidSetOCR1A>:
void MTIMER1_voidSetOCR1A(u16 A_u16OCR1AValue)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	00 d0       	rcall	.+0      	; 0x128a <MTIMER1_voidSetOCR1A+0x6>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	9a 83       	std	Y+2, r25	; 0x02
    1290:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=A_u16OCR1AValue;
    1292:	ea e4       	ldi	r30, 0x4A	; 74
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	9a 81       	ldd	r25, Y+2	; 0x02
    129a:	91 83       	std	Z+1, r25	; 0x01
    129c:	80 83       	st	Z, r24
}
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <MTIMER1_voidSetOCR1B>:
void MTIMER1_voidSetOCR1B(u16 A_u16OCR1BValue)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <MTIMER1_voidSetOCR1B+0x6>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	9a 83       	std	Y+2, r25	; 0x02
    12b4:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=A_u16OCR1BValue;
    12b6:	e8 e4       	ldi	r30, 0x48	; 72
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	91 83       	std	Z+1, r25	; 0x01
    12c0:	80 83       	st	Z, r24
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <MTIMER1_voidSetICR1>:
void MTIMER1_voidSetICR1(u16 A_u16ICR1Value)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <MTIMER1_voidSetICR1+0x6>
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	9a 83       	std	Y+2, r25	; 0x02
    12d8:	89 83       	std	Y+1, r24	; 0x01
	ICR1=A_u16ICR1Value;
    12da:	e6 e4       	ldi	r30, 0x46	; 70
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	9a 81       	ldd	r25, Y+2	; 0x02
    12e2:	91 83       	std	Z+1, r25	; 0x01
    12e4:	80 83       	st	Z, r24
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <MTIMER1_voidOvIntEnable>:
void MTIMER1_voidOvIntEnable(void)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMSK,TOIE1);
    12f8:	a9 e5       	ldi	r26, 0x59	; 89
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e9 e5       	ldi	r30, 0x59	; 89
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	84 60       	ori	r24, 0x04	; 4
    1304:	8c 93       	st	X, r24
}
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <MTIMER1_voidOCR1AIntEnable>:
void MTIMER1_voidOCR1AIntEnable(void)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMSK,OCIE1A);
    1314:	a9 e5       	ldi	r26, 0x59	; 89
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e9 e5       	ldi	r30, 0x59	; 89
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	80 61       	ori	r24, 0x10	; 16
    1320:	8c 93       	st	X, r24
}
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <MTIMER1_voidOCR1BIntEnable>:
void MTIMER1_voidOCR1BIntEnable(void)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMSK,OCIE1B);
    1330:	a9 e5       	ldi	r26, 0x59	; 89
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e9 e5       	ldi	r30, 0x59	; 89
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	88 60       	ori	r24, 0x08	; 8
    133c:	8c 93       	st	X, r24
}
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <MTIMER1_voidICUIntEnable>:
void MTIMER1_voidICUIntEnable(void)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMSK,TICIE1);
    134c:	a9 e5       	ldi	r26, 0x59	; 89
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e9 e5       	ldi	r30, 0x59	; 89
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	80 62       	ori	r24, 0x20	; 32
    1358:	8c 93       	st	X, r24
}
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <MTIMER1_voidOvCallBack>:
void MTIMER1_voidOvCallBack(void (*ptr)(void))
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <MTIMER1_voidOvCallBack+0x6>
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	9a 83       	std	Y+2, r25	; 0x02
    136c:	89 83       	std	Y+1, r24	; 0x01
	GP_OvCallback=ptr;
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	90 93 b7 01 	sts	0x01B7, r25
    1376:	80 93 b6 01 	sts	0x01B6, r24
}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <MTIMER1_voidOCR1ACallBack>:
void MTIMER1_voidOCR1ACallBack(void (*ptr)(void))
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	00 d0       	rcall	.+0      	; 0x138a <MTIMER1_voidOCR1ACallBack+0x6>
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
	GP_CM1ACallback=ptr;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	90 93 b5 01 	sts	0x01B5, r25
    139a:	80 93 b4 01 	sts	0x01B4, r24
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <MTIMER1_voidOCR1BCallBack>:
void MTIMER1_voidOCR1BCallBack(void (*ptr)(void))
{
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <MTIMER1_voidOCR1BCallBack+0x6>
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	9a 83       	std	Y+2, r25	; 0x02
    13b4:	89 83       	std	Y+1, r24	; 0x01
	GP_CM1BCallback=ptr;
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ba:	90 93 b9 01 	sts	0x01B9, r25
    13be:	80 93 b8 01 	sts	0x01B8, r24
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <TMR0_VoidInit>:

static void (* GP_OvfCallBack)(void);
static void (* GP_OCMCallBack)(void);

void TMR0_VoidInit(void)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_Mood==Normal_MOOD
	clear_bit(TIMER0_TCCR0,WGM00);
	clear_bit(TIMER0_TCCR0,WGM01);

#elif TIMER0_Mood==CTC_MOOD
	clear_bit(TIMER0_TCCR0,WGM00);
    13d4:	a3 e5       	ldi	r26, 0x53	; 83
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e3 e5       	ldi	r30, 0x53	; 83
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8f 7b       	andi	r24, 0xBF	; 191
    13e0:	8c 93       	st	X, r24
	set_bit(TIMER0_TCCR0,WGM01);
    13e2:	a3 e5       	ldi	r26, 0x53	; 83
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e3 e5       	ldi	r30, 0x53	; 83
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	88 60       	ori	r24, 0x08	; 8
    13ee:	8c 93       	st	X, r24
#elif Prescaler_Mood==NO_PRESCALER_TIMER0
	set_bit(TIMER0_TCCR0,CS00);
	clear_bit(TIMER0_TCCR0,CS01);
	clear_bit(TIMER0_TCCR0,CS02);
#elif Prescaler_Mood==PRESCALER_TIMER0_8
	clear_bit(TIMER0_TCCR0,CS00);
    13f0:	a3 e5       	ldi	r26, 0x53	; 83
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e3 e5       	ldi	r30, 0x53	; 83
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	8e 7f       	andi	r24, 0xFE	; 254
    13fc:	8c 93       	st	X, r24
	set_bit(TIMER0_TCCR0,CS01);
    13fe:	a3 e5       	ldi	r26, 0x53	; 83
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e3 e5       	ldi	r30, 0x53	; 83
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	82 60       	ori	r24, 0x02	; 2
    140a:	8c 93       	st	X, r24
	clear_bit(TIMER0_TCCR0,CS02);
    140c:	a3 e5       	ldi	r26, 0x53	; 83
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e3 e5       	ldi	r30, 0x53	; 83
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8b 7f       	andi	r24, 0xFB	; 251
    1418:	8c 93       	st	X, r24
	set_bit(TIMER0_TCCR0,CS02);

#else
#endif
#if OC0_MOOD==Normal_port_operation
	clear_bit(TIMER0_TCCR0,COM00);
    141a:	a3 e5       	ldi	r26, 0x53	; 83
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e3 e5       	ldi	r30, 0x53	; 83
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8f 7e       	andi	r24, 0xEF	; 239
    1426:	8c 93       	st	X, r24
	clear_bit(TIMER0_TCCR0,COM01);
    1428:	a3 e5       	ldi	r26, 0x53	; 83
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e3 e5       	ldi	r30, 0x53	; 83
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8f 7d       	andi	r24, 0xDF	; 223
    1434:	8c 93       	st	X, r24
	set_bit(TIMER0_TCCR0,COM01);
#else
#endif


}
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <TMR0_VoidOVFInterruptEnable>:
void TMR0_VoidOVFInterruptEnable(void)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMER0_TIMSK,TOIE0);
    1444:	a9 e5       	ldi	r26, 0x59	; 89
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e9 e5       	ldi	r30, 0x59	; 89
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	81 60       	ori	r24, 0x01	; 1
    1450:	8c 93       	st	X, r24
}
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <TMR0_VoidOCMInterruptEnable>:
void TMR0_VoidOCMInterruptEnable(void)
{
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
	set_bit(TIMER0_TIMSK,OCIE0);
    1460:	a9 e5       	ldi	r26, 0x59	; 89
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e9 e5       	ldi	r30, 0x59	; 89
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	82 60       	ori	r24, 0x02	; 2
    146c:	8c 93       	st	X, r24
}
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <TMR0_VoidOVFInterruptDisable>:
void TMR0_VoidOVFInterruptDisable(void)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
	clear_bit(TIMER0_TIMSK,TOIE0);
    147c:	a9 e5       	ldi	r26, 0x59	; 89
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e9 e5       	ldi	r30, 0x59	; 89
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	8e 7f       	andi	r24, 0xFE	; 254
    1488:	8c 93       	st	X, r24
}
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <TMR0_VoidOCMInterruptDisable>:
void TMR0_VoidOCMInterruptDisable(void)
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
	clear_bit(TIMER0_TIMSK,OCIE0);
    1498:	a9 e5       	ldi	r26, 0x59	; 89
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e9 e5       	ldi	r30, 0x59	; 89
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	8d 7f       	andi	r24, 0xFD	; 253
    14a4:	8c 93       	st	X, r24
}
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <TMR0_VoidSetPreload>:
void TMR0_VoidSetPreload(u8 A_u8PreLoading_Value)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	0f 92       	push	r0
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0=A_u8PreLoading_Value;
    14b8:	e2 e5       	ldi	r30, 0x52	; 82
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	80 83       	st	Z, r24
}
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <TMR0_VoidSetOCMValue>:
void TMR0_VoidSetOCMValue(u8 A_u8CompareMatchValue)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0=A_u8CompareMatchValue;
    14d4:	ec e5       	ldi	r30, 0x5C	; 92
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	80 83       	st	Z, r24
}
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <TMR0_OFV_SetCallBack>:
void TMR0_OFV_SetCallBack(void(*ptr)(void))
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <TMR0_OFV_SetCallBack+0x6>
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	9a 83       	std	Y+2, r25	; 0x02
    14f0:	89 83       	std	Y+1, r24	; 0x01
	GP_OvfCallBack=ptr;
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	90 93 a1 01 	sts	0x01A1, r25
    14fa:	80 93 a0 01 	sts	0x01A0, r24
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <TMR0_OCM_SetCallBack>:
void TMR0_OCM_SetCallBack(void(*ptr)(void))
{
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	00 d0       	rcall	.+0      	; 0x150e <TMR0_OCM_SetCallBack+0x6>
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	89 83       	std	Y+1, r24	; 0x01
	GP_OCMCallBack=ptr;
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	9a 81       	ldd	r25, Y+2	; 0x02
    151a:	90 93 a3 01 	sts	0x01A3, r25
    151e:	80 93 a2 01 	sts	0x01A2, r24
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <__vector_11>:
//OVF
void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_11 (void){
    152c:	1f 92       	push	r1
    152e:	0f 92       	push	r0
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	0f 92       	push	r0
    1534:	11 24       	eor	r1, r1
    1536:	2f 93       	push	r18
    1538:	3f 93       	push	r19
    153a:	4f 93       	push	r20
    153c:	5f 93       	push	r21
    153e:	6f 93       	push	r22
    1540:	7f 93       	push	r23
    1542:	8f 93       	push	r24
    1544:	9f 93       	push	r25
    1546:	af 93       	push	r26
    1548:	bf 93       	push	r27
    154a:	ef 93       	push	r30
    154c:	ff 93       	push	r31
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62

		GP_OvfCallBack();
    1556:	e0 91 a0 01 	lds	r30, 0x01A0
    155a:	f0 91 a1 01 	lds	r31, 0x01A1
    155e:	09 95       	icall
}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	ff 91       	pop	r31
    1566:	ef 91       	pop	r30
    1568:	bf 91       	pop	r27
    156a:	af 91       	pop	r26
    156c:	9f 91       	pop	r25
    156e:	8f 91       	pop	r24
    1570:	7f 91       	pop	r23
    1572:	6f 91       	pop	r22
    1574:	5f 91       	pop	r21
    1576:	4f 91       	pop	r20
    1578:	3f 91       	pop	r19
    157a:	2f 91       	pop	r18
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	0f 90       	pop	r0
    1582:	1f 90       	pop	r1
    1584:	18 95       	reti

00001586 <__vector_10>:
//OCM
void __vector_10 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_10 (void){
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	11 24       	eor	r1, r1
    1590:	2f 93       	push	r18
    1592:	3f 93       	push	r19
    1594:	4f 93       	push	r20
    1596:	5f 93       	push	r21
    1598:	6f 93       	push	r22
    159a:	7f 93       	push	r23
    159c:	8f 93       	push	r24
    159e:	9f 93       	push	r25
    15a0:	af 93       	push	r26
    15a2:	bf 93       	push	r27
    15a4:	ef 93       	push	r30
    15a6:	ff 93       	push	r31
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62

		GP_OCMCallBack();
    15b0:	e0 91 a2 01 	lds	r30, 0x01A2
    15b4:	f0 91 a3 01 	lds	r31, 0x01A3
    15b8:	09 95       	icall

}
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	ff 91       	pop	r31
    15c0:	ef 91       	pop	r30
    15c2:	bf 91       	pop	r27
    15c4:	af 91       	pop	r26
    15c6:	9f 91       	pop	r25
    15c8:	8f 91       	pop	r24
    15ca:	7f 91       	pop	r23
    15cc:	6f 91       	pop	r22
    15ce:	5f 91       	pop	r21
    15d0:	4f 91       	pop	r20
    15d2:	3f 91       	pop	r19
    15d4:	2f 91       	pop	r18
    15d6:	0f 90       	pop	r0
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	0f 90       	pop	r0
    15dc:	1f 90       	pop	r1
    15de:	18 95       	reti

000015e0 <MTWI_voidMasterInt>:
#define F_CPU 8000000UL
#include <util/delay.h>
#include <math.h>

void MTWI_voidMasterInt (u32 A_u32Scl)
{
    15e0:	0f 93       	push	r16
    15e2:	1f 93       	push	r17
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <MTWI_voidMasterInt+0xa>
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <MTWI_voidMasterInt+0xc>
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	69 83       	std	Y+1, r22	; 0x01
    15f2:	7a 83       	std	Y+2, r23	; 0x02
    15f4:	8b 83       	std	Y+3, r24	; 0x03
    15f6:	9c 83       	std	Y+4, r25	; 0x04
	#if   PRESCALAR == 1
	      TWSR = 0 ;  /*TWPS0 = 0 , TWPS1 = 0*/
          #define POWER_VAL  0
	#elif PRESCALAR == 4
	      TWSR = 1 ;  /*TWPS0 = 0 , TWPS1 = 1*/
    15f8:	e1 e2       	ldi	r30, 0x21	; 33
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	80 83       	st	Z, r24
	      TWSR = 3 ;  /*TWPS0 = 1 , TWPS1 = 1*/
          #define POWER_VAL  3
	#else
		#error "select correct options of PRESCALAR"
	#endif
	TWBR= (u8) (((F_CPU/A_u32Scl)-16) / (2*pow ((f64)4.0,POWER_VAL)));
    1600:	00 e2       	ldi	r16, 0x20	; 32
    1602:	10 e0       	ldi	r17, 0x00	; 0
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	92 e1       	ldi	r25, 0x12	; 18
    1608:	aa e7       	ldi	r26, 0x7A	; 122
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	29 81       	ldd	r18, Y+1	; 0x01
    160e:	3a 81       	ldd	r19, Y+2	; 0x02
    1610:	4b 81       	ldd	r20, Y+3	; 0x03
    1612:	5c 81       	ldd	r21, Y+4	; 0x04
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	0e 94 96 1a 	call	0x352c	; 0x352c <__udivmodsi4>
    161c:	da 01       	movw	r26, r20
    161e:	c9 01       	movw	r24, r18
    1620:	40 97       	sbiw	r24, 0x10	; 16
    1622:	a1 09       	sbc	r26, r1
    1624:	b1 09       	sbc	r27, r1
    1626:	bc 01       	movw	r22, r24
    1628:	cd 01       	movw	r24, r26
    162a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	bc 01       	movw	r22, r24
    1634:	cd 01       	movw	r24, r26
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	51 e4       	ldi	r21, 0x41	; 65
    163e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	f8 01       	movw	r30, r16
    1654:	80 83       	st	Z, r24
}
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	08 95       	ret

00001668 <MTWI_voidMasterSendStartCondition>:

void MTWI_voidMasterSendStartCondition (void)
{
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	2e 97       	sbiw	r28, 0x0e	; 14
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a6 e9       	ldi	r26, 0x96	; 150
    1682:	b3 e4       	ldi	r27, 0x43	; 67
    1684:	8b 87       	std	Y+11, r24	; 0x0b
    1686:	9c 87       	std	Y+12, r25	; 0x0c
    1688:	ad 87       	std	Y+13, r26	; 0x0d
    168a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168c:	6b 85       	ldd	r22, Y+11	; 0x0b
    168e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1690:	8d 85       	ldd	r24, Y+13	; 0x0d
    1692:	9e 85       	ldd	r25, Y+14	; 0x0e
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	4a ef       	ldi	r20, 0xFA	; 250
    169a:	54 e4       	ldi	r21, 0x44	; 68
    169c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	8f 83       	std	Y+7, r24	; 0x07
    16a6:	98 87       	std	Y+8, r25	; 0x08
    16a8:	a9 87       	std	Y+9, r26	; 0x09
    16aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ac:	6f 81       	ldd	r22, Y+7	; 0x07
    16ae:	78 85       	ldd	r23, Y+8	; 0x08
    16b0:	89 85       	ldd	r24, Y+9	; 0x09
    16b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e8       	ldi	r20, 0x80	; 128
    16ba:	5f e3       	ldi	r21, 0x3F	; 63
    16bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16c0:	88 23       	and	r24, r24
    16c2:	2c f4       	brge	.+10     	; 0x16ce <MTWI_voidMasterSendStartCondition+0x66>
		__ticks = 1;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	9e 83       	std	Y+6, r25	; 0x06
    16ca:	8d 83       	std	Y+5, r24	; 0x05
    16cc:	3f c0       	rjmp	.+126    	; 0x174c <MTWI_voidMasterSendStartCondition+0xe4>
	else if (__tmp > 65535)
    16ce:	6f 81       	ldd	r22, Y+7	; 0x07
    16d0:	78 85       	ldd	r23, Y+8	; 0x08
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	3f ef       	ldi	r19, 0xFF	; 255
    16da:	4f e7       	ldi	r20, 0x7F	; 127
    16dc:	57 e4       	ldi	r21, 0x47	; 71
    16de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16e2:	18 16       	cp	r1, r24
    16e4:	4c f5       	brge	.+82     	; 0x1738 <MTWI_voidMasterSendStartCondition+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e2       	ldi	r20, 0x20	; 32
    16f4:	51 e4       	ldi	r21, 0x41	; 65
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	9e 83       	std	Y+6, r25	; 0x06
    170c:	8d 83       	std	Y+5, r24	; 0x05
    170e:	0f c0       	rjmp	.+30     	; 0x172e <MTWI_voidMasterSendStartCondition+0xc6>
    1710:	88 ec       	ldi	r24, 0xC8	; 200
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	9c 83       	std	Y+4, r25	; 0x04
    1716:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <MTWI_voidMasterSendStartCondition+0xb4>
    1720:	9c 83       	std	Y+4, r25	; 0x04
    1722:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1724:	8d 81       	ldd	r24, Y+5	; 0x05
    1726:	9e 81       	ldd	r25, Y+6	; 0x06
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	9e 83       	std	Y+6, r25	; 0x06
    172c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172e:	8d 81       	ldd	r24, Y+5	; 0x05
    1730:	9e 81       	ldd	r25, Y+6	; 0x06
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	69 f7       	brne	.-38     	; 0x1710 <MTWI_voidMasterSendStartCondition+0xa8>
    1736:	14 c0       	rjmp	.+40     	; 0x1760 <MTWI_voidMasterSendStartCondition+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1738:	6f 81       	ldd	r22, Y+7	; 0x07
    173a:	78 85       	ldd	r23, Y+8	; 0x08
    173c:	89 85       	ldd	r24, Y+9	; 0x09
    173e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	9e 81       	ldd	r25, Y+6	; 0x06
    1750:	9a 83       	std	Y+2, r25	; 0x02
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	9a 81       	ldd	r25, Y+2	; 0x02
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <MTWI_voidMasterSendStartCondition+0xf0>
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
	/*wait to finish initializing and ending last operation*/
	_delay_ms (300) ;
	/*set enable bit*/
	/*set enable start condition*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    1760:	e6 e5       	ldi	r30, 0x56	; 86
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	84 ea       	ldi	r24, 0xA4	; 164
    1766:	80 83       	st	Z, r24
	/*wait to finish */
	while(read_bit(TWCR,TWINT)==0);
    1768:	e6 e5       	ldi	r30, 0x56	; 86
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	88 1f       	adc	r24, r24
    1770:	88 27       	eor	r24, r24
    1772:	88 1f       	adc	r24, r24
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	90 70       	andi	r25, 0x00	; 0
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	a9 f3       	breq	.-22     	; 0x1768 <MTWI_voidMasterSendStartCondition+0x100>
	/*start condition has been transmitted */
	while ((TWSR & 0XF8) != START_CONDITION_HAS_BEEN_TRANSMITTED);
    177e:	e1 e2       	ldi	r30, 0x21	; 33
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	88 2f       	mov	r24, r24
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	88 7f       	andi	r24, 0xF8	; 248
    178a:	90 70       	andi	r25, 0x00	; 0
    178c:	88 30       	cpi	r24, 0x08	; 8
    178e:	91 05       	cpc	r25, r1
    1790:	b1 f7       	brne	.-20     	; 0x177e <MTWI_voidMasterSendStartCondition+0x116>
}
    1792:	2e 96       	adiw	r28, 0x0e	; 14
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <MTWI_voidMasterSendRepetedStartCondition>:

void MTWI_voidMasterSendRepetedStartCondition (void)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	2e 97       	sbiw	r28, 0x0e	; 14
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a6 e9       	ldi	r26, 0x96	; 150
    17be:	b3 e4       	ldi	r27, 0x43	; 67
    17c0:	8b 87       	std	Y+11, r24	; 0x0b
    17c2:	9c 87       	std	Y+12, r25	; 0x0c
    17c4:	ad 87       	std	Y+13, r26	; 0x0d
    17c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    17cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	4a ef       	ldi	r20, 0xFA	; 250
    17d6:	54 e4       	ldi	r21, 0x44	; 68
    17d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	8f 83       	std	Y+7, r24	; 0x07
    17e2:	98 87       	std	Y+8, r25	; 0x08
    17e4:	a9 87       	std	Y+9, r26	; 0x09
    17e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17e8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ea:	78 85       	ldd	r23, Y+8	; 0x08
    17ec:	89 85       	ldd	r24, Y+9	; 0x09
    17ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e8       	ldi	r20, 0x80	; 128
    17f6:	5f e3       	ldi	r21, 0x3F	; 63
    17f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	2c f4       	brge	.+10     	; 0x180a <MTWI_voidMasterSendRepetedStartCondition+0x66>
		__ticks = 1;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9e 83       	std	Y+6, r25	; 0x06
    1806:	8d 83       	std	Y+5, r24	; 0x05
    1808:	3f c0       	rjmp	.+126    	; 0x1888 <MTWI_voidMasterSendRepetedStartCondition+0xe4>
	else if (__tmp > 65535)
    180a:	6f 81       	ldd	r22, Y+7	; 0x07
    180c:	78 85       	ldd	r23, Y+8	; 0x08
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	4f e7       	ldi	r20, 0x7F	; 127
    1818:	57 e4       	ldi	r21, 0x47	; 71
    181a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    181e:	18 16       	cp	r1, r24
    1820:	4c f5       	brge	.+82     	; 0x1874 <MTWI_voidMasterSendRepetedStartCondition+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1822:	6b 85       	ldd	r22, Y+11	; 0x0b
    1824:	7c 85       	ldd	r23, Y+12	; 0x0c
    1826:	8d 85       	ldd	r24, Y+13	; 0x0d
    1828:	9e 85       	ldd	r25, Y+14	; 0x0e
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e2       	ldi	r20, 0x20	; 32
    1830:	51 e4       	ldi	r21, 0x41	; 65
    1832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	9e 83       	std	Y+6, r25	; 0x06
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	0f c0       	rjmp	.+30     	; 0x186a <MTWI_voidMasterSendRepetedStartCondition+0xc6>
    184c:	88 ec       	ldi	r24, 0xC8	; 200
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	9c 83       	std	Y+4, r25	; 0x04
    1852:	8b 83       	std	Y+3, r24	; 0x03
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <MTWI_voidMasterSendRepetedStartCondition+0xb4>
    185c:	9c 83       	std	Y+4, r25	; 0x04
    185e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	9e 81       	ldd	r25, Y+6	; 0x06
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	69 f7       	brne	.-38     	; 0x184c <MTWI_voidMasterSendRepetedStartCondition+0xa8>
    1872:	14 c0       	rjmp	.+40     	; 0x189c <MTWI_voidMasterSendRepetedStartCondition+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1874:	6f 81       	ldd	r22, Y+7	; 0x07
    1876:	78 85       	ldd	r23, Y+8	; 0x08
    1878:	89 85       	ldd	r24, Y+9	; 0x09
    187a:	9a 85       	ldd	r25, Y+10	; 0x0a
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	9e 81       	ldd	r25, Y+6	; 0x06
    188c:	9a 83       	std	Y+2, r25	; 0x02
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <MTWI_voidMasterSendRepetedStartCondition+0xf0>
    1898:	9a 83       	std	Y+2, r25	; 0x02
    189a:	89 83       	std	Y+1, r24	; 0x01
	/*wait to finish initializing and ending last operation*/
	_delay_ms (300) ;
	/*set enable bit*/
	/*set enable start condition*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    189c:	e6 e5       	ldi	r30, 0x56	; 86
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	84 ea       	ldi	r24, 0xA4	; 164
    18a2:	80 83       	st	Z, r24
	/*wait to finish */
	while(read_bit(TWCR,TWINT)==0);
    18a4:	e6 e5       	ldi	r30, 0x56	; 86
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	88 1f       	adc	r24, r24
    18ac:	88 27       	eor	r24, r24
    18ae:	88 1f       	adc	r24, r24
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	90 70       	andi	r25, 0x00	; 0
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	a9 f3       	breq	.-22     	; 0x18a4 <MTWI_voidMasterSendRepetedStartCondition+0x100>
	/*start condition has been transmitted */
	while ((TWSR & 0XF8) != REPETED_START_CONDITION_HAS_BEEN_TRANSMITTED);
    18ba:	e1 e2       	ldi	r30, 0x21	; 33
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	88 7f       	andi	r24, 0xF8	; 248
    18c6:	90 70       	andi	r25, 0x00	; 0
    18c8:	80 31       	cpi	r24, 0x10	; 16
    18ca:	91 05       	cpc	r25, r1
    18cc:	b1 f7       	brne	.-20     	; 0x18ba <MTWI_voidMasterSendRepetedStartCondition+0x116>
}
    18ce:	2e 96       	adiw	r28, 0x0e	; 14
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <MTWI_voidMasterSendAddress>:

void MTWI_voidMasterSendAddress (u8 A_u8Address)
{
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	0f 92       	push	r0
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	89 83       	std	Y+1, r24	; 0x01
	/*store address in data register*/
	TWDR=A_u8Address;
    18ec:	e3 e2       	ldi	r30, 0x23	; 35
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	80 83       	st	Z, r24
	/*set enable bit*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    18f4:	e6 e5       	ldi	r30, 0x56	; 86
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	84 e8       	ldi	r24, 0x84	; 132
    18fa:	80 83       	st	Z, r24
	/* wait to finish */
	while(read_bit(TWCR,TWINT)==0);
    18fc:	e6 e5       	ldi	r30, 0x56	; 86
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	88 1f       	adc	r24, r24
    1904:	88 27       	eor	r24, r24
    1906:	88 1f       	adc	r24, r24
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	90 70       	andi	r25, 0x00	; 0
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	a9 f3       	breq	.-22     	; 0x18fc <MTWI_voidMasterSendAddress+0x1c>
	/* SLA+write has been transmitted and ACK has been received */
	while ((TWSR & 0XF8) != SLAVE_ADDRESS_HAS_BEEN_TRANSMITTED);
    1912:	e1 e2       	ldi	r30, 0x21	; 33
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	88 7f       	andi	r24, 0xF8	; 248
    191e:	90 70       	andi	r25, 0x00	; 0
    1920:	88 31       	cpi	r24, 0x18	; 24
    1922:	91 05       	cpc	r25, r1
    1924:	b1 f7       	brne	.-20     	; 0x1912 <MTWI_voidMasterSendAddress+0x32>
}
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <MTWI_voidMasterSendAddressToRead>:

void MTWI_voidMasterSendAddressToRead (u8 A_u8Address)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	0f 92       	push	r0
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	89 83       	std	Y+1, r24	; 0x01
	/*store address in data register*/
	TWDR=A_u8Address;
    193a:	e3 e2       	ldi	r30, 0x23	; 35
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	80 83       	st	Z, r24
	/*set enable bit*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    1942:	e6 e5       	ldi	r30, 0x56	; 86
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	84 e8       	ldi	r24, 0x84	; 132
    1948:	80 83       	st	Z, r24
	/* wait to finish */
	while(read_bit(TWCR,TWINT)==0);
    194a:	e6 e5       	ldi	r30, 0x56	; 86
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	88 1f       	adc	r24, r24
    1952:	88 27       	eor	r24, r24
    1954:	88 1f       	adc	r24, r24
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	90 70       	andi	r25, 0x00	; 0
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	a9 f3       	breq	.-22     	; 0x194a <MTWI_voidMasterSendAddressToRead+0x1c>
	/* SLA+write has been transmitted and ACK has been received */
	while ((TWSR & 0XF8) != SLAVE_ADDRESS_AND_READ_HAS_BEEN_TRANSMITTED);
    1960:	e1 e2       	ldi	r30, 0x21	; 33
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	88 7f       	andi	r24, 0xF8	; 248
    196c:	90 70       	andi	r25, 0x00	; 0
    196e:	80 34       	cpi	r24, 0x40	; 64
    1970:	91 05       	cpc	r25, r1
    1972:	b1 f7       	brne	.-20     	; 0x1960 <MTWI_voidMasterSendAddressToRead+0x32>
}
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <MTWI_voidMasterSendData>:
void MTWI_voidMasterSendData (u8 A_u8Data)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	0f 92       	push	r0
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	89 83       	std	Y+1, r24	; 0x01
	/*store data in data register*/
	TWDR=A_u8Data;
    1988:	e3 e2       	ldi	r30, 0x23	; 35
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	80 83       	st	Z, r24
	/*set enable bit*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    1990:	e6 e5       	ldi	r30, 0x56	; 86
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	84 e8       	ldi	r24, 0x84	; 132
    1996:	80 83       	st	Z, r24
	/* wait to finish */
	while(read_bit(TWCR,TWINT)==0);
    1998:	e6 e5       	ldi	r30, 0x56	; 86
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	88 1f       	adc	r24, r24
    19a0:	88 27       	eor	r24, r24
    19a2:	88 1f       	adc	r24, r24
    19a4:	88 2f       	mov	r24, r24
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	90 70       	andi	r25, 0x00	; 0
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	a9 f3       	breq	.-22     	; 0x1998 <MTWI_voidMasterSendData+0x1c>
	/* data has been transmitted and ACK has been received */
	while ((TWSR & 0XF8) != DATA_AND_ACK_HAS_BEEN_TRANSMITTED);
    19ae:	e1 e2       	ldi	r30, 0x21	; 33
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	88 2f       	mov	r24, r24
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	88 7f       	andi	r24, 0xF8	; 248
    19ba:	90 70       	andi	r25, 0x00	; 0
    19bc:	88 32       	cpi	r24, 0x28	; 40
    19be:	91 05       	cpc	r25, r1
    19c0:	b1 f7       	brne	.-20     	; 0x19ae <MTWI_voidMasterSendData+0x32>
}
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <MTWI_voidMasterReadData>:

u8 MTWI_voidMasterReadData (void)
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
	/*set enable bit*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    19d2:	e6 e5       	ldi	r30, 0x56	; 86
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	84 e8       	ldi	r24, 0x84	; 132
    19d8:	80 83       	st	Z, r24
	/* wait to finish */
	while(read_bit(TWCR,TWINT)==0);
    19da:	e6 e5       	ldi	r30, 0x56	; 86
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	88 1f       	adc	r24, r24
    19e2:	88 27       	eor	r24, r24
    19e4:	88 1f       	adc	r24, r24
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	90 70       	andi	r25, 0x00	; 0
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	a9 f3       	breq	.-22     	; 0x19da <MTWI_voidMasterReadData+0x10>
	/* data has been transmitted and ACK has been received */
	while ((TWSR & 0XF8) != DATA_READ_AND_ACK_HAS_BEEN_TRANSMITTED);
    19f0:	e1 e2       	ldi	r30, 0x21	; 33
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	88 2f       	mov	r24, r24
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	88 7f       	andi	r24, 0xF8	; 248
    19fc:	90 70       	andi	r25, 0x00	; 0
    19fe:	80 35       	cpi	r24, 0x50	; 80
    1a00:	91 05       	cpc	r25, r1
    1a02:	b1 f7       	brne	.-20     	; 0x19f0 <MTWI_voidMasterReadData+0x26>
	return TWDR ;
    1a04:	e3 e2       	ldi	r30, 0x23	; 35
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
}
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <MTWI_voidMasterReadDataWithNACK>:

u8 MTWI_voidMasterReadDataWithNACK (void)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
	/*set enable bit*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN);
    1a18:	e6 e5       	ldi	r30, 0x56	; 86
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	84 e8       	ldi	r24, 0x84	; 132
    1a1e:	80 83       	st	Z, r24
	/* wait to finish */
	while(read_bit(TWCR,TWINT)==0);
    1a20:	e6 e5       	ldi	r30, 0x56	; 86
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	88 1f       	adc	r24, r24
    1a28:	88 27       	eor	r24, r24
    1a2a:	88 1f       	adc	r24, r24
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	90 70       	andi	r25, 0x00	; 0
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	a9 f3       	breq	.-22     	; 0x1a20 <MTWI_voidMasterReadDataWithNACK+0x10>
	/* data has been transmitted and ACK has been received */
	while ((TWSR & 0XF8) != DATA_READ_AND_NACK_HAS_BEEN_TRANSMITTED);
    1a36:	e1 e2       	ldi	r30, 0x21	; 33
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	88 2f       	mov	r24, r24
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	88 7f       	andi	r24, 0xF8	; 248
    1a42:	90 70       	andi	r25, 0x00	; 0
    1a44:	88 35       	cpi	r24, 0x58	; 88
    1a46:	91 05       	cpc	r25, r1
    1a48:	b1 f7       	brne	.-20     	; 0x1a36 <MTWI_voidMasterReadDataWithNACK+0x26>
	return TWDR ;
    1a4a:	e3 e2       	ldi	r30, 0x23	; 35
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
}
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <MTWI_voidMasterSendStopCondition>:

void MTWI_voidMasterSendStopCondition (void)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
	/*set enable bit*/
	/*set enable stop condition*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1a5e:	e6 e5       	ldi	r30, 0x56	; 86
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	84 e9       	ldi	r24, 0x94	; 148
    1a64:	80 83       	st	Z, r24
}
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <MTWI_voidSlaveSetAddress>:

void MTWI_voidSlaveSetAddress (u8 A_u8Address)
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	0f 92       	push	r0
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	89 83       	std	Y+1, r24	; 0x01
	/*store address in address register*/
	TWAR=A_u8Address;
    1a78:	e2 e2       	ldi	r30, 0x22	; 34
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	80 83       	st	Z, r24
}
    1a80:	0f 90       	pop	r0
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <MTWI_voidSlaveReadData>:

u8 MTWI_voidSlaveReadData (void)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
	/*set enable bit*/
	/*set enable Ack*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1a90:	e6 e5       	ldi	r30, 0x56	; 86
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	84 ec       	ldi	r24, 0xC4	; 196
    1a96:	80 83       	st	Z, r24
	/*wait to finish*/
	while(read_bit(TWCR,TWINT)==0);
    1a98:	e6 e5       	ldi	r30, 0x56	; 86
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	88 1f       	adc	r24, r24
    1aa0:	88 27       	eor	r24, r24
    1aa2:	88 1f       	adc	r24, r24
    1aa4:	88 2f       	mov	r24, r24
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	90 70       	andi	r25, 0x00	; 0
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	a9 f3       	breq	.-22     	; 0x1a98 <MTWI_voidSlaveReadData+0x10>
	/* own SLA+W has been received and ACK has been returned */
	while ((TWSR & 0XF8) != SLAVE_ADDRESS_HAS_BEEN_RESEVED);
    1aae:	e1 e2       	ldi	r30, 0x21	; 33
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	88 2f       	mov	r24, r24
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	88 7f       	andi	r24, 0xF8	; 248
    1aba:	90 70       	andi	r25, 0x00	; 0
    1abc:	80 36       	cpi	r24, 0x60	; 96
    1abe:	91 05       	cpc	r25, r1
    1ac0:	b1 f7       	brne	.-20     	; 0x1aae <MTWI_voidSlaveReadData+0x26>
    /*set enable bit*/
	/*set enable Ack*/
	/*set interrupt enable*/
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1ac2:	e6 e5       	ldi	r30, 0x56	; 86
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	84 ec       	ldi	r24, 0xC4	; 196
    1ac8:	80 83       	st	Z, r24
	/*wait to finish*/
	while(read_bit(TWCR,TWINT)==0);
    1aca:	e6 e5       	ldi	r30, 0x56	; 86
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	88 1f       	adc	r24, r24
    1ad2:	88 27       	eor	r24, r24
    1ad4:	88 1f       	adc	r24, r24
    1ad6:	88 2f       	mov	r24, r24
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	90 70       	andi	r25, 0x00	; 0
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	a9 f3       	breq	.-22     	; 0x1aca <MTWI_voidSlaveReadData+0x42>
	/*previously addressed with own SLA+W : data has been received : ACK has been returned*/
	while ((TWSR & 0XF8) != DATA_AND_ACK_HAS_BEEN_RESEVED);
    1ae0:	e1 e2       	ldi	r30, 0x21	; 33
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	88 7f       	andi	r24, 0xF8	; 248
    1aec:	90 70       	andi	r25, 0x00	; 0
    1aee:	80 38       	cpi	r24, 0x80	; 128
    1af0:	91 05       	cpc	r25, r1
    1af2:	b1 f7       	brne	.-20     	; 0x1ae0 <MTWI_voidSlaveReadData+0x58>
	/*return data*/
	return TWDR ;
    1af4:	e3 e2       	ldi	r30, 0x23	; 35
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
}
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <MGINT_voidGlobalIntEnable>:
#include "GINT_Interface.h"
#include "GINT_Private.h"
#include "GINT_Config.h"

void MGINT_voidGlobalIntEnable(void)
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
	set_bit(GINT_SREG,GINT_GieBit);
    1b08:	af e5       	ldi	r26, 0x5F	; 95
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	ef e5       	ldi	r30, 0x5F	; 95
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	80 68       	ori	r24, 0x80	; 128
    1b14:	8c 93       	st	X, r24
}
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <MGINT_voidGlobalIntDisable>:
void MGINT_voidGlobalIntDisable(void)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
	clear_bit(GINT_SREG,GINT_GieBit);
    1b24:	af e5       	ldi	r26, 0x5F	; 95
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	ef e5       	ldi	r30, 0x5F	; 95
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	8f 77       	andi	r24, 0x7F	; 127
    1b30:	8c 93       	st	X, r24
}
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <MDIO_void_SetDir>:
#include"DIO_Config.h"
#include"DIO_Private.h"
#include"DIO_Register.h"

void MDIO_void_SetDir(u8 A_u8_PortNum,u8 A_u8_PinNum,u8 A_u8_PinDir)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	27 97       	sbiw	r28, 0x07	; 7
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	6a 83       	std	Y+2, r22	; 0x02
    1b50:	4b 83       	std	Y+3, r20	; 0x03
	if(PIN_OUTPUT==A_u8_PinDir)
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	81 30       	cpi	r24, 0x01	; 1
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <MDIO_void_SetDir+0x22>
    1b58:	6f c0       	rjmp	.+222    	; 0x1c38 <MDIO_void_SetDir+0x100>
	{
		switch(A_u8_PortNum)
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	3f 83       	std	Y+7, r19	; 0x07
    1b62:	2e 83       	std	Y+6, r18	; 0x06
    1b64:	8e 81       	ldd	r24, Y+6	; 0x06
    1b66:	9f 81       	ldd	r25, Y+7	; 0x07
    1b68:	81 30       	cpi	r24, 0x01	; 1
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	49 f1       	breq	.+82     	; 0x1bc0 <MDIO_void_SetDir+0x88>
    1b6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1b70:	3f 81       	ldd	r19, Y+7	; 0x07
    1b72:	22 30       	cpi	r18, 0x02	; 2
    1b74:	31 05       	cpc	r19, r1
    1b76:	2c f4       	brge	.+10     	; 0x1b82 <MDIO_void_SetDir+0x4a>
    1b78:	8e 81       	ldd	r24, Y+6	; 0x06
    1b7a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	61 f0       	breq	.+24     	; 0x1b98 <MDIO_void_SetDir+0x60>
    1b80:	d2 c0       	rjmp	.+420    	; 0x1d26 <MDIO_void_SetDir+0x1ee>
    1b82:	2e 81       	ldd	r18, Y+6	; 0x06
    1b84:	3f 81       	ldd	r19, Y+7	; 0x07
    1b86:	22 30       	cpi	r18, 0x02	; 2
    1b88:	31 05       	cpc	r19, r1
    1b8a:	71 f1       	breq	.+92     	; 0x1be8 <MDIO_void_SetDir+0xb0>
    1b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b90:	83 30       	cpi	r24, 0x03	; 3
    1b92:	91 05       	cpc	r25, r1
    1b94:	e9 f1       	breq	.+122    	; 0x1c10 <MDIO_void_SetDir+0xd8>
    1b96:	c7 c0       	rjmp	.+398    	; 0x1d26 <MDIO_void_SetDir+0x1ee>
		{
		case DIO_PORTA:set_bit(DIO_u8_DDRA,A_u8_PinNum);break;
    1b98:	aa e3       	ldi	r26, 0x3A	; 58
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	ea e3       	ldi	r30, 0x3A	; 58
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	48 2f       	mov	r20, r24
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	02 2e       	mov	r0, r18
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <MDIO_void_SetDir+0x7e>
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	0a 94       	dec	r0
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <MDIO_void_SetDir+0x7a>
    1bba:	84 2b       	or	r24, r20
    1bbc:	8c 93       	st	X, r24
    1bbe:	b3 c0       	rjmp	.+358    	; 0x1d26 <MDIO_void_SetDir+0x1ee>
		case DIO_PORTB:set_bit(DIO_u8_DDRB,A_u8_PinNum);break;
    1bc0:	a7 e3       	ldi	r26, 0x37	; 55
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e7 e3       	ldi	r30, 0x37	; 55
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	48 2f       	mov	r20, r24
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 2e       	mov	r0, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <MDIO_void_SetDir+0xa6>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	0a 94       	dec	r0
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <MDIO_void_SetDir+0xa2>
    1be2:	84 2b       	or	r24, r20
    1be4:	8c 93       	st	X, r24
    1be6:	9f c0       	rjmp	.+318    	; 0x1d26 <MDIO_void_SetDir+0x1ee>
		case DIO_PORTC:set_bit(DIO_u8_DDRC,A_u8_PinNum);break;
    1be8:	a4 e3       	ldi	r26, 0x34	; 52
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e4 e3       	ldi	r30, 0x34	; 52
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 2e       	mov	r0, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <MDIO_void_SetDir+0xce>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <MDIO_void_SetDir+0xca>
    1c0a:	84 2b       	or	r24, r20
    1c0c:	8c 93       	st	X, r24
    1c0e:	8b c0       	rjmp	.+278    	; 0x1d26 <MDIO_void_SetDir+0x1ee>
		case DIO_PORTD:set_bit(DIO_u8_DDRD,A_u8_PinNum);break;
    1c10:	a1 e3       	ldi	r26, 0x31	; 49
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e1 e3       	ldi	r30, 0x31	; 49
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	48 2f       	mov	r20, r24
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	02 2e       	mov	r0, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <MDIO_void_SetDir+0xf6>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	0a 94       	dec	r0
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <MDIO_void_SetDir+0xf2>
    1c32:	84 2b       	or	r24, r20
    1c34:	8c 93       	st	X, r24
    1c36:	77 c0       	rjmp	.+238    	; 0x1d26 <MDIO_void_SetDir+0x1ee>
		default:break;
		}
	}
	else if(PIN_INPUT==A_u8_PinDir)
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	88 23       	and	r24, r24
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <MDIO_void_SetDir+0x108>
    1c3e:	73 c0       	rjmp	.+230    	; 0x1d26 <MDIO_void_SetDir+0x1ee>
	{
		switch(A_u8_PortNum)
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	3d 83       	std	Y+5, r19	; 0x05
    1c48:	2c 83       	std	Y+4, r18	; 0x04
    1c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	91 05       	cpc	r25, r1
    1c52:	59 f1       	breq	.+86     	; 0x1caa <MDIO_void_SetDir+0x172>
    1c54:	2c 81       	ldd	r18, Y+4	; 0x04
    1c56:	3d 81       	ldd	r19, Y+5	; 0x05
    1c58:	22 30       	cpi	r18, 0x02	; 2
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	2c f4       	brge	.+10     	; 0x1c68 <MDIO_void_SetDir+0x130>
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	9d 81       	ldd	r25, Y+5	; 0x05
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	69 f0       	breq	.+26     	; 0x1c80 <MDIO_void_SetDir+0x148>
    1c66:	5f c0       	rjmp	.+190    	; 0x1d26 <MDIO_void_SetDir+0x1ee>
    1c68:	2c 81       	ldd	r18, Y+4	; 0x04
    1c6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c6c:	22 30       	cpi	r18, 0x02	; 2
    1c6e:	31 05       	cpc	r19, r1
    1c70:	89 f1       	breq	.+98     	; 0x1cd4 <MDIO_void_SetDir+0x19c>
    1c72:	8c 81       	ldd	r24, Y+4	; 0x04
    1c74:	9d 81       	ldd	r25, Y+5	; 0x05
    1c76:	83 30       	cpi	r24, 0x03	; 3
    1c78:	91 05       	cpc	r25, r1
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <MDIO_void_SetDir+0x146>
    1c7c:	40 c0       	rjmp	.+128    	; 0x1cfe <MDIO_void_SetDir+0x1c6>
    1c7e:	53 c0       	rjmp	.+166    	; 0x1d26 <MDIO_void_SetDir+0x1ee>
		{
		case DIO_PORTA:clear_bit(DIO_u8_DDRA,A_u8_PinNum);break;
    1c80:	aa e3       	ldi	r26, 0x3A	; 58
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	ea e3       	ldi	r30, 0x3A	; 58
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	02 2e       	mov	r0, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <MDIO_void_SetDir+0x166>
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	0a 94       	dec	r0
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <MDIO_void_SetDir+0x162>
    1ca2:	80 95       	com	r24
    1ca4:	84 23       	and	r24, r20
    1ca6:	8c 93       	st	X, r24
    1ca8:	3e c0       	rjmp	.+124    	; 0x1d26 <MDIO_void_SetDir+0x1ee>
		case DIO_PORTB:clear_bit(DIO_u8_DDRB,A_u8_PinNum);break;
    1caa:	a7 e3       	ldi	r26, 0x37	; 55
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e7 e3       	ldi	r30, 0x37	; 55
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <MDIO_void_SetDir+0x190>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <MDIO_void_SetDir+0x18c>
    1ccc:	80 95       	com	r24
    1cce:	84 23       	and	r24, r20
    1cd0:	8c 93       	st	X, r24
    1cd2:	29 c0       	rjmp	.+82     	; 0x1d26 <MDIO_void_SetDir+0x1ee>
		case DIO_PORTC:clear_bit(DIO_u8_DDRC,A_u8_PinNum);break;
    1cd4:	a4 e3       	ldi	r26, 0x34	; 52
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e4 e3       	ldi	r30, 0x34	; 52
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	48 2f       	mov	r20, r24
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	02 2e       	mov	r0, r18
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <MDIO_void_SetDir+0x1ba>
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	0a 94       	dec	r0
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <MDIO_void_SetDir+0x1b6>
    1cf6:	80 95       	com	r24
    1cf8:	84 23       	and	r24, r20
    1cfa:	8c 93       	st	X, r24
    1cfc:	14 c0       	rjmp	.+40     	; 0x1d26 <MDIO_void_SetDir+0x1ee>
		case DIO_PORTD:clear_bit(DIO_u8_DDRD,A_u8_PinNum);break;
    1cfe:	a1 e3       	ldi	r26, 0x31	; 49
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e1 e3       	ldi	r30, 0x31	; 49
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	48 2f       	mov	r20, r24
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 2e       	mov	r0, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <MDIO_void_SetDir+0x1e4>
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	0a 94       	dec	r0
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <MDIO_void_SetDir+0x1e0>
    1d20:	80 95       	com	r24
    1d22:	84 23       	and	r24, r20
    1d24:	8c 93       	st	X, r24
	}
	else
	{

	}
}
    1d26:	27 96       	adiw	r28, 0x07	; 7
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <MDIO_void_PinWrite>:
void MDIO_void_PinWrite(u8 A_u8_PortNum,u8 A_u8_PinNum,u8 A_u8_PinValue)
{
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	27 97       	sbiw	r28, 0x07	; 7
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	6a 83       	std	Y+2, r22	; 0x02
    1d50:	4b 83       	std	Y+3, r20	; 0x03
	if(HIGH==A_u8_PinValue)
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <MDIO_void_PinWrite+0x22>
    1d58:	6f c0       	rjmp	.+222    	; 0x1e38 <MDIO_void_PinWrite+0x100>
	{
		switch(A_u8_PortNum)
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	3f 83       	std	Y+7, r19	; 0x07
    1d62:	2e 83       	std	Y+6, r18	; 0x06
    1d64:	8e 81       	ldd	r24, Y+6	; 0x06
    1d66:	9f 81       	ldd	r25, Y+7	; 0x07
    1d68:	81 30       	cpi	r24, 0x01	; 1
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	49 f1       	breq	.+82     	; 0x1dc0 <MDIO_void_PinWrite+0x88>
    1d6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1d70:	3f 81       	ldd	r19, Y+7	; 0x07
    1d72:	22 30       	cpi	r18, 0x02	; 2
    1d74:	31 05       	cpc	r19, r1
    1d76:	2c f4       	brge	.+10     	; 0x1d82 <MDIO_void_PinWrite+0x4a>
    1d78:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	61 f0       	breq	.+24     	; 0x1d98 <MDIO_void_PinWrite+0x60>
    1d80:	d2 c0       	rjmp	.+420    	; 0x1f26 <MDIO_void_PinWrite+0x1ee>
    1d82:	2e 81       	ldd	r18, Y+6	; 0x06
    1d84:	3f 81       	ldd	r19, Y+7	; 0x07
    1d86:	22 30       	cpi	r18, 0x02	; 2
    1d88:	31 05       	cpc	r19, r1
    1d8a:	71 f1       	breq	.+92     	; 0x1de8 <MDIO_void_PinWrite+0xb0>
    1d8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d90:	83 30       	cpi	r24, 0x03	; 3
    1d92:	91 05       	cpc	r25, r1
    1d94:	e9 f1       	breq	.+122    	; 0x1e10 <MDIO_void_PinWrite+0xd8>
    1d96:	c7 c0       	rjmp	.+398    	; 0x1f26 <MDIO_void_PinWrite+0x1ee>
		{
		case DIO_PORTA:set_bit(DIO_u8_PORTA,A_u8_PinNum);break;
    1d98:	ab e3       	ldi	r26, 0x3B	; 59
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	eb e3       	ldi	r30, 0x3B	; 59
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	48 2f       	mov	r20, r24
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	02 2e       	mov	r0, r18
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <MDIO_void_PinWrite+0x7e>
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	0a 94       	dec	r0
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <MDIO_void_PinWrite+0x7a>
    1dba:	84 2b       	or	r24, r20
    1dbc:	8c 93       	st	X, r24
    1dbe:	b3 c0       	rjmp	.+358    	; 0x1f26 <MDIO_void_PinWrite+0x1ee>
		case DIO_PORTB:set_bit(DIO_u8_PORTB,A_u8_PinNum);break;
    1dc0:	a8 e3       	ldi	r26, 0x38	; 56
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e8 e3       	ldi	r30, 0x38	; 56
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	48 2f       	mov	r20, r24
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	02 2e       	mov	r0, r18
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <MDIO_void_PinWrite+0xa6>
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	0a 94       	dec	r0
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <MDIO_void_PinWrite+0xa2>
    1de2:	84 2b       	or	r24, r20
    1de4:	8c 93       	st	X, r24
    1de6:	9f c0       	rjmp	.+318    	; 0x1f26 <MDIO_void_PinWrite+0x1ee>
		case DIO_PORTC:set_bit(DIO_u8_PORTC,A_u8_PinNum);break;
    1de8:	a5 e3       	ldi	r26, 0x35	; 53
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e5 e3       	ldi	r30, 0x35	; 53
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	48 2f       	mov	r20, r24
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	02 2e       	mov	r0, r18
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <MDIO_void_PinWrite+0xce>
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	0a 94       	dec	r0
    1e08:	e2 f7       	brpl	.-8      	; 0x1e02 <MDIO_void_PinWrite+0xca>
    1e0a:	84 2b       	or	r24, r20
    1e0c:	8c 93       	st	X, r24
    1e0e:	8b c0       	rjmp	.+278    	; 0x1f26 <MDIO_void_PinWrite+0x1ee>
		case DIO_PORTD:set_bit(DIO_u8_PORTD,A_u8_PinNum);break;
    1e10:	a2 e3       	ldi	r26, 0x32	; 50
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e2 e3       	ldi	r30, 0x32	; 50
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	48 2f       	mov	r20, r24
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	02 2e       	mov	r0, r18
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <MDIO_void_PinWrite+0xf6>
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	0a 94       	dec	r0
    1e30:	e2 f7       	brpl	.-8      	; 0x1e2a <MDIO_void_PinWrite+0xf2>
    1e32:	84 2b       	or	r24, r20
    1e34:	8c 93       	st	X, r24
    1e36:	77 c0       	rjmp	.+238    	; 0x1f26 <MDIO_void_PinWrite+0x1ee>
		default:break;
		}
	}
	else if(LOW==A_u8_PinValue)
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	88 23       	and	r24, r24
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <MDIO_void_PinWrite+0x108>
    1e3e:	73 c0       	rjmp	.+230    	; 0x1f26 <MDIO_void_PinWrite+0x1ee>
	{
		switch(A_u8_PortNum){
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	3d 83       	std	Y+5, r19	; 0x05
    1e48:	2c 83       	std	Y+4, r18	; 0x04
    1e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	91 05       	cpc	r25, r1
    1e52:	59 f1       	breq	.+86     	; 0x1eaa <MDIO_void_PinWrite+0x172>
    1e54:	2c 81       	ldd	r18, Y+4	; 0x04
    1e56:	3d 81       	ldd	r19, Y+5	; 0x05
    1e58:	22 30       	cpi	r18, 0x02	; 2
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <MDIO_void_PinWrite+0x130>
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	9d 81       	ldd	r25, Y+5	; 0x05
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	69 f0       	breq	.+26     	; 0x1e80 <MDIO_void_PinWrite+0x148>
    1e66:	5f c0       	rjmp	.+190    	; 0x1f26 <MDIO_void_PinWrite+0x1ee>
    1e68:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6c:	22 30       	cpi	r18, 0x02	; 2
    1e6e:	31 05       	cpc	r19, r1
    1e70:	89 f1       	breq	.+98     	; 0x1ed4 <MDIO_void_PinWrite+0x19c>
    1e72:	8c 81       	ldd	r24, Y+4	; 0x04
    1e74:	9d 81       	ldd	r25, Y+5	; 0x05
    1e76:	83 30       	cpi	r24, 0x03	; 3
    1e78:	91 05       	cpc	r25, r1
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <MDIO_void_PinWrite+0x146>
    1e7c:	40 c0       	rjmp	.+128    	; 0x1efe <MDIO_void_PinWrite+0x1c6>
    1e7e:	53 c0       	rjmp	.+166    	; 0x1f26 <MDIO_void_PinWrite+0x1ee>
		case DIO_PORTA:clear_bit(DIO_u8_PORTA,A_u8_PinNum);break;
    1e80:	ab e3       	ldi	r26, 0x3B	; 59
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	eb e3       	ldi	r30, 0x3B	; 59
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	48 2f       	mov	r20, r24
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 2e       	mov	r0, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <MDIO_void_PinWrite+0x166>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <MDIO_void_PinWrite+0x162>
    1ea2:	80 95       	com	r24
    1ea4:	84 23       	and	r24, r20
    1ea6:	8c 93       	st	X, r24
    1ea8:	3e c0       	rjmp	.+124    	; 0x1f26 <MDIO_void_PinWrite+0x1ee>
		case DIO_PORTB:clear_bit(DIO_u8_PORTB,A_u8_PinNum);break;
    1eaa:	a8 e3       	ldi	r26, 0x38	; 56
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e8 e3       	ldi	r30, 0x38	; 56
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	48 2f       	mov	r20, r24
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	02 2e       	mov	r0, r18
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <MDIO_void_PinWrite+0x190>
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	0a 94       	dec	r0
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <MDIO_void_PinWrite+0x18c>
    1ecc:	80 95       	com	r24
    1ece:	84 23       	and	r24, r20
    1ed0:	8c 93       	st	X, r24
    1ed2:	29 c0       	rjmp	.+82     	; 0x1f26 <MDIO_void_PinWrite+0x1ee>
		case DIO_PORTC:clear_bit(DIO_u8_PORTC,A_u8_PinNum);break;
    1ed4:	a5 e3       	ldi	r26, 0x35	; 53
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e5 e3       	ldi	r30, 0x35	; 53
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	48 2f       	mov	r20, r24
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	02 2e       	mov	r0, r18
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <MDIO_void_PinWrite+0x1ba>
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	0a 94       	dec	r0
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <MDIO_void_PinWrite+0x1b6>
    1ef6:	80 95       	com	r24
    1ef8:	84 23       	and	r24, r20
    1efa:	8c 93       	st	X, r24
    1efc:	14 c0       	rjmp	.+40     	; 0x1f26 <MDIO_void_PinWrite+0x1ee>
		case DIO_PORTD:clear_bit(DIO_u8_PORTD,A_u8_PinNum);break;
    1efe:	a2 e3       	ldi	r26, 0x32	; 50
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e2 e3       	ldi	r30, 0x32	; 50
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	48 2f       	mov	r20, r24
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	02 2e       	mov	r0, r18
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <MDIO_void_PinWrite+0x1e4>
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	0a 94       	dec	r0
    1f1e:	e2 f7       	brpl	.-8      	; 0x1f18 <MDIO_void_PinWrite+0x1e0>
    1f20:	80 95       	com	r24
    1f22:	84 23       	and	r24, r20
    1f24:	8c 93       	st	X, r24
	}
	else
	{

	}
}
    1f26:	27 96       	adiw	r28, 0x07	; 7
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <MDIO_u8_PinRead>:
u8 MDIO_u8_PinRead(u8 A_u8_PortNum,u8 A_u8_PinNum)
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <MDIO_u8_PinRead+0x6>
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <MDIO_u8_PinRead+0x8>
    1f40:	0f 92       	push	r0
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	8a 83       	std	Y+2, r24	; 0x02
    1f48:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8_PinValue;
	switch(A_u8_PortNum)
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	3d 83       	std	Y+5, r19	; 0x05
    1f52:	2c 83       	std	Y+4, r18	; 0x04
    1f54:	4c 81       	ldd	r20, Y+4	; 0x04
    1f56:	5d 81       	ldd	r21, Y+5	; 0x05
    1f58:	41 30       	cpi	r20, 0x01	; 1
    1f5a:	51 05       	cpc	r21, r1
    1f5c:	b1 f1       	breq	.+108    	; 0x1fca <MDIO_u8_PinRead+0x92>
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	9d 81       	ldd	r25, Y+5	; 0x05
    1f62:	82 30       	cpi	r24, 0x02	; 2
    1f64:	91 05       	cpc	r25, r1
    1f66:	34 f4       	brge	.+12     	; 0x1f74 <MDIO_u8_PinRead+0x3c>
    1f68:	2c 81       	ldd	r18, Y+4	; 0x04
    1f6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f6c:	21 15       	cp	r18, r1
    1f6e:	31 05       	cpc	r19, r1
    1f70:	71 f0       	breq	.+28     	; 0x1f8e <MDIO_u8_PinRead+0x56>
    1f72:	84 c0       	rjmp	.+264    	; 0x207c <MDIO_u8_PinRead+0x144>
    1f74:	4c 81       	ldd	r20, Y+4	; 0x04
    1f76:	5d 81       	ldd	r21, Y+5	; 0x05
    1f78:	42 30       	cpi	r20, 0x02	; 2
    1f7a:	51 05       	cpc	r21, r1
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <MDIO_u8_PinRead+0x48>
    1f7e:	43 c0       	rjmp	.+134    	; 0x2006 <MDIO_u8_PinRead+0xce>
    1f80:	8c 81       	ldd	r24, Y+4	; 0x04
    1f82:	9d 81       	ldd	r25, Y+5	; 0x05
    1f84:	83 30       	cpi	r24, 0x03	; 3
    1f86:	91 05       	cpc	r25, r1
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <MDIO_u8_PinRead+0x54>
    1f8a:	5b c0       	rjmp	.+182    	; 0x2042 <MDIO_u8_PinRead+0x10a>
    1f8c:	77 c0       	rjmp	.+238    	; 0x207c <MDIO_u8_PinRead+0x144>
	{
	case DIO_PORTA:L_u8_PinValue=read_bit(DIO_u8_PINA,A_u8_PinNum);break;
    1f8e:	e9 e3       	ldi	r30, 0x39	; 57
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	48 2f       	mov	r20, r24
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <MDIO_u8_PinRead+0x70>
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	2a 95       	dec	r18
    1faa:	e2 f7       	brpl	.-8      	; 0x1fa4 <MDIO_u8_PinRead+0x6c>
    1fac:	9a 01       	movw	r18, r20
    1fae:	28 23       	and	r18, r24
    1fb0:	39 23       	and	r19, r25
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	a9 01       	movw	r20, r18
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <MDIO_u8_PinRead+0x88>
    1fbc:	55 95       	asr	r21
    1fbe:	47 95       	ror	r20
    1fc0:	8a 95       	dec	r24
    1fc2:	e2 f7       	brpl	.-8      	; 0x1fbc <MDIO_u8_PinRead+0x84>
    1fc4:	ca 01       	movw	r24, r20
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	59 c0       	rjmp	.+178    	; 0x207c <MDIO_u8_PinRead+0x144>
	case DIO_PORTB:L_u8_PinValue=read_bit(DIO_u8_PINB,A_u8_PinNum);break;
    1fca:	e6 e3       	ldi	r30, 0x36	; 54
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	48 2f       	mov	r20, r24
    1fd2:	50 e0       	ldi	r21, 0x00	; 0
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <MDIO_u8_PinRead+0xac>
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	2a 95       	dec	r18
    1fe6:	e2 f7       	brpl	.-8      	; 0x1fe0 <MDIO_u8_PinRead+0xa8>
    1fe8:	9a 01       	movw	r18, r20
    1fea:	28 23       	and	r18, r24
    1fec:	39 23       	and	r19, r25
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	88 2f       	mov	r24, r24
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a9 01       	movw	r20, r18
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <MDIO_u8_PinRead+0xc4>
    1ff8:	55 95       	asr	r21
    1ffa:	47 95       	ror	r20
    1ffc:	8a 95       	dec	r24
    1ffe:	e2 f7       	brpl	.-8      	; 0x1ff8 <MDIO_u8_PinRead+0xc0>
    2000:	ca 01       	movw	r24, r20
    2002:	89 83       	std	Y+1, r24	; 0x01
    2004:	3b c0       	rjmp	.+118    	; 0x207c <MDIO_u8_PinRead+0x144>
	case DIO_PORTC:L_u8_PinValue=read_bit(DIO_u8_PINC,A_u8_PinNum);break;
    2006:	e3 e3       	ldi	r30, 0x33	; 51
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	48 2f       	mov	r20, r24
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <MDIO_u8_PinRead+0xe8>
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	2a 95       	dec	r18
    2022:	e2 f7       	brpl	.-8      	; 0x201c <MDIO_u8_PinRead+0xe4>
    2024:	9a 01       	movw	r18, r20
    2026:	28 23       	and	r18, r24
    2028:	39 23       	and	r19, r25
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a9 01       	movw	r20, r18
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <MDIO_u8_PinRead+0x100>
    2034:	55 95       	asr	r21
    2036:	47 95       	ror	r20
    2038:	8a 95       	dec	r24
    203a:	e2 f7       	brpl	.-8      	; 0x2034 <MDIO_u8_PinRead+0xfc>
    203c:	ca 01       	movw	r24, r20
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	1d c0       	rjmp	.+58     	; 0x207c <MDIO_u8_PinRead+0x144>
	case DIO_PORTD:L_u8_PinValue=read_bit(DIO_u8_PIND,A_u8_PinNum);break;
    2042:	e0 e3       	ldi	r30, 0x30	; 48
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	48 2f       	mov	r20, r24
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	02 c0       	rjmp	.+4      	; 0x205c <MDIO_u8_PinRead+0x124>
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	2a 95       	dec	r18
    205e:	e2 f7       	brpl	.-8      	; 0x2058 <MDIO_u8_PinRead+0x120>
    2060:	9a 01       	movw	r18, r20
    2062:	28 23       	and	r18, r24
    2064:	39 23       	and	r19, r25
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	88 2f       	mov	r24, r24
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a9 01       	movw	r20, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <MDIO_u8_PinRead+0x13c>
    2070:	55 95       	asr	r21
    2072:	47 95       	ror	r20
    2074:	8a 95       	dec	r24
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <MDIO_u8_PinRead+0x138>
    2078:	ca 01       	movw	r24, r20
    207a:	89 83       	std	Y+1, r24	; 0x01
	default:break;
	}

	return L_u8_PinValue;
    207c:	89 81       	ldd	r24, Y+1	; 0x01
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <MDIO_void_PinToggle>:
void MDIO_void_PinToggle(u8 A_u8_PortNum,u8 A_u8_PinNum)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <MDIO_void_PinToggle+0x6>
    2094:	00 d0       	rcall	.+0      	; 0x2096 <MDIO_void_PinToggle+0x8>
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	89 83       	std	Y+1, r24	; 0x01
    209c:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8_PortNum)
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	3c 83       	std	Y+4, r19	; 0x04
    20a6:	2b 83       	std	Y+3, r18	; 0x03
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	9c 81       	ldd	r25, Y+4	; 0x04
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	91 05       	cpc	r25, r1
    20b0:	49 f1       	breq	.+82     	; 0x2104 <MDIO_void_PinToggle+0x76>
    20b2:	2b 81       	ldd	r18, Y+3	; 0x03
    20b4:	3c 81       	ldd	r19, Y+4	; 0x04
    20b6:	22 30       	cpi	r18, 0x02	; 2
    20b8:	31 05       	cpc	r19, r1
    20ba:	2c f4       	brge	.+10     	; 0x20c6 <MDIO_void_PinToggle+0x38>
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	61 f0       	breq	.+24     	; 0x20dc <MDIO_void_PinToggle+0x4e>
    20c4:	5a c0       	rjmp	.+180    	; 0x217a <MDIO_void_PinToggle+0xec>
    20c6:	2b 81       	ldd	r18, Y+3	; 0x03
    20c8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ca:	22 30       	cpi	r18, 0x02	; 2
    20cc:	31 05       	cpc	r19, r1
    20ce:	71 f1       	breq	.+92     	; 0x212c <MDIO_void_PinToggle+0x9e>
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	83 30       	cpi	r24, 0x03	; 3
    20d6:	91 05       	cpc	r25, r1
    20d8:	e9 f1       	breq	.+122    	; 0x2154 <MDIO_void_PinToggle+0xc6>
    20da:	4f c0       	rjmp	.+158    	; 0x217a <MDIO_void_PinToggle+0xec>
	{
	case DIO_PORTA:toggle_bit(DIO_u8_PORTA,A_u8_PinNum);break;
    20dc:	ab e3       	ldi	r26, 0x3B	; 59
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	eb e3       	ldi	r30, 0x3B	; 59
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	48 2f       	mov	r20, r24
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	02 2e       	mov	r0, r18
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <MDIO_void_PinToggle+0x6c>
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	0a 94       	dec	r0
    20fc:	e2 f7       	brpl	.-8      	; 0x20f6 <MDIO_void_PinToggle+0x68>
    20fe:	84 27       	eor	r24, r20
    2100:	8c 93       	st	X, r24
    2102:	3b c0       	rjmp	.+118    	; 0x217a <MDIO_void_PinToggle+0xec>
	case DIO_PORTB:toggle_bit(DIO_u8_PORTB,A_u8_PinNum);break;
    2104:	a8 e3       	ldi	r26, 0x38	; 56
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e8 e3       	ldi	r30, 0x38	; 56
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	48 2f       	mov	r20, r24
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	02 2e       	mov	r0, r18
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <MDIO_void_PinToggle+0x94>
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	0a 94       	dec	r0
    2124:	e2 f7       	brpl	.-8      	; 0x211e <MDIO_void_PinToggle+0x90>
    2126:	84 27       	eor	r24, r20
    2128:	8c 93       	st	X, r24
    212a:	27 c0       	rjmp	.+78     	; 0x217a <MDIO_void_PinToggle+0xec>
	case DIO_PORTC:toggle_bit(DIO_u8_PORTC,A_u8_PinNum);break;
    212c:	a5 e3       	ldi	r26, 0x35	; 53
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e5 e3       	ldi	r30, 0x35	; 53
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	48 2f       	mov	r20, r24
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	28 2f       	mov	r18, r24
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	02 2e       	mov	r0, r18
    2144:	02 c0       	rjmp	.+4      	; 0x214a <MDIO_void_PinToggle+0xbc>
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	0a 94       	dec	r0
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <MDIO_void_PinToggle+0xb8>
    214e:	84 27       	eor	r24, r20
    2150:	8c 93       	st	X, r24
    2152:	13 c0       	rjmp	.+38     	; 0x217a <MDIO_void_PinToggle+0xec>
	case DIO_PORTD:toggle_bit(DIO_u8_PORTD,A_u8_PinNum);break;
    2154:	a2 e3       	ldi	r26, 0x32	; 50
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e2 e3       	ldi	r30, 0x32	; 50
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	48 2f       	mov	r20, r24
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	02 2e       	mov	r0, r18
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <MDIO_void_PinToggle+0xe4>
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	0a 94       	dec	r0
    2174:	e2 f7       	brpl	.-8      	; 0x216e <MDIO_void_PinToggle+0xe0>
    2176:	84 27       	eor	r24, r20
    2178:	8c 93       	st	X, r24
	default:break;
	}
}
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <MDIO_void_PortSetDir>:
void MDIO_void_PortSetDir(u8 A_u8_PortNum,u8 A_u8_PortDir)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	00 d0       	rcall	.+0      	; 0x218e <MDIO_void_PortSetDir+0x6>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <MDIO_void_PortSetDir+0x8>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8_PortNum)
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	3c 83       	std	Y+4, r19	; 0x04
    21a0:	2b 83       	std	Y+3, r18	; 0x03
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	91 05       	cpc	r25, r1
    21aa:	d1 f0       	breq	.+52     	; 0x21e0 <MDIO_void_PortSetDir+0x58>
    21ac:	2b 81       	ldd	r18, Y+3	; 0x03
    21ae:	3c 81       	ldd	r19, Y+4	; 0x04
    21b0:	22 30       	cpi	r18, 0x02	; 2
    21b2:	31 05       	cpc	r19, r1
    21b4:	2c f4       	brge	.+10     	; 0x21c0 <MDIO_void_PortSetDir+0x38>
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	61 f0       	breq	.+24     	; 0x21d6 <MDIO_void_PortSetDir+0x4e>
    21be:	1e c0       	rjmp	.+60     	; 0x21fc <MDIO_void_PortSetDir+0x74>
    21c0:	2b 81       	ldd	r18, Y+3	; 0x03
    21c2:	3c 81       	ldd	r19, Y+4	; 0x04
    21c4:	22 30       	cpi	r18, 0x02	; 2
    21c6:	31 05       	cpc	r19, r1
    21c8:	81 f0       	breq	.+32     	; 0x21ea <MDIO_void_PortSetDir+0x62>
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	9c 81       	ldd	r25, Y+4	; 0x04
    21ce:	83 30       	cpi	r24, 0x03	; 3
    21d0:	91 05       	cpc	r25, r1
    21d2:	81 f0       	breq	.+32     	; 0x21f4 <MDIO_void_PortSetDir+0x6c>
    21d4:	13 c0       	rjmp	.+38     	; 0x21fc <MDIO_void_PortSetDir+0x74>
	{
	case DIO_PORTA:DIO_u8_DDRA=A_u8_PortDir;break;
    21d6:	ea e3       	ldi	r30, 0x3A	; 58
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	80 83       	st	Z, r24
    21de:	0e c0       	rjmp	.+28     	; 0x21fc <MDIO_void_PortSetDir+0x74>
	case DIO_PORTB:DIO_u8_DDRB=A_u8_PortDir;break;
    21e0:	e7 e3       	ldi	r30, 0x37	; 55
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	80 83       	st	Z, r24
    21e8:	09 c0       	rjmp	.+18     	; 0x21fc <MDIO_void_PortSetDir+0x74>
	case DIO_PORTC:DIO_u8_DDRC=A_u8_PortDir;break;
    21ea:	e4 e3       	ldi	r30, 0x34	; 52
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	80 83       	st	Z, r24
    21f2:	04 c0       	rjmp	.+8      	; 0x21fc <MDIO_void_PortSetDir+0x74>
	case DIO_PORTD:DIO_u8_DDRD=A_u8_PortDir;break;
    21f4:	e1 e3       	ldi	r30, 0x31	; 49
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	80 83       	st	Z, r24
	default:break;
	}
}
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <MDIO_void_PortWrite>:
void MDIO_void_PortWrite(u8 A_u8_PortNum,u8 A_u8_PortValue)
{
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	00 d0       	rcall	.+0      	; 0x2210 <MDIO_void_PortWrite+0x6>
    2210:	00 d0       	rcall	.+0      	; 0x2212 <MDIO_void_PortWrite+0x8>
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8_PortNum)
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	3c 83       	std	Y+4, r19	; 0x04
    2222:	2b 83       	std	Y+3, r18	; 0x03
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	9c 81       	ldd	r25, Y+4	; 0x04
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	91 05       	cpc	r25, r1
    222c:	d1 f0       	breq	.+52     	; 0x2262 <MDIO_void_PortWrite+0x58>
    222e:	2b 81       	ldd	r18, Y+3	; 0x03
    2230:	3c 81       	ldd	r19, Y+4	; 0x04
    2232:	22 30       	cpi	r18, 0x02	; 2
    2234:	31 05       	cpc	r19, r1
    2236:	2c f4       	brge	.+10     	; 0x2242 <MDIO_void_PortWrite+0x38>
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	9c 81       	ldd	r25, Y+4	; 0x04
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	61 f0       	breq	.+24     	; 0x2258 <MDIO_void_PortWrite+0x4e>
    2240:	1e c0       	rjmp	.+60     	; 0x227e <MDIO_void_PortWrite+0x74>
    2242:	2b 81       	ldd	r18, Y+3	; 0x03
    2244:	3c 81       	ldd	r19, Y+4	; 0x04
    2246:	22 30       	cpi	r18, 0x02	; 2
    2248:	31 05       	cpc	r19, r1
    224a:	81 f0       	breq	.+32     	; 0x226c <MDIO_void_PortWrite+0x62>
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	83 30       	cpi	r24, 0x03	; 3
    2252:	91 05       	cpc	r25, r1
    2254:	81 f0       	breq	.+32     	; 0x2276 <MDIO_void_PortWrite+0x6c>
    2256:	13 c0       	rjmp	.+38     	; 0x227e <MDIO_void_PortWrite+0x74>
	{
	case DIO_PORTA:DIO_u8_PORTA=A_u8_PortValue;break;
    2258:	eb e3       	ldi	r30, 0x3B	; 59
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	80 83       	st	Z, r24
    2260:	0e c0       	rjmp	.+28     	; 0x227e <MDIO_void_PortWrite+0x74>
	case DIO_PORTB:DIO_u8_PORTB=A_u8_PortValue;break;
    2262:	e8 e3       	ldi	r30, 0x38	; 56
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	80 83       	st	Z, r24
    226a:	09 c0       	rjmp	.+18     	; 0x227e <MDIO_void_PortWrite+0x74>
	case DIO_PORTC:DIO_u8_PORTC=A_u8_PortValue;break;
    226c:	e5 e3       	ldi	r30, 0x35	; 53
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	80 83       	st	Z, r24
    2274:	04 c0       	rjmp	.+8      	; 0x227e <MDIO_void_PortWrite+0x74>
	case DIO_PORTD:DIO_u8_PORTD=A_u8_PortValue;break;
    2276:	e2 e3       	ldi	r30, 0x32	; 50
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	80 83       	st	Z, r24
	default:break;
	}
}
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <MDIO_u8_PortRead>:
u8 MDIO_u8_PortRead(u8 A_u8_PortNum)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	00 d0       	rcall	.+0      	; 0x2292 <MDIO_u8_PortRead+0x6>
    2292:	00 d0       	rcall	.+0      	; 0x2294 <MDIO_u8_PortRead+0x8>
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8_PortValue;
	switch(A_u8_PortNum)
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	28 2f       	mov	r18, r24
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	3c 83       	std	Y+4, r19	; 0x04
    22a2:	2b 83       	std	Y+3, r18	; 0x03
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	9c 81       	ldd	r25, Y+4	; 0x04
    22a8:	81 30       	cpi	r24, 0x01	; 1
    22aa:	91 05       	cpc	r25, r1
    22ac:	d1 f0       	breq	.+52     	; 0x22e2 <MDIO_u8_PortRead+0x56>
    22ae:	2b 81       	ldd	r18, Y+3	; 0x03
    22b0:	3c 81       	ldd	r19, Y+4	; 0x04
    22b2:	22 30       	cpi	r18, 0x02	; 2
    22b4:	31 05       	cpc	r19, r1
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <MDIO_u8_PortRead+0x36>
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	9c 81       	ldd	r25, Y+4	; 0x04
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	61 f0       	breq	.+24     	; 0x22d8 <MDIO_u8_PortRead+0x4c>
    22c0:	1e c0       	rjmp	.+60     	; 0x22fe <MDIO_u8_PortRead+0x72>
    22c2:	2b 81       	ldd	r18, Y+3	; 0x03
    22c4:	3c 81       	ldd	r19, Y+4	; 0x04
    22c6:	22 30       	cpi	r18, 0x02	; 2
    22c8:	31 05       	cpc	r19, r1
    22ca:	81 f0       	breq	.+32     	; 0x22ec <MDIO_u8_PortRead+0x60>
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	83 30       	cpi	r24, 0x03	; 3
    22d2:	91 05       	cpc	r25, r1
    22d4:	81 f0       	breq	.+32     	; 0x22f6 <MDIO_u8_PortRead+0x6a>
    22d6:	13 c0       	rjmp	.+38     	; 0x22fe <MDIO_u8_PortRead+0x72>
	{
	case DIO_PORTA:L_u8_PortValue=DIO_u8_PORTA;break;
    22d8:	eb e3       	ldi	r30, 0x3B	; 59
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	0e c0       	rjmp	.+28     	; 0x22fe <MDIO_u8_PortRead+0x72>
	case DIO_PORTB:L_u8_PortValue=DIO_u8_PORTB;break;
    22e2:	e8 e3       	ldi	r30, 0x38	; 56
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	09 c0       	rjmp	.+18     	; 0x22fe <MDIO_u8_PortRead+0x72>
	case DIO_PORTC:L_u8_PortValue=DIO_u8_PORTC;break;
    22ec:	e5 e3       	ldi	r30, 0x35	; 53
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	04 c0       	rjmp	.+8      	; 0x22fe <MDIO_u8_PortRead+0x72>
	case DIO_PORTD:L_u8_PortValue=DIO_u8_PORTD;break;
    22f6:	e2 e3       	ldi	r30, 0x32	; 50
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	89 83       	std	Y+1, r24	; 0x01
	default:break;
	}
	return L_u8_PortValue;
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <MDIO_void_PortWriteHigh>:
void MDIO_void_PortWriteHigh(u8 A_u8_PortNum,u8 A_u8_PortValue)
{
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	00 d0       	rcall	.+0      	; 0x2314 <MDIO_void_PortWriteHigh+0x6>
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_void_PortWrite(A_u8_PortNum,A_u8_PortValue<<4);
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	98 2f       	mov	r25, r24
    2320:	92 95       	swap	r25
    2322:	90 7f       	andi	r25, 0xF0	; 240
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	69 2f       	mov	r22, r25
    2328:	0e 94 05 11 	call	0x220a	; 0x220a <MDIO_void_PortWrite>
}
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <HServoMotor>:
#include "SM_Interface.h"
#include "SM_Private.h"
#include "SM_Config.h"

void HServoMotor(f32 A_f32Angle)
{
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	2a 97       	sbiw	r28, 0x0a	; 10
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	6d 83       	std	Y+5, r22	; 0x05
    234c:	7e 83       	std	Y+6, r23	; 0x06
    234e:	8f 83       	std	Y+7, r24	; 0x07
    2350:	98 87       	std	Y+8, r25	; 0x08

	f32 L_f32OCRAValue;
	if(A_f32Angle>=0 &&A_f32Angle<=90 )
    2352:	1a 86       	std	Y+10, r1	; 0x0a
    2354:	6d 81       	ldd	r22, Y+5	; 0x05
    2356:	7e 81       	ldd	r23, Y+6	; 0x06
    2358:	8f 81       	ldd	r24, Y+7	; 0x07
    235a:	98 85       	ldd	r25, Y+8	; 0x08
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e0       	ldi	r20, 0x00	; 0
    2362:	50 e0       	ldi	r21, 0x00	; 0
    2364:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    2368:	88 23       	and	r24, r24
    236a:	14 f0       	brlt	.+4      	; 0x2370 <HServoMotor+0x3a>
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	8a 87       	std	Y+10, r24	; 0x0a
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	9a 85       	ldd	r25, Y+10	; 0x0a
    2374:	89 27       	eor	r24, r25
    2376:	88 23       	and	r24, r24
    2378:	79 f5       	brne	.+94     	; 0x23d8 <HServoMotor+0xa2>
    237a:	19 86       	std	Y+9, r1	; 0x09
    237c:	6d 81       	ldd	r22, Y+5	; 0x05
    237e:	7e 81       	ldd	r23, Y+6	; 0x06
    2380:	8f 81       	ldd	r24, Y+7	; 0x07
    2382:	98 85       	ldd	r25, Y+8	; 0x08
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	44 eb       	ldi	r20, 0xB4	; 180
    238a:	52 e4       	ldi	r21, 0x42	; 66
    238c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    2390:	18 16       	cp	r1, r24
    2392:	14 f0       	brlt	.+4      	; 0x2398 <HServoMotor+0x62>
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	89 87       	std	Y+9, r24	; 0x09
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	99 85       	ldd	r25, Y+9	; 0x09
    239c:	89 27       	eor	r24, r25
    239e:	88 23       	and	r24, r24
    23a0:	d9 f4       	brne	.+54     	; 0x23d8 <HServoMotor+0xa2>
	{
		L_f32OCRAValue=1.5+A_f32Angle*Single_Angle_Time;
    23a2:	6d 81       	ldd	r22, Y+5	; 0x05
    23a4:	7e 81       	ldd	r23, Y+6	; 0x06
    23a6:	8f 81       	ldd	r24, Y+7	; 0x07
    23a8:	98 85       	ldd	r25, Y+8	; 0x08
    23aa:	22 e6       	ldi	r18, 0x62	; 98
    23ac:	3b e0       	ldi	r19, 0x0B	; 11
    23ae:	46 eb       	ldi	r20, 0xB6	; 182
    23b0:	5b e3       	ldi	r21, 0x3B	; 59
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 ec       	ldi	r20, 0xC0	; 192
    23c4:	5f e3       	ldi	r21, 0x3F	; 63
    23c6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	ab 83       	std	Y+3, r26	; 0x03
    23d4:	bc 83       	std	Y+4, r27	; 0x04
    23d6:	32 c0       	rjmp	.+100    	; 0x243c <HServoMotor+0x106>
	}
	else if (A_f32Angle>=-90 && A_f32Angle<=0)
    23d8:	6d 81       	ldd	r22, Y+5	; 0x05
    23da:	7e 81       	ldd	r23, Y+6	; 0x06
    23dc:	8f 81       	ldd	r24, Y+7	; 0x07
    23de:	98 85       	ldd	r25, Y+8	; 0x08
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	44 eb       	ldi	r20, 0xB4	; 180
    23e6:	52 ec       	ldi	r21, 0xC2	; 194
    23e8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    23ec:	88 23       	and	r24, r24
    23ee:	34 f1       	brlt	.+76     	; 0x243c <HServoMotor+0x106>
    23f0:	6d 81       	ldd	r22, Y+5	; 0x05
    23f2:	7e 81       	ldd	r23, Y+6	; 0x06
    23f4:	8f 81       	ldd	r24, Y+7	; 0x07
    23f6:	98 85       	ldd	r25, Y+8	; 0x08
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    2404:	18 16       	cp	r1, r24
    2406:	d4 f0       	brlt	.+52     	; 0x243c <HServoMotor+0x106>
	{
		L_f32OCRAValue=1.5-A_f32Angle*-Single_Angle_Time;
    2408:	6d 81       	ldd	r22, Y+5	; 0x05
    240a:	7e 81       	ldd	r23, Y+6	; 0x06
    240c:	8f 81       	ldd	r24, Y+7	; 0x07
    240e:	98 85       	ldd	r25, Y+8	; 0x08
    2410:	22 e6       	ldi	r18, 0x62	; 98
    2412:	3b e0       	ldi	r19, 0x0B	; 11
    2414:	46 eb       	ldi	r20, 0xB6	; 182
    2416:	5b e3       	ldi	r21, 0x3B	; 59
    2418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	bc 01       	movw	r22, r24
    2422:	cd 01       	movw	r24, r26
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 ec       	ldi	r20, 0xC0	; 192
    242a:	5f e3       	ldi	r21, 0x3F	; 63
    242c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	ab 83       	std	Y+3, r26	; 0x03
    243a:	bc 83       	std	Y+4, r27	; 0x04
	}
	else
	{

	}
	L_f32OCRAValue=(u16)((L_f32OCRAValue*0.001)/(((f32)Timer1Prescaling)/(8000000.0))); //Watch out of integer division
    243c:	69 81       	ldd	r22, Y+1	; 0x01
    243e:	7a 81       	ldd	r23, Y+2	; 0x02
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	2f e6       	ldi	r18, 0x6F	; 111
    2446:	32 e1       	ldi	r19, 0x12	; 18
    2448:	43 e8       	ldi	r20, 0x83	; 131
    244a:	5a e3       	ldi	r21, 0x3A	; 58
    244c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	bc 01       	movw	r22, r24
    2456:	cd 01       	movw	r24, r26
    2458:	2d eb       	ldi	r18, 0xBD	; 189
    245a:	37 e3       	ldi	r19, 0x37	; 55
    245c:	46 e8       	ldi	r20, 0x86	; 134
    245e:	55 e3       	ldi	r21, 0x35	; 53
    2460:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	bc 01       	movw	r22, r24
    246a:	cd 01       	movw	r24, r26
    246c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	cc 01       	movw	r24, r24
    2476:	a0 e0       	ldi	r26, 0x00	; 0
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	9a 83       	std	Y+2, r25	; 0x02
    248a:	ab 83       	std	Y+3, r26	; 0x03
    248c:	bc 83       	std	Y+4, r27	; 0x04
	MTIMER1_voidSetOCR1A(L_f32OCRAValue);
    248e:	69 81       	ldd	r22, Y+1	; 0x01
    2490:	7a 81       	ldd	r23, Y+2	; 0x02
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	9c 81       	ldd	r25, Y+4	; 0x04
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	0e 94 42 09 	call	0x1284	; 0x1284 <MTIMER1_voidSetOCR1A>
}
    24a2:	2a 96       	adiw	r28, 0x0a	; 10
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	08 95       	ret

000024b4 <HLCD_voidInit>:
#include "LCD_Private.h"
#include "LCD_Config.h"
#include "util/delay.h"

void HLCD_voidInit(void)
{
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	c6 54       	subi	r28, 0x46	; 70
    24c2:	d0 40       	sbci	r29, 0x00	; 0
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	fe 01       	movw	r30, r28
    24d0:	ed 5b       	subi	r30, 0xBD	; 189
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	a8 ec       	ldi	r26, 0xC8	; 200
    24da:	b2 e4       	ldi	r27, 0x42	; 66
    24dc:	80 83       	st	Z, r24
    24de:	91 83       	std	Z+1, r25	; 0x01
    24e0:	a2 83       	std	Z+2, r26	; 0x02
    24e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e4:	8e 01       	movw	r16, r28
    24e6:	01 5c       	subi	r16, 0xC1	; 193
    24e8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ea:	fe 01       	movw	r30, r28
    24ec:	ed 5b       	subi	r30, 0xBD	; 189
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	60 81       	ld	r22, Z
    24f2:	71 81       	ldd	r23, Z+1	; 0x01
    24f4:	82 81       	ldd	r24, Z+2	; 0x02
    24f6:	93 81       	ldd	r25, Z+3	; 0x03
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	4a ef       	ldi	r20, 0xFA	; 250
    24fe:	54 e4       	ldi	r21, 0x44	; 68
    2500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	f8 01       	movw	r30, r16
    250a:	80 83       	st	Z, r24
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	a2 83       	std	Z+2, r26	; 0x02
    2510:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2512:	fe 01       	movw	r30, r28
    2514:	ff 96       	adiw	r30, 0x3f	; 63
    2516:	60 81       	ld	r22, Z
    2518:	71 81       	ldd	r23, Z+1	; 0x01
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e8       	ldi	r20, 0x80	; 128
    2524:	5f e3       	ldi	r21, 0x3F	; 63
    2526:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    252a:	88 23       	and	r24, r24
    252c:	2c f4       	brge	.+10     	; 0x2538 <HLCD_voidInit+0x84>
		__ticks = 1;
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	9e af       	std	Y+62, r25	; 0x3e
    2534:	8d af       	std	Y+61, r24	; 0x3d
    2536:	46 c0       	rjmp	.+140    	; 0x25c4 <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    2538:	fe 01       	movw	r30, r28
    253a:	ff 96       	adiw	r30, 0x3f	; 63
    253c:	60 81       	ld	r22, Z
    253e:	71 81       	ldd	r23, Z+1	; 0x01
    2540:	82 81       	ldd	r24, Z+2	; 0x02
    2542:	93 81       	ldd	r25, Z+3	; 0x03
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	3f ef       	ldi	r19, 0xFF	; 255
    2548:	4f e7       	ldi	r20, 0x7F	; 127
    254a:	57 e4       	ldi	r21, 0x47	; 71
    254c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2550:	18 16       	cp	r1, r24
    2552:	64 f5       	brge	.+88     	; 0x25ac <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2554:	fe 01       	movw	r30, r28
    2556:	ed 5b       	subi	r30, 0xBD	; 189
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	60 81       	ld	r22, Z
    255c:	71 81       	ldd	r23, Z+1	; 0x01
    255e:	82 81       	ldd	r24, Z+2	; 0x02
    2560:	93 81       	ldd	r25, Z+3	; 0x03
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e2       	ldi	r20, 0x20	; 32
    2568:	51 e4       	ldi	r21, 0x41	; 65
    256a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	bc 01       	movw	r22, r24
    2574:	cd 01       	movw	r24, r26
    2576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	9e af       	std	Y+62, r25	; 0x3e
    2580:	8d af       	std	Y+61, r24	; 0x3d
    2582:	0f c0       	rjmp	.+30     	; 0x25a2 <HLCD_voidInit+0xee>
    2584:	88 ec       	ldi	r24, 0xC8	; 200
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9c af       	std	Y+60, r25	; 0x3c
    258a:	8b af       	std	Y+59, r24	; 0x3b
    258c:	8b ad       	ldd	r24, Y+59	; 0x3b
    258e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <HLCD_voidInit+0xdc>
    2594:	9c af       	std	Y+60, r25	; 0x3c
    2596:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2598:	8d ad       	ldd	r24, Y+61	; 0x3d
    259a:	9e ad       	ldd	r25, Y+62	; 0x3e
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	9e af       	std	Y+62, r25	; 0x3e
    25a0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    25a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	69 f7       	brne	.-38     	; 0x2584 <HLCD_voidInit+0xd0>
    25aa:	16 c0       	rjmp	.+44     	; 0x25d8 <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ac:	fe 01       	movw	r30, r28
    25ae:	ff 96       	adiw	r30, 0x3f	; 63
    25b0:	60 81       	ld	r22, Z
    25b2:	71 81       	ldd	r23, Z+1	; 0x01
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	93 81       	ldd	r25, Z+3	; 0x03
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9e af       	std	Y+62, r25	; 0x3e
    25c2:	8d af       	std	Y+61, r24	; 0x3d
    25c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    25c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    25c8:	9a af       	std	Y+58, r25	; 0x3a
    25ca:	89 af       	std	Y+57, r24	; 0x39
    25cc:	89 ad       	ldd	r24, Y+57	; 0x39
    25ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <HLCD_voidInit+0x11c>
    25d4:	9a af       	std	Y+58, r25	; 0x3a
    25d6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);
	if(LCD_MODE==LCD_COM_8BitOperation)
	{
		HLCD_voidSendCom(LCD_COM_8BitOperation);
    25d8:	88 e3       	ldi	r24, 0x38	; 56
    25da:	0e 94 7d 15 	call	0x2afa	; 0x2afa <HLCD_voidSendCom>
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	a0 e8       	ldi	r26, 0x80	; 128
    25e4:	bf e3       	ldi	r27, 0x3F	; 63
    25e6:	8d ab       	std	Y+53, r24	; 0x35
    25e8:	9e ab       	std	Y+54, r25	; 0x36
    25ea:	af ab       	std	Y+55, r26	; 0x37
    25ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ee:	6d a9       	ldd	r22, Y+53	; 0x35
    25f0:	7e a9       	ldd	r23, Y+54	; 0x36
    25f2:	8f a9       	ldd	r24, Y+55	; 0x37
    25f4:	98 ad       	ldd	r25, Y+56	; 0x38
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	4a ef       	ldi	r20, 0xFA	; 250
    25fc:	54 e4       	ldi	r21, 0x44	; 68
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	89 ab       	std	Y+49, r24	; 0x31
    2608:	9a ab       	std	Y+50, r25	; 0x32
    260a:	ab ab       	std	Y+51, r26	; 0x33
    260c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    260e:	69 a9       	ldd	r22, Y+49	; 0x31
    2610:	7a a9       	ldd	r23, Y+50	; 0x32
    2612:	8b a9       	ldd	r24, Y+51	; 0x33
    2614:	9c a9       	ldd	r25, Y+52	; 0x34
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e8       	ldi	r20, 0x80	; 128
    261c:	5f e3       	ldi	r21, 0x3F	; 63
    261e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2622:	88 23       	and	r24, r24
    2624:	2c f4       	brge	.+10     	; 0x2630 <HLCD_voidInit+0x17c>
		__ticks = 1;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	98 ab       	std	Y+48, r25	; 0x30
    262c:	8f a7       	std	Y+47, r24	; 0x2f
    262e:	3f c0       	rjmp	.+126    	; 0x26ae <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    2630:	69 a9       	ldd	r22, Y+49	; 0x31
    2632:	7a a9       	ldd	r23, Y+50	; 0x32
    2634:	8b a9       	ldd	r24, Y+51	; 0x33
    2636:	9c a9       	ldd	r25, Y+52	; 0x34
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	3f ef       	ldi	r19, 0xFF	; 255
    263c:	4f e7       	ldi	r20, 0x7F	; 127
    263e:	57 e4       	ldi	r21, 0x47	; 71
    2640:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2644:	18 16       	cp	r1, r24
    2646:	4c f5       	brge	.+82     	; 0x269a <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2648:	6d a9       	ldd	r22, Y+53	; 0x35
    264a:	7e a9       	ldd	r23, Y+54	; 0x36
    264c:	8f a9       	ldd	r24, Y+55	; 0x37
    264e:	98 ad       	ldd	r25, Y+56	; 0x38
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e2       	ldi	r20, 0x20	; 32
    2656:	51 e4       	ldi	r21, 0x41	; 65
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	bc 01       	movw	r22, r24
    2662:	cd 01       	movw	r24, r26
    2664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	98 ab       	std	Y+48, r25	; 0x30
    266e:	8f a7       	std	Y+47, r24	; 0x2f
    2670:	0f c0       	rjmp	.+30     	; 0x2690 <HLCD_voidInit+0x1dc>
    2672:	88 ec       	ldi	r24, 0xC8	; 200
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	9e a7       	std	Y+46, r25	; 0x2e
    2678:	8d a7       	std	Y+45, r24	; 0x2d
    267a:	8d a5       	ldd	r24, Y+45	; 0x2d
    267c:	9e a5       	ldd	r25, Y+46	; 0x2e
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <HLCD_voidInit+0x1ca>
    2682:	9e a7       	std	Y+46, r25	; 0x2e
    2684:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2686:	8f a5       	ldd	r24, Y+47	; 0x2f
    2688:	98 a9       	ldd	r25, Y+48	; 0x30
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	98 ab       	std	Y+48, r25	; 0x30
    268e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2690:	8f a5       	ldd	r24, Y+47	; 0x2f
    2692:	98 a9       	ldd	r25, Y+48	; 0x30
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	69 f7       	brne	.-38     	; 0x2672 <HLCD_voidInit+0x1be>
    2698:	14 c0       	rjmp	.+40     	; 0x26c2 <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269a:	69 a9       	ldd	r22, Y+49	; 0x31
    269c:	7a a9       	ldd	r23, Y+50	; 0x32
    269e:	8b a9       	ldd	r24, Y+51	; 0x33
    26a0:	9c a9       	ldd	r25, Y+52	; 0x34
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	98 ab       	std	Y+48, r25	; 0x30
    26ac:	8f a7       	std	Y+47, r24	; 0x2f
    26ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b0:	98 a9       	ldd	r25, Y+48	; 0x30
    26b2:	9c a7       	std	Y+44, r25	; 0x2c
    26b4:	8b a7       	std	Y+43, r24	; 0x2b
    26b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    26b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <HLCD_voidInit+0x206>
    26be:	9c a7       	std	Y+44, r25	; 0x2c
    26c0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		HLCD_voidSendCom(LCD_COM_DisplayOn_CursorOn);
    26c2:	8e e0       	ldi	r24, 0x0E	; 14
    26c4:	0e 94 7d 15 	call	0x2afa	; 0x2afa <HLCD_voidSendCom>
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	a0 e8       	ldi	r26, 0x80	; 128
    26ce:	bf e3       	ldi	r27, 0x3F	; 63
    26d0:	8f a3       	std	Y+39, r24	; 0x27
    26d2:	98 a7       	std	Y+40, r25	; 0x28
    26d4:	a9 a7       	std	Y+41, r26	; 0x29
    26d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d8:	6f a1       	ldd	r22, Y+39	; 0x27
    26da:	78 a5       	ldd	r23, Y+40	; 0x28
    26dc:	89 a5       	ldd	r24, Y+41	; 0x29
    26de:	9a a5       	ldd	r25, Y+42	; 0x2a
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	4a ef       	ldi	r20, 0xFA	; 250
    26e6:	54 e4       	ldi	r21, 0x44	; 68
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	8b a3       	std	Y+35, r24	; 0x23
    26f2:	9c a3       	std	Y+36, r25	; 0x24
    26f4:	ad a3       	std	Y+37, r26	; 0x25
    26f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26f8:	6b a1       	ldd	r22, Y+35	; 0x23
    26fa:	7c a1       	ldd	r23, Y+36	; 0x24
    26fc:	8d a1       	ldd	r24, Y+37	; 0x25
    26fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	40 e8       	ldi	r20, 0x80	; 128
    2706:	5f e3       	ldi	r21, 0x3F	; 63
    2708:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    270c:	88 23       	and	r24, r24
    270e:	2c f4       	brge	.+10     	; 0x271a <HLCD_voidInit+0x266>
		__ticks = 1;
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	9a a3       	std	Y+34, r25	; 0x22
    2716:	89 a3       	std	Y+33, r24	; 0x21
    2718:	3f c0       	rjmp	.+126    	; 0x2798 <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    271a:	6b a1       	ldd	r22, Y+35	; 0x23
    271c:	7c a1       	ldd	r23, Y+36	; 0x24
    271e:	8d a1       	ldd	r24, Y+37	; 0x25
    2720:	9e a1       	ldd	r25, Y+38	; 0x26
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	3f ef       	ldi	r19, 0xFF	; 255
    2726:	4f e7       	ldi	r20, 0x7F	; 127
    2728:	57 e4       	ldi	r21, 0x47	; 71
    272a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    272e:	18 16       	cp	r1, r24
    2730:	4c f5       	brge	.+82     	; 0x2784 <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2732:	6f a1       	ldd	r22, Y+39	; 0x27
    2734:	78 a5       	ldd	r23, Y+40	; 0x28
    2736:	89 a5       	ldd	r24, Y+41	; 0x29
    2738:	9a a5       	ldd	r25, Y+42	; 0x2a
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e2       	ldi	r20, 0x20	; 32
    2740:	51 e4       	ldi	r21, 0x41	; 65
    2742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	bc 01       	movw	r22, r24
    274c:	cd 01       	movw	r24, r26
    274e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	9a a3       	std	Y+34, r25	; 0x22
    2758:	89 a3       	std	Y+33, r24	; 0x21
    275a:	0f c0       	rjmp	.+30     	; 0x277a <HLCD_voidInit+0x2c6>
    275c:	88 ec       	ldi	r24, 0xC8	; 200
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	98 a3       	std	Y+32, r25	; 0x20
    2762:	8f 8f       	std	Y+31, r24	; 0x1f
    2764:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2766:	98 a1       	ldd	r25, Y+32	; 0x20
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <HLCD_voidInit+0x2b4>
    276c:	98 a3       	std	Y+32, r25	; 0x20
    276e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2770:	89 a1       	ldd	r24, Y+33	; 0x21
    2772:	9a a1       	ldd	r25, Y+34	; 0x22
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	9a a3       	std	Y+34, r25	; 0x22
    2778:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277a:	89 a1       	ldd	r24, Y+33	; 0x21
    277c:	9a a1       	ldd	r25, Y+34	; 0x22
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	69 f7       	brne	.-38     	; 0x275c <HLCD_voidInit+0x2a8>
    2782:	14 c0       	rjmp	.+40     	; 0x27ac <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2784:	6b a1       	ldd	r22, Y+35	; 0x23
    2786:	7c a1       	ldd	r23, Y+36	; 0x24
    2788:	8d a1       	ldd	r24, Y+37	; 0x25
    278a:	9e a1       	ldd	r25, Y+38	; 0x26
    278c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	9a a3       	std	Y+34, r25	; 0x22
    2796:	89 a3       	std	Y+33, r24	; 0x21
    2798:	89 a1       	ldd	r24, Y+33	; 0x21
    279a:	9a a1       	ldd	r25, Y+34	; 0x22
    279c:	9e 8f       	std	Y+30, r25	; 0x1e
    279e:	8d 8f       	std	Y+29, r24	; 0x1d
    27a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <HLCD_voidInit+0x2f0>
    27a8:	9e 8f       	std	Y+30, r25	; 0x1e
    27aa:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		HLCD_voidSendCom(LCD_COM_ClearDisplay);
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	0e 94 7d 15 	call	0x2afa	; 0x2afa <HLCD_voidSendCom>
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	a0 e2       	ldi	r26, 0x20	; 32
    27b8:	b1 e4       	ldi	r27, 0x41	; 65
    27ba:	89 8f       	std	Y+25, r24	; 0x19
    27bc:	9a 8f       	std	Y+26, r25	; 0x1a
    27be:	ab 8f       	std	Y+27, r26	; 0x1b
    27c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c2:	69 8d       	ldd	r22, Y+25	; 0x19
    27c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	4a ef       	ldi	r20, 0xFA	; 250
    27d0:	54 e4       	ldi	r21, 0x44	; 68
    27d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	8d 8b       	std	Y+21, r24	; 0x15
    27dc:	9e 8b       	std	Y+22, r25	; 0x16
    27de:	af 8b       	std	Y+23, r26	; 0x17
    27e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27e2:	6d 89       	ldd	r22, Y+21	; 0x15
    27e4:	7e 89       	ldd	r23, Y+22	; 0x16
    27e6:	8f 89       	ldd	r24, Y+23	; 0x17
    27e8:	98 8d       	ldd	r25, Y+24	; 0x18
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	40 e8       	ldi	r20, 0x80	; 128
    27f0:	5f e3       	ldi	r21, 0x3F	; 63
    27f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27f6:	88 23       	and	r24, r24
    27f8:	2c f4       	brge	.+10     	; 0x2804 <HLCD_voidInit+0x350>
		__ticks = 1;
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	9c 8b       	std	Y+20, r25	; 0x14
    2800:	8b 8b       	std	Y+19, r24	; 0x13
    2802:	3f c0       	rjmp	.+126    	; 0x2882 <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    2804:	6d 89       	ldd	r22, Y+21	; 0x15
    2806:	7e 89       	ldd	r23, Y+22	; 0x16
    2808:	8f 89       	ldd	r24, Y+23	; 0x17
    280a:	98 8d       	ldd	r25, Y+24	; 0x18
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	3f ef       	ldi	r19, 0xFF	; 255
    2810:	4f e7       	ldi	r20, 0x7F	; 127
    2812:	57 e4       	ldi	r21, 0x47	; 71
    2814:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2818:	18 16       	cp	r1, r24
    281a:	4c f5       	brge	.+82     	; 0x286e <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281c:	69 8d       	ldd	r22, Y+25	; 0x19
    281e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2820:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2822:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e2       	ldi	r20, 0x20	; 32
    282a:	51 e4       	ldi	r21, 0x41	; 65
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	bc 01       	movw	r22, r24
    2836:	cd 01       	movw	r24, r26
    2838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	9c 8b       	std	Y+20, r25	; 0x14
    2842:	8b 8b       	std	Y+19, r24	; 0x13
    2844:	0f c0       	rjmp	.+30     	; 0x2864 <HLCD_voidInit+0x3b0>
    2846:	88 ec       	ldi	r24, 0xC8	; 200
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	9a 8b       	std	Y+18, r25	; 0x12
    284c:	89 8b       	std	Y+17, r24	; 0x11
    284e:	89 89       	ldd	r24, Y+17	; 0x11
    2850:	9a 89       	ldd	r25, Y+18	; 0x12
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	f1 f7       	brne	.-4      	; 0x2852 <HLCD_voidInit+0x39e>
    2856:	9a 8b       	std	Y+18, r25	; 0x12
    2858:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285a:	8b 89       	ldd	r24, Y+19	; 0x13
    285c:	9c 89       	ldd	r25, Y+20	; 0x14
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	9c 8b       	std	Y+20, r25	; 0x14
    2862:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2864:	8b 89       	ldd	r24, Y+19	; 0x13
    2866:	9c 89       	ldd	r25, Y+20	; 0x14
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	69 f7       	brne	.-38     	; 0x2846 <HLCD_voidInit+0x392>
    286c:	14 c0       	rjmp	.+40     	; 0x2896 <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    286e:	6d 89       	ldd	r22, Y+21	; 0x15
    2870:	7e 89       	ldd	r23, Y+22	; 0x16
    2872:	8f 89       	ldd	r24, Y+23	; 0x17
    2874:	98 8d       	ldd	r25, Y+24	; 0x18
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	9c 8b       	std	Y+20, r25	; 0x14
    2880:	8b 8b       	std	Y+19, r24	; 0x13
    2882:	8b 89       	ldd	r24, Y+19	; 0x13
    2884:	9c 89       	ldd	r25, Y+20	; 0x14
    2886:	98 8b       	std	Y+16, r25	; 0x10
    2888:	8f 87       	std	Y+15, r24	; 0x0f
    288a:	8f 85       	ldd	r24, Y+15	; 0x0f
    288c:	98 89       	ldd	r25, Y+16	; 0x10
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <HLCD_voidInit+0x3da>
    2892:	98 8b       	std	Y+16, r25	; 0x10
    2894:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		HLCD_voidSendCom(LCD_COM_EntryMode);
    2896:	86 e0       	ldi	r24, 0x06	; 6
    2898:	0e 94 7d 15 	call	0x2afa	; 0x2afa <HLCD_voidSendCom>
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	a0 e8       	ldi	r26, 0x80	; 128
    28a2:	bf e3       	ldi	r27, 0x3F	; 63
    28a4:	8b 87       	std	Y+11, r24	; 0x0b
    28a6:	9c 87       	std	Y+12, r25	; 0x0c
    28a8:	ad 87       	std	Y+13, r26	; 0x0d
    28aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	4a ef       	ldi	r20, 0xFA	; 250
    28ba:	54 e4       	ldi	r21, 0x44	; 68
    28bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	8f 83       	std	Y+7, r24	; 0x07
    28c6:	98 87       	std	Y+8, r25	; 0x08
    28c8:	a9 87       	std	Y+9, r26	; 0x09
    28ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28cc:	6f 81       	ldd	r22, Y+7	; 0x07
    28ce:	78 85       	ldd	r23, Y+8	; 0x08
    28d0:	89 85       	ldd	r24, Y+9	; 0x09
    28d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e8       	ldi	r20, 0x80	; 128
    28da:	5f e3       	ldi	r21, 0x3F	; 63
    28dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e0:	88 23       	and	r24, r24
    28e2:	2c f4       	brge	.+10     	; 0x28ee <HLCD_voidInit+0x43a>
		__ticks = 1;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	9e 83       	std	Y+6, r25	; 0x06
    28ea:	8d 83       	std	Y+5, r24	; 0x05
    28ec:	3f c0       	rjmp	.+126    	; 0x296c <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    28ee:	6f 81       	ldd	r22, Y+7	; 0x07
    28f0:	78 85       	ldd	r23, Y+8	; 0x08
    28f2:	89 85       	ldd	r24, Y+9	; 0x09
    28f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	3f ef       	ldi	r19, 0xFF	; 255
    28fa:	4f e7       	ldi	r20, 0x7F	; 127
    28fc:	57 e4       	ldi	r21, 0x47	; 71
    28fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2902:	18 16       	cp	r1, r24
    2904:	4c f5       	brge	.+82     	; 0x2958 <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2906:	6b 85       	ldd	r22, Y+11	; 0x0b
    2908:	7c 85       	ldd	r23, Y+12	; 0x0c
    290a:	8d 85       	ldd	r24, Y+13	; 0x0d
    290c:	9e 85       	ldd	r25, Y+14	; 0x0e
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e2       	ldi	r20, 0x20	; 32
    2914:	51 e4       	ldi	r21, 0x41	; 65
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	9e 83       	std	Y+6, r25	; 0x06
    292c:	8d 83       	std	Y+5, r24	; 0x05
    292e:	0f c0       	rjmp	.+30     	; 0x294e <HLCD_voidInit+0x49a>
    2930:	88 ec       	ldi	r24, 0xC8	; 200
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9c 83       	std	Y+4, r25	; 0x04
    2936:	8b 83       	std	Y+3, r24	; 0x03
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	9c 81       	ldd	r25, Y+4	; 0x04
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <HLCD_voidInit+0x488>
    2940:	9c 83       	std	Y+4, r25	; 0x04
    2942:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2944:	8d 81       	ldd	r24, Y+5	; 0x05
    2946:	9e 81       	ldd	r25, Y+6	; 0x06
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	9e 83       	std	Y+6, r25	; 0x06
    294c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294e:	8d 81       	ldd	r24, Y+5	; 0x05
    2950:	9e 81       	ldd	r25, Y+6	; 0x06
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	69 f7       	brne	.-38     	; 0x2930 <HLCD_voidInit+0x47c>
    2956:	14 c0       	rjmp	.+40     	; 0x2980 <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2958:	6f 81       	ldd	r22, Y+7	; 0x07
    295a:	78 85       	ldd	r23, Y+8	; 0x08
    295c:	89 85       	ldd	r24, Y+9	; 0x09
    295e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	9e 83       	std	Y+6, r25	; 0x06
    296a:	8d 83       	std	Y+5, r24	; 0x05
    296c:	8d 81       	ldd	r24, Y+5	; 0x05
    296e:	9e 81       	ldd	r25, Y+6	; 0x06
    2970:	9a 83       	std	Y+2, r25	; 0x02
    2972:	89 83       	std	Y+1, r24	; 0x01
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	9a 81       	ldd	r25, Y+2	; 0x02
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <HLCD_voidInit+0x4c4>
    297c:	9a 83       	std	Y+2, r25	; 0x02
    297e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//Do Nothing
	}
}
    2980:	ca 5b       	subi	r28, 0xBA	; 186
    2982:	df 4f       	sbci	r29, 0xFF	; 255
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	1f 91       	pop	r17
    2994:	0f 91       	pop	r16
    2996:	08 95       	ret

00002998 <HLCD_voidSendData>:
void HLCD_voidSendData(u8 A_u8Data)
{
    2998:	df 93       	push	r29
    299a:	cf 93       	push	r28
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	2f 97       	sbiw	r28, 0x0f	; 15
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	f8 94       	cli
    29a6:	de bf       	out	0x3e, r29	; 62
    29a8:	0f be       	out	0x3f, r0	; 63
    29aa:	cd bf       	out	0x3d, r28	; 61
    29ac:	8f 87       	std	Y+15, r24	; 0x0f
	if(LCD_MODE==LCD_COM_8BitOperation)
	{
		MDIO_void_PortSetDir(LCD_DATA_PORT,PORT_OUTPUT);
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	6f ef       	ldi	r22, 0xFF	; 255
    29b2:	0e 94 c4 10 	call	0x2188	; 0x2188 <MDIO_void_PortSetDir>
		MDIO_void_SetDir(LCD_CONTROL_PORT,LCD_RS_PIN,PIN_OUTPUT);
    29b6:	83 e0       	ldi	r24, 0x03	; 3
    29b8:	63 e0       	ldi	r22, 0x03	; 3
    29ba:	41 e0       	ldi	r20, 0x01	; 1
    29bc:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_void_SetDir>
		MDIO_void_SetDir(LCD_CONTROL_PORT,LCD_E_PIN,PIN_OUTPUT);
    29c0:	83 e0       	ldi	r24, 0x03	; 3
    29c2:	67 e0       	ldi	r22, 0x07	; 7
    29c4:	41 e0       	ldi	r20, 0x01	; 1
    29c6:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_void_SetDir>
		MDIO_void_SetDir(LCD_CONTROL_PORT,LCD_RW_PIN,PIN_OUTPUT);
    29ca:	83 e0       	ldi	r24, 0x03	; 3
    29cc:	64 e0       	ldi	r22, 0x04	; 4
    29ce:	41 e0       	ldi	r20, 0x01	; 1
    29d0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_void_SetDir>

		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_RS_PIN,HIGH);
    29d4:	83 e0       	ldi	r24, 0x03	; 3
    29d6:	63 e0       	ldi	r22, 0x03	; 3
    29d8:	41 e0       	ldi	r20, 0x01	; 1
    29da:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <MDIO_void_PinWrite>
		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_RW_PIN,LOW);
    29de:	83 e0       	ldi	r24, 0x03	; 3
    29e0:	64 e0       	ldi	r22, 0x04	; 4
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <MDIO_void_PinWrite>
		MDIO_void_PortWrite(LCD_DATA_PORT,A_u8Data);
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    29ec:	0e 94 05 11 	call	0x220a	; 0x220a <MDIO_void_PortWrite>

		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_E_PIN,HIGH);
    29f0:	83 e0       	ldi	r24, 0x03	; 3
    29f2:	67 e0       	ldi	r22, 0x07	; 7
    29f4:	41 e0       	ldi	r20, 0x01	; 1
    29f6:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <MDIO_void_PinWrite>
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	a0 e8       	ldi	r26, 0x80	; 128
    2a00:	bf e3       	ldi	r27, 0x3F	; 63
    2a02:	8b 87       	std	Y+11, r24	; 0x0b
    2a04:	9c 87       	std	Y+12, r25	; 0x0c
    2a06:	ad 87       	std	Y+13, r26	; 0x0d
    2a08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	4a ef       	ldi	r20, 0xFA	; 250
    2a18:	54 e4       	ldi	r21, 0x44	; 68
    2a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	8f 83       	std	Y+7, r24	; 0x07
    2a24:	98 87       	std	Y+8, r25	; 0x08
    2a26:	a9 87       	std	Y+9, r26	; 0x09
    2a28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2c:	78 85       	ldd	r23, Y+8	; 0x08
    2a2e:	89 85       	ldd	r24, Y+9	; 0x09
    2a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e8       	ldi	r20, 0x80	; 128
    2a38:	5f e3       	ldi	r21, 0x3F	; 63
    2a3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a3e:	88 23       	and	r24, r24
    2a40:	2c f4       	brge	.+10     	; 0x2a4c <HLCD_voidSendData+0xb4>
		__ticks = 1;
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
    2a4a:	3f c0       	rjmp	.+126    	; 0x2aca <HLCD_voidSendData+0x132>
	else if (__tmp > 65535)
    2a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4e:	78 85       	ldd	r23, Y+8	; 0x08
    2a50:	89 85       	ldd	r24, Y+9	; 0x09
    2a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	3f ef       	ldi	r19, 0xFF	; 255
    2a58:	4f e7       	ldi	r20, 0x7F	; 127
    2a5a:	57 e4       	ldi	r21, 0x47	; 71
    2a5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a60:	18 16       	cp	r1, r24
    2a62:	4c f5       	brge	.+82     	; 0x2ab6 <HLCD_voidSendData+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e2       	ldi	r20, 0x20	; 32
    2a72:	51 e4       	ldi	r21, 0x41	; 65
    2a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	cd 01       	movw	r24, r26
    2a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	9e 83       	std	Y+6, r25	; 0x06
    2a8a:	8d 83       	std	Y+5, r24	; 0x05
    2a8c:	0f c0       	rjmp	.+30     	; 0x2aac <HLCD_voidSendData+0x114>
    2a8e:	88 ec       	ldi	r24, 0xC8	; 200
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	9c 83       	std	Y+4, r25	; 0x04
    2a94:	8b 83       	std	Y+3, r24	; 0x03
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <HLCD_voidSendData+0x102>
    2a9e:	9c 83       	std	Y+4, r25	; 0x04
    2aa0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	9e 83       	std	Y+6, r25	; 0x06
    2aaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aac:	8d 81       	ldd	r24, Y+5	; 0x05
    2aae:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	69 f7       	brne	.-38     	; 0x2a8e <HLCD_voidSendData+0xf6>
    2ab4:	14 c0       	rjmp	.+40     	; 0x2ade <HLCD_voidSendData+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab8:	78 85       	ldd	r23, Y+8	; 0x08
    2aba:	89 85       	ldd	r24, Y+9	; 0x09
    2abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
    2aca:	8d 81       	ldd	r24, Y+5	; 0x05
    2acc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ace:	9a 83       	std	Y+2, r25	; 0x02
    2ad0:	89 83       	std	Y+1, r24	; 0x01
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <HLCD_voidSendData+0x13e>
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_E_PIN,LOW);
    2ade:	83 e0       	ldi	r24, 0x03	; 3
    2ae0:	67 e0       	ldi	r22, 0x07	; 7
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <MDIO_void_PinWrite>
	}
	else
	{
		//Do Nothing
	}
}
    2ae8:	2f 96       	adiw	r28, 0x0f	; 15
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	f8 94       	cli
    2aee:	de bf       	out	0x3e, r29	; 62
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	cd bf       	out	0x3d, r28	; 61
    2af4:	cf 91       	pop	r28
    2af6:	df 91       	pop	r29
    2af8:	08 95       	ret

00002afa <HLCD_voidSendCom>:
void HLCD_voidSendCom(u8 A_u8Command)
{
    2afa:	df 93       	push	r29
    2afc:	cf 93       	push	r28
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	2f 97       	sbiw	r28, 0x0f	; 15
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	f8 94       	cli
    2b08:	de bf       	out	0x3e, r29	; 62
    2b0a:	0f be       	out	0x3f, r0	; 63
    2b0c:	cd bf       	out	0x3d, r28	; 61
    2b0e:	8f 87       	std	Y+15, r24	; 0x0f
	if(LCD_MODE==LCD_COM_8BitOperation)
	{
		MDIO_void_PortSetDir(LCD_DATA_PORT,PORT_OUTPUT);
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	6f ef       	ldi	r22, 0xFF	; 255
    2b14:	0e 94 c4 10 	call	0x2188	; 0x2188 <MDIO_void_PortSetDir>
		MDIO_void_SetDir(LCD_CONTROL_PORT,LCD_RS_PIN,PIN_OUTPUT);
    2b18:	83 e0       	ldi	r24, 0x03	; 3
    2b1a:	63 e0       	ldi	r22, 0x03	; 3
    2b1c:	41 e0       	ldi	r20, 0x01	; 1
    2b1e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_void_SetDir>
		MDIO_void_SetDir(LCD_CONTROL_PORT,LCD_E_PIN,PIN_OUTPUT);
    2b22:	83 e0       	ldi	r24, 0x03	; 3
    2b24:	67 e0       	ldi	r22, 0x07	; 7
    2b26:	41 e0       	ldi	r20, 0x01	; 1
    2b28:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_void_SetDir>
		MDIO_void_SetDir(LCD_CONTROL_PORT,LCD_RW_PIN,PIN_OUTPUT);
    2b2c:	83 e0       	ldi	r24, 0x03	; 3
    2b2e:	64 e0       	ldi	r22, 0x04	; 4
    2b30:	41 e0       	ldi	r20, 0x01	; 1
    2b32:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_void_SetDir>

		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_RS_PIN,LOW);
    2b36:	83 e0       	ldi	r24, 0x03	; 3
    2b38:	63 e0       	ldi	r22, 0x03	; 3
    2b3a:	40 e0       	ldi	r20, 0x00	; 0
    2b3c:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <MDIO_void_PinWrite>
		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_RW_PIN,LOW);
    2b40:	83 e0       	ldi	r24, 0x03	; 3
    2b42:	64 e0       	ldi	r22, 0x04	; 4
    2b44:	40 e0       	ldi	r20, 0x00	; 0
    2b46:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <MDIO_void_PinWrite>
		MDIO_void_PortWrite(LCD_DATA_PORT,A_u8Command);
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b4e:	0e 94 05 11 	call	0x220a	; 0x220a <MDIO_void_PortWrite>

		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_E_PIN,HIGH);
    2b52:	83 e0       	ldi	r24, 0x03	; 3
    2b54:	67 e0       	ldi	r22, 0x07	; 7
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <MDIO_void_PinWrite>
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	a0 e8       	ldi	r26, 0x80	; 128
    2b62:	bf e3       	ldi	r27, 0x3F	; 63
    2b64:	8b 87       	std	Y+11, r24	; 0x0b
    2b66:	9c 87       	std	Y+12, r25	; 0x0c
    2b68:	ad 87       	std	Y+13, r26	; 0x0d
    2b6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	4a ef       	ldi	r20, 0xFA	; 250
    2b7a:	54 e4       	ldi	r21, 0x44	; 68
    2b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	8f 83       	std	Y+7, r24	; 0x07
    2b86:	98 87       	std	Y+8, r25	; 0x08
    2b88:	a9 87       	std	Y+9, r26	; 0x09
    2b8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8e:	78 85       	ldd	r23, Y+8	; 0x08
    2b90:	89 85       	ldd	r24, Y+9	; 0x09
    2b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e8       	ldi	r20, 0x80	; 128
    2b9a:	5f e3       	ldi	r21, 0x3F	; 63
    2b9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ba0:	88 23       	and	r24, r24
    2ba2:	2c f4       	brge	.+10     	; 0x2bae <HLCD_voidSendCom+0xb4>
		__ticks = 1;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	9e 83       	std	Y+6, r25	; 0x06
    2baa:	8d 83       	std	Y+5, r24	; 0x05
    2bac:	3f c0       	rjmp	.+126    	; 0x2c2c <HLCD_voidSendCom+0x132>
	else if (__tmp > 65535)
    2bae:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb0:	78 85       	ldd	r23, Y+8	; 0x08
    2bb2:	89 85       	ldd	r24, Y+9	; 0x09
    2bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	3f ef       	ldi	r19, 0xFF	; 255
    2bba:	4f e7       	ldi	r20, 0x7F	; 127
    2bbc:	57 e4       	ldi	r21, 0x47	; 71
    2bbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bc2:	18 16       	cp	r1, r24
    2bc4:	4c f5       	brge	.+82     	; 0x2c18 <HLCD_voidSendCom+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e2       	ldi	r20, 0x20	; 32
    2bd4:	51 e4       	ldi	r21, 0x41	; 65
    2bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	9e 83       	std	Y+6, r25	; 0x06
    2bec:	8d 83       	std	Y+5, r24	; 0x05
    2bee:	0f c0       	rjmp	.+30     	; 0x2c0e <HLCD_voidSendCom+0x114>
    2bf0:	88 ec       	ldi	r24, 0xC8	; 200
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	9c 83       	std	Y+4, r25	; 0x04
    2bf6:	8b 83       	std	Y+3, r24	; 0x03
    2bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <HLCD_voidSendCom+0x102>
    2c00:	9c 83       	std	Y+4, r25	; 0x04
    2c02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c04:	8d 81       	ldd	r24, Y+5	; 0x05
    2c06:	9e 81       	ldd	r25, Y+6	; 0x06
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	9e 83       	std	Y+6, r25	; 0x06
    2c0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c10:	9e 81       	ldd	r25, Y+6	; 0x06
    2c12:	00 97       	sbiw	r24, 0x00	; 0
    2c14:	69 f7       	brne	.-38     	; 0x2bf0 <HLCD_voidSendCom+0xf6>
    2c16:	14 c0       	rjmp	.+40     	; 0x2c40 <HLCD_voidSendCom+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c18:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1a:	78 85       	ldd	r23, Y+8	; 0x08
    2c1c:	89 85       	ldd	r24, Y+9	; 0x09
    2c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	9e 83       	std	Y+6, r25	; 0x06
    2c2a:	8d 83       	std	Y+5, r24	; 0x05
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c30:	9a 83       	std	Y+2, r25	; 0x02
    2c32:	89 83       	std	Y+1, r24	; 0x01
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	9a 81       	ldd	r25, Y+2	; 0x02
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	f1 f7       	brne	.-4      	; 0x2c38 <HLCD_voidSendCom+0x13e>
    2c3c:	9a 83       	std	Y+2, r25	; 0x02
    2c3e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		MDIO_void_PinWrite(LCD_CONTROL_PORT,LCD_E_PIN,LOW);
    2c40:	83 e0       	ldi	r24, 0x03	; 3
    2c42:	67 e0       	ldi	r22, 0x07	; 7
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <MDIO_void_PinWrite>
	}
	else
	{
		//Do Nothing
	}
}
    2c4a:	2f 96       	adiw	r28, 0x0f	; 15
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	f8 94       	cli
    2c50:	de bf       	out	0x3e, r29	; 62
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	cd bf       	out	0x3d, r28	; 61
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	08 95       	ret

00002c5c <HLCD_voidSendString>:
void HLCD_voidSendString(u8 *A_Pu8String)
{
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <HLCD_voidSendString+0x6>
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <HLCD_voidSendString+0x8>
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	9c 83       	std	Y+4, r25	; 0x04
    2c6a:	8b 83       	std	Y+3, r24	; 0x03
	u8 *L_u8Incrementer=A_Pu8String;
    2c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c70:	9a 83       	std	Y+2, r25	; 0x02
    2c72:	89 83       	std	Y+1, r24	; 0x01
    2c74:	0a c0       	rjmp	.+20     	; 0x2c8a <HLCD_voidSendString+0x2e>
	while(*L_u8Incrementer!=0)
	{
		HLCD_voidSendData(*L_u8Incrementer);
    2c76:	e9 81       	ldd	r30, Y+1	; 0x01
    2c78:	fa 81       	ldd	r31, Y+2	; 0x02
    2c7a:	80 81       	ld	r24, Z
    2c7c:	0e 94 cc 14 	call	0x2998	; 0x2998 <HLCD_voidSendData>
		L_u8Incrementer++;
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	9a 81       	ldd	r25, Y+2	; 0x02
    2c84:	01 96       	adiw	r24, 0x01	; 1
    2c86:	9a 83       	std	Y+2, r25	; 0x02
    2c88:	89 83       	std	Y+1, r24	; 0x01
	}
}
void HLCD_voidSendString(u8 *A_Pu8String)
{
	u8 *L_u8Incrementer=A_Pu8String;
	while(*L_u8Incrementer!=0)
    2c8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c8e:	80 81       	ld	r24, Z
    2c90:	88 23       	and	r24, r24
    2c92:	89 f7       	brne	.-30     	; 0x2c76 <HLCD_voidSendString+0x1a>
	{
		HLCD_voidSendData(*L_u8Incrementer);
		L_u8Incrementer++;
	}
}
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <HLCD_voidSetCursor_DDRAM>:

void HLCD_voidSetCursor_DDRAM(u8 A_u8RowNum,u8 A_u8ColNum)
{
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	00 d0       	rcall	.+0      	; 0x2ca8 <HLCD_voidSetCursor_DDRAM+0x6>
    2ca8:	0f 92       	push	r0
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	8a 83       	std	Y+2, r24	; 0x02
    2cb0:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8DDramMemAddress;

	if((A_u8RowNum>=LCD_MinRowSize && A_u8RowNum<=LCD_MaxRowSize) && (A_u8ColNum>=LCD_MinCloSize && A_u8ColNum<=LCD_MaxColSize))
    2cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb4:	88 23       	and	r24, r24
    2cb6:	c9 f0       	breq	.+50     	; 0x2cea <HLCD_voidSetCursor_DDRAM+0x48>
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	83 30       	cpi	r24, 0x03	; 3
    2cbc:	b0 f4       	brcc	.+44     	; 0x2cea <HLCD_voidSetCursor_DDRAM+0x48>
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	88 23       	and	r24, r24
    2cc2:	99 f0       	breq	.+38     	; 0x2cea <HLCD_voidSetCursor_DDRAM+0x48>
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	81 31       	cpi	r24, 0x11	; 17
    2cc8:	80 f4       	brcc	.+32     	; 0x2cea <HLCD_voidSetCursor_DDRAM+0x48>
	{
		if (A_u8RowNum==LCD_ROW1)
    2cca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ccc:	81 30       	cpi	r24, 0x01	; 1
    2cce:	21 f4       	brne	.+8      	; 0x2cd8 <HLCD_voidSetCursor_DDRAM+0x36>
		{
			L_u8DDramMemAddress=LCD_FirstRowStart+A_u8ColNum-1;
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	81 58       	subi	r24, 0x81	; 129
    2cd4:	89 83       	std	Y+1, r24	; 0x01
    2cd6:	06 c0       	rjmp	.+12     	; 0x2ce4 <HLCD_voidSetCursor_DDRAM+0x42>
		}
		else if(A_u8RowNum==LCD_ROW2)
    2cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cda:	82 30       	cpi	r24, 0x02	; 2
    2cdc:	19 f4       	brne	.+6      	; 0x2ce4 <HLCD_voidSetCursor_DDRAM+0x42>
		{
			L_u8DDramMemAddress=LCD_SecondRowStart+A_u8ColNum-1;
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	81 54       	subi	r24, 0x41	; 65
    2ce2:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			//This part will be added if the lcd is changed to bigger one
		}
		HLCD_voidSendCom(L_u8DDramMemAddress);
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	0e 94 7d 15 	call	0x2afa	; 0x2afa <HLCD_voidSendCom>
	}
	else
	{
		//Do Nothing
	}
}
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <HLCD_voidSendSpecial>:


void HLCD_voidSendSpecial(u8 * A_u8PSpecialChar ,u8 A_u8BlockNum,u8 A_u8RowNum,u8 A_u8ColNum)
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <HLCD_voidSendSpecial+0x6>
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <HLCD_voidSendSpecial+0x8>
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <HLCD_voidSendSpecial+0xa>
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	9b 83       	std	Y+3, r25	; 0x03
    2d06:	8a 83       	std	Y+2, r24	; 0x02
    2d08:	6c 83       	std	Y+4, r22	; 0x04
    2d0a:	4d 83       	std	Y+5, r20	; 0x05
    2d0c:	2e 83       	std	Y+6, r18	; 0x06
	u8 L_u8Incrementer;
	HLCD_voidSendCom(LCD_CgromStartAddress+A_u8BlockNum*LCD_CgromMaxBlockNumber);
    2d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d10:	88 2f       	mov	r24, r24
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	08 96       	adiw	r24, 0x08	; 8
    2d16:	88 0f       	add	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	88 0f       	add	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	0e 94 7d 15 	call	0x2afa	; 0x2afa <HLCD_voidSendCom>
	for(L_u8Incrementer=LCD_MinPixelsRowNo;L_u8Incrementer<LCD_MaxPixelsRowNo;L_u8Incrementer++)
    2d26:	19 82       	std	Y+1, r1	; 0x01
    2d28:	0e c0       	rjmp	.+28     	; 0x2d46 <HLCD_voidSendSpecial+0x50>
	{
		HLCD_voidSendData(*(A_u8PSpecialChar+L_u8Incrementer));
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	28 2f       	mov	r18, r24
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	8a 81       	ldd	r24, Y+2	; 0x02
    2d32:	9b 81       	ldd	r25, Y+3	; 0x03
    2d34:	fc 01       	movw	r30, r24
    2d36:	e2 0f       	add	r30, r18
    2d38:	f3 1f       	adc	r31, r19
    2d3a:	80 81       	ld	r24, Z
    2d3c:	0e 94 cc 14 	call	0x2998	; 0x2998 <HLCD_voidSendData>

void HLCD_voidSendSpecial(u8 * A_u8PSpecialChar ,u8 A_u8BlockNum,u8 A_u8RowNum,u8 A_u8ColNum)
{
	u8 L_u8Incrementer;
	HLCD_voidSendCom(LCD_CgromStartAddress+A_u8BlockNum*LCD_CgromMaxBlockNumber);
	for(L_u8Incrementer=LCD_MinPixelsRowNo;L_u8Incrementer<LCD_MaxPixelsRowNo;L_u8Incrementer++)
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
    2d42:	8f 5f       	subi	r24, 0xFF	; 255
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	88 30       	cpi	r24, 0x08	; 8
    2d4a:	78 f3       	brcs	.-34     	; 0x2d2a <HLCD_voidSendSpecial+0x34>
	{
		HLCD_voidSendData(*(A_u8PSpecialChar+L_u8Incrementer));
	}
	HLCD_voidSetCursor_DDRAM(A_u8RowNum,A_u8ColNum);
    2d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4e:	6e 81       	ldd	r22, Y+6	; 0x06
    2d50:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <HLCD_voidSetCursor_DDRAM>
	HLCD_voidSendData(A_u8BlockNum);
    2d54:	8c 81       	ldd	r24, Y+4	; 0x04
    2d56:	0e 94 cc 14 	call	0x2998	; 0x2998 <HLCD_voidSendData>
}
    2d5a:	26 96       	adiw	r28, 0x06	; 6
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	08 95       	ret

00002d6c <HKP_voidKpInit>:
#include "util/delay.h"

u8 G_u8PressedValue=NoValueEntered;
u8 G_u8KpChars [4][4]={{'7','8','9','/'},{'4','5','6','x'},{'1','2','3','-'},{'O','0','=','+'}};
void HKP_voidKpInit(void)
{
    2d6c:	df 93       	push	r29
    2d6e:	cf 93       	push	r28
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
	MDIO_void_PortWrite(KP_PORT,KP_ALL_PINS_HIGH);
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	6f ef       	ldi	r22, 0xFF	; 255
    2d78:	0e 94 05 11 	call	0x220a	; 0x220a <MDIO_void_PortWrite>
	if(KP_COL_START==PIN0 && KP_ROW_START==PIN4)
	{
		MDIO_void_PortSetDir(KP_PORT,KP_LOWER_HIGH);
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	6f e0       	ldi	r22, 0x0F	; 15
    2d80:	0e 94 c4 10 	call	0x2188	; 0x2188 <MDIO_void_PortSetDir>
	}
	else
	{

	}
}
    2d84:	cf 91       	pop	r28
    2d86:	df 91       	pop	r29
    2d88:	08 95       	ret

00002d8a <HKP_u8GetPressedValue>:

u8 HKP_u8GetPressedValue(void)
{
    2d8a:	df 93       	push	r29
    2d8c:	cf 93       	push	r28
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	60 97       	sbiw	r28, 0x10	; 16
    2d94:	0f b6       	in	r0, 0x3f	; 63
    2d96:	f8 94       	cli
    2d98:	de bf       	out	0x3e, r29	; 62
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8ColIncrementer;
	u8 L_u8RowIncrementer;
	for(L_u8ColIncrementer=KP_COL_START;L_u8ColIncrementer<=KP_COL_END;L_u8ColIncrementer++)
    2d9e:	18 8a       	std	Y+16, r1	; 0x10
    2da0:	ac c0       	rjmp	.+344    	; 0x2efa <HKP_u8GetPressedValue+0x170>
	{
		MDIO_void_PinWrite(KP_PORT,L_u8ColIncrementer,LOW);
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	68 89       	ldd	r22, Y+16	; 0x10
    2da6:	40 e0       	ldi	r20, 0x00	; 0
    2da8:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <MDIO_void_PinWrite>
		for(L_u8RowIncrementer=KP_ROW_START;L_u8RowIncrementer<=KP_ROW_END;L_u8RowIncrementer++)
    2dac:	84 e0       	ldi	r24, 0x04	; 4
    2dae:	8f 87       	std	Y+15, r24	; 0x0f
    2db0:	98 c0       	rjmp	.+304    	; 0x2ee2 <HKP_u8GetPressedValue+0x158>
		{
			if(MDIO_u8_PinRead(KP_PORT,L_u8RowIncrementer)==PRESSED)
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	6f 85       	ldd	r22, Y+15	; 0x0f
    2db6:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <MDIO_u8_PinRead>
    2dba:	88 23       	and	r24, r24
    2dbc:	09 f0       	breq	.+2      	; 0x2dc0 <HKP_u8GetPressedValue+0x36>
    2dbe:	8e c0       	rjmp	.+284    	; 0x2edc <HKP_u8GetPressedValue+0x152>
			{
				G_u8PressedValue=G_u8KpChars[L_u8RowIncrementer-KP_ROW_START][L_u8ColIncrementer-KP_COL_START];
    2dc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dc2:	88 2f       	mov	r24, r24
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	ac 01       	movw	r20, r24
    2dc8:	44 50       	subi	r20, 0x04	; 4
    2dca:	50 40       	sbci	r21, 0x00	; 0
    2dcc:	88 89       	ldd	r24, Y+16	; 0x10
    2dce:	28 2f       	mov	r18, r24
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	ca 01       	movw	r24, r20
    2dd4:	88 0f       	add	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	88 0f       	add	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	82 0f       	add	r24, r18
    2dde:	93 1f       	adc	r25, r19
    2de0:	fc 01       	movw	r30, r24
    2de2:	e4 57       	subi	r30, 0x74	; 116
    2de4:	fe 4f       	sbci	r31, 0xFE	; 254
    2de6:	80 81       	ld	r24, Z
    2de8:	80 93 8b 01 	sts	0x018B, r24
				while(MDIO_u8_PinRead(KP_PORT,L_u8RowIncrementer)==PRESSED);
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	6f 85       	ldd	r22, Y+15	; 0x0f
    2df0:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <MDIO_u8_PinRead>
    2df4:	88 23       	and	r24, r24
    2df6:	d1 f3       	breq	.-12     	; 0x2dec <HKP_u8GetPressedValue+0x62>
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	a0 e2       	ldi	r26, 0x20	; 32
    2dfe:	b1 e4       	ldi	r27, 0x41	; 65
    2e00:	8b 87       	std	Y+11, r24	; 0x0b
    2e02:	9c 87       	std	Y+12, r25	; 0x0c
    2e04:	ad 87       	std	Y+13, r26	; 0x0d
    2e06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	4a ef       	ldi	r20, 0xFA	; 250
    2e16:	54 e4       	ldi	r21, 0x44	; 68
    2e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	8f 83       	std	Y+7, r24	; 0x07
    2e22:	98 87       	std	Y+8, r25	; 0x08
    2e24:	a9 87       	std	Y+9, r26	; 0x09
    2e26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e28:	6f 81       	ldd	r22, Y+7	; 0x07
    2e2a:	78 85       	ldd	r23, Y+8	; 0x08
    2e2c:	89 85       	ldd	r24, Y+9	; 0x09
    2e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	40 e8       	ldi	r20, 0x80	; 128
    2e36:	5f e3       	ldi	r21, 0x3F	; 63
    2e38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e3c:	88 23       	and	r24, r24
    2e3e:	2c f4       	brge	.+10     	; 0x2e4a <HKP_u8GetPressedValue+0xc0>
		__ticks = 1;
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	9e 83       	std	Y+6, r25	; 0x06
    2e46:	8d 83       	std	Y+5, r24	; 0x05
    2e48:	3f c0       	rjmp	.+126    	; 0x2ec8 <HKP_u8GetPressedValue+0x13e>
	else if (__tmp > 65535)
    2e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e4c:	78 85       	ldd	r23, Y+8	; 0x08
    2e4e:	89 85       	ldd	r24, Y+9	; 0x09
    2e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	3f ef       	ldi	r19, 0xFF	; 255
    2e56:	4f e7       	ldi	r20, 0x7F	; 127
    2e58:	57 e4       	ldi	r21, 0x47	; 71
    2e5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e5e:	18 16       	cp	r1, r24
    2e60:	4c f5       	brge	.+82     	; 0x2eb4 <HKP_u8GetPressedValue+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e2       	ldi	r20, 0x20	; 32
    2e70:	51 e4       	ldi	r21, 0x41	; 65
    2e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	cd 01       	movw	r24, r26
    2e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	9e 83       	std	Y+6, r25	; 0x06
    2e88:	8d 83       	std	Y+5, r24	; 0x05
    2e8a:	0f c0       	rjmp	.+30     	; 0x2eaa <HKP_u8GetPressedValue+0x120>
    2e8c:	88 ec       	ldi	r24, 0xC8	; 200
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	9c 83       	std	Y+4, r25	; 0x04
    2e92:	8b 83       	std	Y+3, r24	; 0x03
    2e94:	8b 81       	ldd	r24, Y+3	; 0x03
    2e96:	9c 81       	ldd	r25, Y+4	; 0x04
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	f1 f7       	brne	.-4      	; 0x2e98 <HKP_u8GetPressedValue+0x10e>
    2e9c:	9c 83       	std	Y+4, r25	; 0x04
    2e9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	9e 83       	std	Y+6, r25	; 0x06
    2ea8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2eac:	9e 81       	ldd	r25, Y+6	; 0x06
    2eae:	00 97       	sbiw	r24, 0x00	; 0
    2eb0:	69 f7       	brne	.-38     	; 0x2e8c <HKP_u8GetPressedValue+0x102>
    2eb2:	14 c0       	rjmp	.+40     	; 0x2edc <HKP_u8GetPressedValue+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb6:	78 85       	ldd	r23, Y+8	; 0x08
    2eb8:	89 85       	ldd	r24, Y+9	; 0x09
    2eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	9e 83       	std	Y+6, r25	; 0x06
    2ec6:	8d 83       	std	Y+5, r24	; 0x05
    2ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eca:	9e 81       	ldd	r25, Y+6	; 0x06
    2ecc:	9a 83       	std	Y+2, r25	; 0x02
    2ece:	89 83       	std	Y+1, r24	; 0x01
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	f1 f7       	brne	.-4      	; 0x2ed4 <HKP_u8GetPressedValue+0x14a>
    2ed8:	9a 83       	std	Y+2, r25	; 0x02
    2eda:	89 83       	std	Y+1, r24	; 0x01
	u8 L_u8ColIncrementer;
	u8 L_u8RowIncrementer;
	for(L_u8ColIncrementer=KP_COL_START;L_u8ColIncrementer<=KP_COL_END;L_u8ColIncrementer++)
	{
		MDIO_void_PinWrite(KP_PORT,L_u8ColIncrementer,LOW);
		for(L_u8RowIncrementer=KP_ROW_START;L_u8RowIncrementer<=KP_ROW_END;L_u8RowIncrementer++)
    2edc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ede:	8f 5f       	subi	r24, 0xFF	; 255
    2ee0:	8f 87       	std	Y+15, r24	; 0x0f
    2ee2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ee4:	88 30       	cpi	r24, 0x08	; 8
    2ee6:	08 f4       	brcc	.+2      	; 0x2eea <HKP_u8GetPressedValue+0x160>
    2ee8:	64 cf       	rjmp	.-312    	; 0x2db2 <HKP_u8GetPressedValue+0x28>
				G_u8PressedValue=G_u8KpChars[L_u8RowIncrementer-KP_ROW_START][L_u8ColIncrementer-KP_COL_START];
				while(MDIO_u8_PinRead(KP_PORT,L_u8RowIncrementer)==PRESSED);
				_delay_ms(10); //delay for bouncing
			}
		}
		MDIO_void_PinWrite(KP_PORT,L_u8ColIncrementer,HIGH);
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	68 89       	ldd	r22, Y+16	; 0x10
    2eee:	41 e0       	ldi	r20, 0x01	; 1
    2ef0:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <MDIO_void_PinWrite>

u8 HKP_u8GetPressedValue(void)
{
	u8 L_u8ColIncrementer;
	u8 L_u8RowIncrementer;
	for(L_u8ColIncrementer=KP_COL_START;L_u8ColIncrementer<=KP_COL_END;L_u8ColIncrementer++)
    2ef4:	88 89       	ldd	r24, Y+16	; 0x10
    2ef6:	8f 5f       	subi	r24, 0xFF	; 255
    2ef8:	88 8b       	std	Y+16, r24	; 0x10
    2efa:	88 89       	ldd	r24, Y+16	; 0x10
    2efc:	84 30       	cpi	r24, 0x04	; 4
    2efe:	08 f4       	brcc	.+2      	; 0x2f02 <HKP_u8GetPressedValue+0x178>
    2f00:	50 cf       	rjmp	.-352    	; 0x2da2 <HKP_u8GetPressedValue+0x18>
				_delay_ms(10); //delay for bouncing
			}
		}
		MDIO_void_PinWrite(KP_PORT,L_u8ColIncrementer,HIGH);
	}
	return G_u8PressedValue;
    2f02:	80 91 8b 01 	lds	r24, 0x018B
}
    2f06:	60 96       	adiw	r28, 0x10	; 16
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	f8 94       	cli
    2f0c:	de bf       	out	0x3e, r29	; 62
    2f0e:	0f be       	out	0x3f, r0	; 63
    2f10:	cd bf       	out	0x3d, r28	; 61
    2f12:	cf 91       	pop	r28
    2f14:	df 91       	pop	r29
    2f16:	08 95       	ret

00002f18 <HEEPROM_voidInit>:
#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/MI2C/I2C_int.h"
#include "EEPROM_init.h"

void HEEPROM_voidInit (u32 A_u32Scl)
{
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	00 d0       	rcall	.+0      	; 0x2f1e <HEEPROM_voidInit+0x6>
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <HEEPROM_voidInit+0x8>
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	69 83       	std	Y+1, r22	; 0x01
    2f26:	7a 83       	std	Y+2, r23	; 0x02
    2f28:	8b 83       	std	Y+3, r24	; 0x03
    2f2a:	9c 83       	std	Y+4, r25	; 0x04
	MTWI_voidMasterInt(A_u32Scl) ;
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f30:	ab 81       	ldd	r26, Y+3	; 0x03
    2f32:	bc 81       	ldd	r27, Y+4	; 0x04
    2f34:	bc 01       	movw	r22, r24
    2f36:	cd 01       	movw	r24, r26
    2f38:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <MTWI_voidMasterInt>
}
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	cf 91       	pop	r28
    2f46:	df 91       	pop	r29
    2f48:	08 95       	ret

00002f4a <HEEPROM_voidWriteByte>:

void HEEPROM_voidWriteByte (u16 A_u16Address , u8 A_u8Data)
{
    2f4a:	df 93       	push	r29
    2f4c:	cf 93       	push	r28
    2f4e:	00 d0       	rcall	.+0      	; 0x2f50 <HEEPROM_voidWriteByte+0x6>
    2f50:	00 d0       	rcall	.+0      	; 0x2f52 <HEEPROM_voidWriteByte+0x8>
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
    2f56:	9b 83       	std	Y+3, r25	; 0x03
    2f58:	8a 83       	std	Y+2, r24	; 0x02
    2f5a:	6c 83       	std	Y+4, r22	; 0x04
	u8 L_u8WordAddress ;
	L_u8WordAddress = ((0b10100000) | ((A_u16Address>>8)<<1)) ; //Address format (10 address bits,r/w-bit)
    2f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f60:	89 2f       	mov	r24, r25
    2f62:	99 27       	eor	r25, r25
    2f64:	88 0f       	add	r24, r24
    2f66:	80 6a       	ori	r24, 0xA0	; 160
    2f68:	89 83       	std	Y+1, r24	; 0x01
	MTWI_voidMasterSendStartCondition() ;
    2f6a:	0e 94 34 0b 	call	0x1668	; 0x1668 <MTWI_voidMasterSendStartCondition>
	MTWI_voidMasterSendAddress(L_u8WordAddress) ;
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <MTWI_voidMasterSendAddress>
	MTWI_voidMasterSendData((u8)A_u16Address) ;
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	0e 94 be 0c 	call	0x197c	; 0x197c <MTWI_voidMasterSendData>
	MTWI_voidMasterSendData(A_u8Data) ;
    2f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f7c:	0e 94 be 0c 	call	0x197c	; 0x197c <MTWI_voidMasterSendData>
	MTWI_voidMasterSendStopCondition() ;
    2f80:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <MTWI_voidMasterSendStopCondition>
}
    2f84:	0f 90       	pop	r0
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	08 95       	ret

00002f92 <HEEPROM_u8ReadByte>:

u8 HEEPROM_u8ReadByte (u16 A_u16Address)
{
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <HEEPROM_u8ReadByte+0x6>
    2f98:	00 d0       	rcall	.+0      	; 0x2f9a <HEEPROM_u8ReadByte+0x8>
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
    2f9e:	9c 83       	std	Y+4, r25	; 0x04
    2fa0:	8b 83       	std	Y+3, r24	; 0x03
	u8 L_u8WordAddress ;
	u8 L_u8ReturnByte ;
	L_u8WordAddress = ((0b10100000) | ((A_u16Address>>8)<<1)) ;
    2fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa6:	89 2f       	mov	r24, r25
    2fa8:	99 27       	eor	r25, r25
    2faa:	88 0f       	add	r24, r24
    2fac:	80 6a       	ori	r24, 0xA0	; 160
    2fae:	8a 83       	std	Y+2, r24	; 0x02
	MTWI_voidMasterSendStartCondition() ;
    2fb0:	0e 94 34 0b 	call	0x1668	; 0x1668 <MTWI_voidMasterSendStartCondition>
	MTWI_voidMasterSendAddress(L_u8WordAddress) ;
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <MTWI_voidMasterSendAddress>
	MTWI_voidMasterSendData((u8)A_u16Address) ;
    2fba:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbc:	0e 94 be 0c 	call	0x197c	; 0x197c <MTWI_voidMasterSendData>
	MTWI_voidMasterSendRepetedStartCondition() ;
    2fc0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <MTWI_voidMasterSendRepetedStartCondition>
	L_u8WordAddress = ((0b10100001) | ((A_u16Address>>8)<<1)) ;
    2fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc8:	89 2f       	mov	r24, r25
    2fca:	99 27       	eor	r25, r25
    2fcc:	88 0f       	add	r24, r24
    2fce:	81 6a       	ori	r24, 0xA1	; 161
    2fd0:	8a 83       	std	Y+2, r24	; 0x02
	MTWI_voidMasterSendAddressToRead(L_u8WordAddress) ;
    2fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd4:	0e 94 97 0c 	call	0x192e	; 0x192e <MTWI_voidMasterSendAddressToRead>
	L_u8ReturnByte = MTWI_voidMasterReadDataWithNACK() ;
    2fd8:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <MTWI_voidMasterReadDataWithNACK>
    2fdc:	89 83       	std	Y+1, r24	; 0x01
	MTWI_voidMasterSendStopCondition() ;
    2fde:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <MTWI_voidMasterSendStopCondition>
	return L_u8ReturnByte ;
    2fe2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	cf 91       	pop	r28
    2fee:	df 91       	pop	r29
    2ff0:	08 95       	ret

00002ff2 <E2PROMStorePass>:
 *      Author: DELL
 */
#include "app.h"

void E2PROMStorePass(void)
{
    2ff2:	df 93       	push	r29
    2ff4:	cf 93       	push	r28
    2ff6:	00 d0       	rcall	.+0      	; 0x2ff8 <E2PROMStorePass+0x6>
    2ff8:	00 d0       	rcall	.+0      	; 0x2ffa <E2PROMStorePass+0x8>
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
	HEEPROM_voidInit(90000);
    2ffe:	60 e9       	ldi	r22, 0x90	; 144
    3000:	7f e5       	ldi	r23, 0x5F	; 95
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <HEEPROM_voidInit>
	for(u32 i=0;i<4;i++)
    300a:	19 82       	std	Y+1, r1	; 0x01
    300c:	1a 82       	std	Y+2, r1	; 0x02
    300e:	1b 82       	std	Y+3, r1	; 0x03
    3010:	1c 82       	std	Y+4, r1	; 0x04
    3012:	14 c0       	rjmp	.+40     	; 0x303c <E2PROMStorePass+0x4a>
	{
		HEEPROM_voidWriteByte(i,'1'+i);
    3014:	29 81       	ldd	r18, Y+1	; 0x01
    3016:	3a 81       	ldd	r19, Y+2	; 0x02
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	48 2f       	mov	r20, r24
    301c:	4f 5c       	subi	r20, 0xCF	; 207
    301e:	c9 01       	movw	r24, r18
    3020:	64 2f       	mov	r22, r20
    3022:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <HEEPROM_voidWriteByte>
#include "app.h"

void E2PROMStorePass(void)
{
	HEEPROM_voidInit(90000);
	for(u32 i=0;i<4;i++)
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	9a 81       	ldd	r25, Y+2	; 0x02
    302a:	ab 81       	ldd	r26, Y+3	; 0x03
    302c:	bc 81       	ldd	r27, Y+4	; 0x04
    302e:	01 96       	adiw	r24, 0x01	; 1
    3030:	a1 1d       	adc	r26, r1
    3032:	b1 1d       	adc	r27, r1
    3034:	89 83       	std	Y+1, r24	; 0x01
    3036:	9a 83       	std	Y+2, r25	; 0x02
    3038:	ab 83       	std	Y+3, r26	; 0x03
    303a:	bc 83       	std	Y+4, r27	; 0x04
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	9a 81       	ldd	r25, Y+2	; 0x02
    3040:	ab 81       	ldd	r26, Y+3	; 0x03
    3042:	bc 81       	ldd	r27, Y+4	; 0x04
    3044:	84 30       	cpi	r24, 0x04	; 4
    3046:	91 05       	cpc	r25, r1
    3048:	a1 05       	cpc	r26, r1
    304a:	b1 05       	cpc	r27, r1
    304c:	18 f3       	brcs	.-58     	; 0x3014 <E2PROMStorePass+0x22>
	{
		HEEPROM_voidWriteByte(i,'1'+i);
	}
}
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	cf 91       	pop	r28
    3058:	df 91       	pop	r29
    305a:	08 95       	ret

0000305c <CheckPass>:

void CheckPass(void)
{
    305c:	df 93       	push	r29
    305e:	cf 93       	push	r28
    3060:	cd b7       	in	r28, 0x3d	; 61
    3062:	de b7       	in	r29, 0x3e	; 62
    3064:	28 97       	sbiw	r28, 0x08	; 8
    3066:	0f b6       	in	r0, 0x3f	; 63
    3068:	f8 94       	cli
    306a:	de bf       	out	0x3e, r29	; 62
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidInit();
    3070:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <HLCD_voidInit>
	HKP_voidKpInit();
    3074:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <HKP_voidKpInit>
	u8 L_u8PressedValue=255,L_u8CopyPressedValue,L_u8Check=1,L_u8Counter=0;
    3078:	8f ef       	ldi	r24, 0xFF	; 255
    307a:	88 87       	std	Y+8, r24	; 0x08
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	8e 83       	std	Y+6, r24	; 0x06
    3080:	1d 82       	std	Y+5, r1	; 0x05
    3082:	14 c1       	rjmp	.+552    	; 0x32ac <CheckPass+0x250>
	while(L_u8Check==1)
	{
		L_u8PressedValue=HKP_u8GetPressedValue();
    3084:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <HKP_u8GetPressedValue>
    3088:	88 87       	std	Y+8, r24	; 0x08
		G_u8PressedValue=255;
    308a:	8f ef       	ldi	r24, 0xFF	; 255
    308c:	80 93 8b 01 	sts	0x018B, r24
		if(L_u8PressedValue =='=')
    3090:	88 85       	ldd	r24, Y+8	; 0x08
    3092:	8d 33       	cpi	r24, 0x3D	; 61
    3094:	09 f0       	breq	.+2      	; 0x3098 <CheckPass+0x3c>
    3096:	f0 c0       	rjmp	.+480    	; 0x3278 <CheckPass+0x21c>
		{
			HLCD_voidSendData(L_u8PressedValue);
    3098:	88 85       	ldd	r24, Y+8	; 0x08
    309a:	0e 94 cc 14 	call	0x2998	; 0x2998 <HLCD_voidSendData>
			if(L_u8Counter==0 || L_u8Counter>1)
    309e:	8d 81       	ldd	r24, Y+5	; 0x05
    30a0:	88 23       	and	r24, r24
    30a2:	19 f0       	breq	.+6      	; 0x30aa <CheckPass+0x4e>
    30a4:	8d 81       	ldd	r24, Y+5	; 0x05
    30a6:	82 30       	cpi	r24, 0x02	; 2
    30a8:	70 f1       	brcs	.+92     	; 0x3106 <CheckPass+0xaa>
			{
				HLCD_voidSetCursor_DDRAM(1,1);
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	61 e0       	ldi	r22, 0x01	; 1
    30ae:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <HLCD_voidSetCursor_DDRAM>
				HLCD_voidSendString("Incorrect");
    30b2:	80 e6       	ldi	r24, 0x60	; 96
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <HLCD_voidSendString>
				L_u8Counter=0;
    30ba:	1d 82       	std	Y+5, r1	; 0x05
				/*Timer Clear Screen After 1 Sec*/
				TMR2_VoidInit();
    30bc:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <TMR2_VoidInit>
				TMR2_OCM_SetCallBack(Time_Count_ClrScreen);
    30c0:	81 ea       	ldi	r24, 0xA1	; 161
    30c2:	99 e1       	ldi	r25, 0x19	; 25
    30c4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <TMR2_OCM_SetCallBack>
				TMR2_VoidSetOCMValue(200);
    30c8:	88 ec       	ldi	r24, 0xC8	; 200
    30ca:	0e 94 50 08 	call	0x10a0	; 0x10a0 <TMR2_VoidSetOCMValue>
				TMR2_VoidOCMInterruptEnable();
    30ce:	0e 94 18 08 	call	0x1030	; 0x1030 <TMR2_VoidOCMInterruptEnable>
				MGINT_voidGlobalIntEnable();
    30d2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <MGINT_voidGlobalIntEnable>
				/*Turning on red led for 700 ms*/
				MDIO_void_SetDir(DIO_PORTC,PINC7,PIN_OUTPUT);
    30d6:	82 e0       	ldi	r24, 0x02	; 2
    30d8:	67 e0       	ldi	r22, 0x07	; 7
    30da:	41 e0       	ldi	r20, 0x01	; 1
    30dc:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_void_SetDir>
				MDIO_void_PinWrite(DIO_PORTC,PINC7,HIGH);
    30e0:	82 e0       	ldi	r24, 0x02	; 2
    30e2:	67 e0       	ldi	r22, 0x07	; 7
    30e4:	41 e0       	ldi	r20, 0x01	; 1
    30e6:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <MDIO_void_PinWrite>
				TMR0_VoidInit();
    30ea:	0e 94 e6 09 	call	0x13cc	; 0x13cc <TMR0_VoidInit>
				TMR0_OCM_SetCallBack(Time_Count_RedLedToggle);
    30ee:	8b e1       	ldi	r24, 0x1B	; 27
    30f0:	9a e1       	ldi	r25, 0x1A	; 26
    30f2:	0e 94 84 0a 	call	0x1508	; 0x1508 <TMR0_OCM_SetCallBack>
				TMR0_VoidSetOCMValue(140);
    30f6:	8c e8       	ldi	r24, 0x8C	; 140
    30f8:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <TMR0_VoidSetOCMValue>
				TMR0_VoidOCMInterruptEnable();
    30fc:	0e 94 2c 0a 	call	0x1458	; 0x1458 <TMR0_VoidOCMInterruptEnable>
				MGINT_voidGlobalIntEnable();
    3100:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <MGINT_voidGlobalIntEnable>
    3104:	d3 c0       	rjmp	.+422    	; 0x32ac <CheckPass+0x250>

			}
			else if (L_u8Counter==1)
    3106:	8d 81       	ldd	r24, Y+5	; 0x05
    3108:	81 30       	cpi	r24, 0x01	; 1
    310a:	09 f0       	breq	.+2      	; 0x310e <CheckPass+0xb2>
    310c:	cf c0       	rjmp	.+414    	; 0x32ac <CheckPass+0x250>
			{
				for (u32 i=0;i<4;i++)
    310e:	19 82       	std	Y+1, r1	; 0x01
    3110:	1a 82       	std	Y+2, r1	; 0x02
    3112:	1b 82       	std	Y+3, r1	; 0x03
    3114:	1c 82       	std	Y+4, r1	; 0x04
    3116:	74 c0       	rjmp	.+232    	; 0x3200 <CheckPass+0x1a4>
				{
					if(L_u8CopyPressedValue==HEEPROM_u8ReadByte(i))
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	9a 81       	ldd	r25, Y+2	; 0x02
    311c:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <HEEPROM_u8ReadByte>
    3120:	98 2f       	mov	r25, r24
    3122:	8f 81       	ldd	r24, Y+7	; 0x07
    3124:	98 17       	cp	r25, r24
    3126:	09 f0       	breq	.+2      	; 0x312a <CheckPass+0xce>
    3128:	60 c0       	rjmp	.+192    	; 0x31ea <CheckPass+0x18e>
					{
						HLCD_voidSetCursor_DDRAM(1,1);
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	61 e0       	ldi	r22, 0x01	; 1
    312e:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <HLCD_voidSetCursor_DDRAM>
						HLCD_voidSendString("Correct");
    3132:	8a e6       	ldi	r24, 0x6A	; 106
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <HLCD_voidSendString>
						/*Turning on green led for 700 ms*/
						MDIO_void_SetDir(DIO_PORTC,PINC6,PIN_OUTPUT);
    313a:	82 e0       	ldi	r24, 0x02	; 2
    313c:	66 e0       	ldi	r22, 0x06	; 6
    313e:	41 e0       	ldi	r20, 0x01	; 1
    3140:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_void_SetDir>
						MDIO_void_PinWrite(DIO_PORTC,PINC6,HIGH);
    3144:	82 e0       	ldi	r24, 0x02	; 2
    3146:	66 e0       	ldi	r22, 0x06	; 6
    3148:	41 e0       	ldi	r20, 0x01	; 1
    314a:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <MDIO_void_PinWrite>
						TMR0_VoidInit();
    314e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <TMR0_VoidInit>
						TMR0_OCM_SetCallBack(Time_Count_GreenLedToggle);
    3152:	83 e5       	ldi	r24, 0x53	; 83
    3154:	9a e1       	ldi	r25, 0x1A	; 26
    3156:	0e 94 84 0a 	call	0x1508	; 0x1508 <TMR0_OCM_SetCallBack>
						TMR0_VoidSetOCMValue(140);
    315a:	8c e8       	ldi	r24, 0x8C	; 140
    315c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <TMR0_VoidSetOCMValue>
						TMR0_VoidOCMInterruptEnable();
    3160:	0e 94 2c 0a 	call	0x1458	; 0x1458 <TMR0_VoidOCMInterruptEnable>
						MGINT_voidGlobalIntEnable();
    3164:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <MGINT_voidGlobalIntEnable>
						/*Moving SVM*/
						MDIO_void_SetDir(DIO_PORTD,PIND5,PIN_OUTPUT);
    3168:	83 e0       	ldi	r24, 0x03	; 3
    316a:	65 e0       	ldi	r22, 0x05	; 5
    316c:	41 e0       	ldi	r20, 0x01	; 1
    316e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_void_SetDir>
						MTIMER1_voidTimer1Init();
    3172:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <MTIMER1_voidTimer1Init>
						MTIMER1_voidSetICR1((u16)SV_Period_Value);
    3176:	8f e1       	ldi	r24, 0x1F	; 31
    3178:	9e e4       	ldi	r25, 0x4E	; 78
    317a:	0e 94 66 09 	call	0x12cc	; 0x12cc <MTIMER1_voidSetICR1>
						HServoMotor(90);
    317e:	60 e0       	ldi	r22, 0x00	; 0
    3180:	70 e0       	ldi	r23, 0x00	; 0
    3182:	84 eb       	ldi	r24, 0xB4	; 180
    3184:	92 e4       	ldi	r25, 0x42	; 66
    3186:	0e 94 9b 11 	call	0x2336	; 0x2336 <HServoMotor>
						TMR2_VoidInit();
    318a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <TMR2_VoidInit>
						TMR2_OCM_SetCallBack(Time_Count_SVMReturn);
    318e:	81 ee       	ldi	r24, 0xE1	; 225
    3190:	99 e1       	ldi	r25, 0x19	; 25
    3192:	0e 94 70 08 	call	0x10e0	; 0x10e0 <TMR2_OCM_SetCallBack>
						TMR2_VoidSetOCMValue(200);
    3196:	88 ec       	ldi	r24, 0xC8	; 200
    3198:	0e 94 50 08 	call	0x10a0	; 0x10a0 <TMR2_VoidSetOCMValue>
						TMR2_VoidOCMInterruptEnable();
    319c:	0e 94 18 08 	call	0x1030	; 0x1030 <TMR2_VoidOCMInterruptEnable>
						MGINT_voidGlobalIntEnable();
    31a0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <MGINT_voidGlobalIntEnable>
						/*Sending Char A through Uart*/

						MDIO_void_SetDir(DIO_PORTD,PIND0,PIN_INPUT);
    31a4:	83 e0       	ldi	r24, 0x03	; 3
    31a6:	60 e0       	ldi	r22, 0x00	; 0
    31a8:	40 e0       	ldi	r20, 0x00	; 0
    31aa:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_void_SetDir>
						MDIO_void_SetDir(DIO_PORTD,PIND1,PIN_OUTPUT);
    31ae:	83 e0       	ldi	r24, 0x03	; 3
    31b0:	61 e0       	ldi	r22, 0x01	; 1
    31b2:	41 e0       	ldi	r20, 0x01	; 1
    31b4:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_void_SetDir>
						MDIO_void_SetDir(DIO_PORTC,PIND2,PIN_OUTPUT);
    31b8:	82 e0       	ldi	r24, 0x02	; 2
    31ba:	62 e0       	ldi	r22, 0x02	; 2
    31bc:	41 e0       	ldi	r20, 0x01	; 1
    31be:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_void_SetDir>
						MDIO_void_PinWrite(DIO_PORTC,PIND2,HIGH);
    31c2:	82 e0       	ldi	r24, 0x02	; 2
    31c4:	62 e0       	ldi	r22, 0x02	; 2
    31c6:	41 e0       	ldi	r20, 0x01	; 1
    31c8:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <MDIO_void_PinWrite>

							MUART_voidUartSend('A');
    31cc:	81 e4       	ldi	r24, 0x41	; 65
    31ce:	0e 94 8a 07 	call	0xf14	; 0xf14 <MUART_voidUartSend>
							MDIO_void_SetDir(DIO_PORTC,PINC2,PIN_OUTPUT);//
    31d2:	82 e0       	ldi	r24, 0x02	; 2
    31d4:	62 e0       	ldi	r22, 0x02	; 2
    31d6:	41 e0       	ldi	r20, 0x01	; 1
    31d8:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_void_SetDir>
							MDIO_void_PinWrite(DIO_PORTC,PINC2,HIGH);//
    31dc:	82 e0       	ldi	r24, 0x02	; 2
    31de:	62 e0       	ldi	r22, 0x02	; 2
    31e0:	41 e0       	ldi	r20, 0x01	; 1
    31e2:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <MDIO_void_PinWrite>

						/*breaking from for and while loops*/
						L_u8Check=0;
    31e6:	1e 82       	std	Y+6, r1	; 0x06
    31e8:	15 c0       	rjmp	.+42     	; 0x3214 <CheckPass+0x1b8>
				MGINT_voidGlobalIntEnable();

			}
			else if (L_u8Counter==1)
			{
				for (u32 i=0;i<4;i++)
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	9a 81       	ldd	r25, Y+2	; 0x02
    31ee:	ab 81       	ldd	r26, Y+3	; 0x03
    31f0:	bc 81       	ldd	r27, Y+4	; 0x04
    31f2:	01 96       	adiw	r24, 0x01	; 1
    31f4:	a1 1d       	adc	r26, r1
    31f6:	b1 1d       	adc	r27, r1
    31f8:	89 83       	std	Y+1, r24	; 0x01
    31fa:	9a 83       	std	Y+2, r25	; 0x02
    31fc:	ab 83       	std	Y+3, r26	; 0x03
    31fe:	bc 83       	std	Y+4, r27	; 0x04
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	9a 81       	ldd	r25, Y+2	; 0x02
    3204:	ab 81       	ldd	r26, Y+3	; 0x03
    3206:	bc 81       	ldd	r27, Y+4	; 0x04
    3208:	84 30       	cpi	r24, 0x04	; 4
    320a:	91 05       	cpc	r25, r1
    320c:	a1 05       	cpc	r26, r1
    320e:	b1 05       	cpc	r27, r1
    3210:	08 f4       	brcc	.+2      	; 0x3214 <CheckPass+0x1b8>
    3212:	82 cf       	rjmp	.-252    	; 0x3118 <CheckPass+0xbc>
						L_u8Check=0;
						break;
					}

				}
				if(L_u8Check==1)
    3214:	8e 81       	ldd	r24, Y+6	; 0x06
    3216:	81 30       	cpi	r24, 0x01	; 1
    3218:	09 f0       	breq	.+2      	; 0x321c <CheckPass+0x1c0>
    321a:	48 c0       	rjmp	.+144    	; 0x32ac <CheckPass+0x250>
				{
					HLCD_voidSetCursor_DDRAM(1,1);
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	61 e0       	ldi	r22, 0x01	; 1
    3220:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <HLCD_voidSetCursor_DDRAM>
					HLCD_voidSendString("Incorrect");
    3224:	80 e6       	ldi	r24, 0x60	; 96
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <HLCD_voidSendString>
					L_u8Counter=0;
    322c:	1d 82       	std	Y+5, r1	; 0x05
					/*Timer Clear Screen After 1 Sec*/
					TMR2_VoidInit();
    322e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <TMR2_VoidInit>
					TMR2_OCM_SetCallBack(Time_Count_ClrScreen);
    3232:	81 ea       	ldi	r24, 0xA1	; 161
    3234:	99 e1       	ldi	r25, 0x19	; 25
    3236:	0e 94 70 08 	call	0x10e0	; 0x10e0 <TMR2_OCM_SetCallBack>
					TMR2_VoidSetOCMValue(200);
    323a:	88 ec       	ldi	r24, 0xC8	; 200
    323c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <TMR2_VoidSetOCMValue>
					TMR2_VoidOCMInterruptEnable();
    3240:	0e 94 18 08 	call	0x1030	; 0x1030 <TMR2_VoidOCMInterruptEnable>
					MGINT_voidGlobalIntEnable();
    3244:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <MGINT_voidGlobalIntEnable>
					/*Turning on red led for 700 ms*/
					MDIO_void_SetDir(DIO_PORTC,PINC7,PIN_OUTPUT);
    3248:	82 e0       	ldi	r24, 0x02	; 2
    324a:	67 e0       	ldi	r22, 0x07	; 7
    324c:	41 e0       	ldi	r20, 0x01	; 1
    324e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MDIO_void_SetDir>
					MDIO_void_PinWrite(DIO_PORTC,PINC7,HIGH);
    3252:	82 e0       	ldi	r24, 0x02	; 2
    3254:	67 e0       	ldi	r22, 0x07	; 7
    3256:	41 e0       	ldi	r20, 0x01	; 1
    3258:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <MDIO_void_PinWrite>
					TMR0_VoidInit();
    325c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <TMR0_VoidInit>
					TMR0_OCM_SetCallBack(Time_Count_RedLedToggle);
    3260:	8b e1       	ldi	r24, 0x1B	; 27
    3262:	9a e1       	ldi	r25, 0x1A	; 26
    3264:	0e 94 84 0a 	call	0x1508	; 0x1508 <TMR0_OCM_SetCallBack>
					TMR0_VoidSetOCMValue(140);
    3268:	8c e8       	ldi	r24, 0x8C	; 140
    326a:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <TMR0_VoidSetOCMValue>
					TMR0_VoidOCMInterruptEnable();
    326e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <TMR0_VoidOCMInterruptEnable>
					MGINT_voidGlobalIntEnable();
    3272:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <MGINT_voidGlobalIntEnable>
    3276:	1a c0       	rjmp	.+52     	; 0x32ac <CheckPass+0x250>
				}
			}
		}
		else if(L_u8PressedValue!=255 && L_u8PressedValue!='+' && L_u8PressedValue!='-' && L_u8PressedValue!='x' && L_u8PressedValue!='/' && L_u8PressedValue!='O')
    3278:	88 85       	ldd	r24, Y+8	; 0x08
    327a:	8f 3f       	cpi	r24, 0xFF	; 255
    327c:	b9 f0       	breq	.+46     	; 0x32ac <CheckPass+0x250>
    327e:	88 85       	ldd	r24, Y+8	; 0x08
    3280:	8b 32       	cpi	r24, 0x2B	; 43
    3282:	a1 f0       	breq	.+40     	; 0x32ac <CheckPass+0x250>
    3284:	88 85       	ldd	r24, Y+8	; 0x08
    3286:	8d 32       	cpi	r24, 0x2D	; 45
    3288:	89 f0       	breq	.+34     	; 0x32ac <CheckPass+0x250>
    328a:	88 85       	ldd	r24, Y+8	; 0x08
    328c:	88 37       	cpi	r24, 0x78	; 120
    328e:	71 f0       	breq	.+28     	; 0x32ac <CheckPass+0x250>
    3290:	88 85       	ldd	r24, Y+8	; 0x08
    3292:	8f 32       	cpi	r24, 0x2F	; 47
    3294:	59 f0       	breq	.+22     	; 0x32ac <CheckPass+0x250>
    3296:	88 85       	ldd	r24, Y+8	; 0x08
    3298:	8f 34       	cpi	r24, 0x4F	; 79
    329a:	41 f0       	breq	.+16     	; 0x32ac <CheckPass+0x250>
		{
			L_u8Counter++;
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	8f 5f       	subi	r24, 0xFF	; 255
    32a0:	8d 83       	std	Y+5, r24	; 0x05
			HLCD_voidSendData(L_u8PressedValue);
    32a2:	88 85       	ldd	r24, Y+8	; 0x08
    32a4:	0e 94 cc 14 	call	0x2998	; 0x2998 <HLCD_voidSendData>
			L_u8CopyPressedValue=L_u8PressedValue;
    32a8:	88 85       	ldd	r24, Y+8	; 0x08
    32aa:	8f 83       	std	Y+7, r24	; 0x07
void CheckPass(void)
{
	HLCD_voidInit();
	HKP_voidKpInit();
	u8 L_u8PressedValue=255,L_u8CopyPressedValue,L_u8Check=1,L_u8Counter=0;
	while(L_u8Check==1)
    32ac:	8e 81       	ldd	r24, Y+6	; 0x06
    32ae:	81 30       	cpi	r24, 0x01	; 1
    32b0:	09 f4       	brne	.+2      	; 0x32b4 <CheckPass+0x258>
    32b2:	e8 ce       	rjmp	.-560    	; 0x3084 <CheckPass+0x28>
			HLCD_voidSendData(L_u8PressedValue);
			L_u8CopyPressedValue=L_u8PressedValue;
		}

	}
}
    32b4:	28 96       	adiw	r28, 0x08	; 8
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	cf 91       	pop	r28
    32c2:	df 91       	pop	r29
    32c4:	08 95       	ret

000032c6 <test>:

void test(void)
{
    32c6:	df 93       	push	r29
    32c8:	cf 93       	push	r28
    32ca:	00 d0       	rcall	.+0      	; 0x32cc <test+0x6>
    32cc:	00 d0       	rcall	.+0      	; 0x32ce <test+0x8>
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidInit();
    32d2:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <HLCD_voidInit>
	HEEPROM_voidInit(90000);
    32d6:	60 e9       	ldi	r22, 0x90	; 144
    32d8:	7f e5       	ldi	r23, 0x5F	; 95
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <HEEPROM_voidInit>
	for (int i=0;i<3;i++)
    32e2:	1c 82       	std	Y+4, r1	; 0x04
    32e4:	1b 82       	std	Y+3, r1	; 0x03
    32e6:	0e c0       	rjmp	.+28     	; 0x3304 <test+0x3e>
	{
		HEEPROM_voidWriteByte(0+i,'1'+i);
    32e8:	2b 81       	ldd	r18, Y+3	; 0x03
    32ea:	3c 81       	ldd	r19, Y+4	; 0x04
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	48 2f       	mov	r20, r24
    32f0:	4f 5c       	subi	r20, 0xCF	; 207
    32f2:	c9 01       	movw	r24, r18
    32f4:	64 2f       	mov	r22, r20
    32f6:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <HEEPROM_voidWriteByte>

void test(void)
{
	HLCD_voidInit();
	HEEPROM_voidInit(90000);
	for (int i=0;i<3;i++)
    32fa:	8b 81       	ldd	r24, Y+3	; 0x03
    32fc:	9c 81       	ldd	r25, Y+4	; 0x04
    32fe:	01 96       	adiw	r24, 0x01	; 1
    3300:	9c 83       	std	Y+4, r25	; 0x04
    3302:	8b 83       	std	Y+3, r24	; 0x03
    3304:	8b 81       	ldd	r24, Y+3	; 0x03
    3306:	9c 81       	ldd	r25, Y+4	; 0x04
    3308:	83 30       	cpi	r24, 0x03	; 3
    330a:	91 05       	cpc	r25, r1
    330c:	6c f3       	brlt	.-38     	; 0x32e8 <test+0x22>
	{
		HEEPROM_voidWriteByte(0+i,'1'+i);
	}
	for (int i=0;i<3;i++)
    330e:	1a 82       	std	Y+2, r1	; 0x02
    3310:	19 82       	std	Y+1, r1	; 0x01
    3312:	0b c0       	rjmp	.+22     	; 0x332a <test+0x64>
	{
		HLCD_voidSendData(HEEPROM_u8ReadByte(0+i));
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	9a 81       	ldd	r25, Y+2	; 0x02
    3318:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <HEEPROM_u8ReadByte>
    331c:	0e 94 cc 14 	call	0x2998	; 0x2998 <HLCD_voidSendData>
	HEEPROM_voidInit(90000);
	for (int i=0;i<3;i++)
	{
		HEEPROM_voidWriteByte(0+i,'1'+i);
	}
	for (int i=0;i<3;i++)
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	9a 81       	ldd	r25, Y+2	; 0x02
    3324:	01 96       	adiw	r24, 0x01	; 1
    3326:	9a 83       	std	Y+2, r25	; 0x02
    3328:	89 83       	std	Y+1, r24	; 0x01
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	9a 81       	ldd	r25, Y+2	; 0x02
    332e:	83 30       	cpi	r24, 0x03	; 3
    3330:	91 05       	cpc	r25, r1
    3332:	84 f3       	brlt	.-32     	; 0x3314 <test+0x4e>
	{
		HLCD_voidSendData(HEEPROM_u8ReadByte(0+i));
	}

}
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	cf 91       	pop	r28
    333e:	df 91       	pop	r29
    3340:	08 95       	ret

00003342 <Time_Count_ClrScreen>:

void Time_Count_ClrScreen(void)
{
    3342:	df 93       	push	r29
    3344:	cf 93       	push	r28
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32Counter=0;
	L_u32Counter++;
    334a:	80 91 a4 01 	lds	r24, 0x01A4
    334e:	90 91 a5 01 	lds	r25, 0x01A5
    3352:	a0 91 a6 01 	lds	r26, 0x01A6
    3356:	b0 91 a7 01 	lds	r27, 0x01A7
    335a:	01 96       	adiw	r24, 0x01	; 1
    335c:	a1 1d       	adc	r26, r1
    335e:	b1 1d       	adc	r27, r1
    3360:	80 93 a4 01 	sts	0x01A4, r24
    3364:	90 93 a5 01 	sts	0x01A5, r25
    3368:	a0 93 a6 01 	sts	0x01A6, r26
    336c:	b0 93 a7 01 	sts	0x01A7, r27
	if(L_u32Counter==5000)
    3370:	80 91 a4 01 	lds	r24, 0x01A4
    3374:	90 91 a5 01 	lds	r25, 0x01A5
    3378:	a0 91 a6 01 	lds	r26, 0x01A6
    337c:	b0 91 a7 01 	lds	r27, 0x01A7
    3380:	88 38       	cpi	r24, 0x88	; 136
    3382:	23 e1       	ldi	r18, 0x13	; 19
    3384:	92 07       	cpc	r25, r18
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	a2 07       	cpc	r26, r18
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	b2 07       	cpc	r27, r18
    338e:	b1 f4       	brne	.+44     	; 0x33bc <Time_Count_ClrScreen+0x7a>
	{
		HLCD_voidSetCursor_DDRAM(1,1);
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	61 e0       	ldi	r22, 0x01	; 1
    3394:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <HLCD_voidSetCursor_DDRAM>
		HLCD_voidSendString("                ");
    3398:	82 e7       	ldi	r24, 0x72	; 114
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <HLCD_voidSendString>
		HLCD_voidSetCursor_DDRAM(1,1);
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	61 e0       	ldi	r22, 0x01	; 1
    33a4:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <HLCD_voidSetCursor_DDRAM>
		L_u32Counter=0;
    33a8:	10 92 a4 01 	sts	0x01A4, r1
    33ac:	10 92 a5 01 	sts	0x01A5, r1
    33b0:	10 92 a6 01 	sts	0x01A6, r1
    33b4:	10 92 a7 01 	sts	0x01A7, r1
		TMR2_VoidOCMInterruptDisable();
    33b8:	0e 94 34 08 	call	0x1068	; 0x1068 <TMR2_VoidOCMInterruptDisable>
	}
}
    33bc:	cf 91       	pop	r28
    33be:	df 91       	pop	r29
    33c0:	08 95       	ret

000033c2 <Time_Count_SVMReturn>:

void Time_Count_SVMReturn(void)
{
    33c2:	df 93       	push	r29
    33c4:	cf 93       	push	r28
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32Counter=0;
	L_u32Counter++;
    33ca:	80 91 a8 01 	lds	r24, 0x01A8
    33ce:	90 91 a9 01 	lds	r25, 0x01A9
    33d2:	a0 91 aa 01 	lds	r26, 0x01AA
    33d6:	b0 91 ab 01 	lds	r27, 0x01AB
    33da:	01 96       	adiw	r24, 0x01	; 1
    33dc:	a1 1d       	adc	r26, r1
    33de:	b1 1d       	adc	r27, r1
    33e0:	80 93 a8 01 	sts	0x01A8, r24
    33e4:	90 93 a9 01 	sts	0x01A9, r25
    33e8:	a0 93 aa 01 	sts	0x01AA, r26
    33ec:	b0 93 ab 01 	sts	0x01AB, r27
	if(L_u32Counter==5000)
    33f0:	80 91 a8 01 	lds	r24, 0x01A8
    33f4:	90 91 a9 01 	lds	r25, 0x01A9
    33f8:	a0 91 aa 01 	lds	r26, 0x01AA
    33fc:	b0 91 ab 01 	lds	r27, 0x01AB
    3400:	88 38       	cpi	r24, 0x88	; 136
    3402:	23 e1       	ldi	r18, 0x13	; 19
    3404:	92 07       	cpc	r25, r18
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	a2 07       	cpc	r26, r18
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	b2 07       	cpc	r27, r18
    340e:	81 f4       	brne	.+32     	; 0x3430 <Time_Count_SVMReturn+0x6e>
	{
		HServoMotor(0);
    3410:	60 e0       	ldi	r22, 0x00	; 0
    3412:	70 e0       	ldi	r23, 0x00	; 0
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	0e 94 9b 11 	call	0x2336	; 0x2336 <HServoMotor>
		L_u32Counter=0;
    341c:	10 92 a8 01 	sts	0x01A8, r1
    3420:	10 92 a9 01 	sts	0x01A9, r1
    3424:	10 92 aa 01 	sts	0x01AA, r1
    3428:	10 92 ab 01 	sts	0x01AB, r1
		TMR2_VoidOCMInterruptDisable();
    342c:	0e 94 34 08 	call	0x1068	; 0x1068 <TMR2_VoidOCMInterruptDisable>
	}
}
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	08 95       	ret

00003436 <Time_Count_RedLedToggle>:

void Time_Count_RedLedToggle(void)
{
    3436:	df 93       	push	r29
    3438:	cf 93       	push	r28
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32Counter=0;
	L_u32Counter++;
    343e:	80 91 ac 01 	lds	r24, 0x01AC
    3442:	90 91 ad 01 	lds	r25, 0x01AD
    3446:	a0 91 ae 01 	lds	r26, 0x01AE
    344a:	b0 91 af 01 	lds	r27, 0x01AF
    344e:	01 96       	adiw	r24, 0x01	; 1
    3450:	a1 1d       	adc	r26, r1
    3452:	b1 1d       	adc	r27, r1
    3454:	80 93 ac 01 	sts	0x01AC, r24
    3458:	90 93 ad 01 	sts	0x01AD, r25
    345c:	a0 93 ae 01 	sts	0x01AE, r26
    3460:	b0 93 af 01 	sts	0x01AF, r27
	if(L_u32Counter==5000)
    3464:	80 91 ac 01 	lds	r24, 0x01AC
    3468:	90 91 ad 01 	lds	r25, 0x01AD
    346c:	a0 91 ae 01 	lds	r26, 0x01AE
    3470:	b0 91 af 01 	lds	r27, 0x01AF
    3474:	88 38       	cpi	r24, 0x88	; 136
    3476:	23 e1       	ldi	r18, 0x13	; 19
    3478:	92 07       	cpc	r25, r18
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	a2 07       	cpc	r26, r18
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	b2 07       	cpc	r27, r18
    3482:	71 f4       	brne	.+28     	; 0x34a0 <Time_Count_RedLedToggle+0x6a>
	{
		MDIO_void_PinToggle(DIO_PORTC,PINC7);
    3484:	82 e0       	ldi	r24, 0x02	; 2
    3486:	67 e0       	ldi	r22, 0x07	; 7
    3488:	0e 94 47 10 	call	0x208e	; 0x208e <MDIO_void_PinToggle>
		L_u32Counter=0;
    348c:	10 92 ac 01 	sts	0x01AC, r1
    3490:	10 92 ad 01 	sts	0x01AD, r1
    3494:	10 92 ae 01 	sts	0x01AE, r1
    3498:	10 92 af 01 	sts	0x01AF, r1
		TMR0_VoidOCMInterruptDisable();
    349c:	0e 94 48 0a 	call	0x1490	; 0x1490 <TMR0_VoidOCMInterruptDisable>
	}
}
    34a0:	cf 91       	pop	r28
    34a2:	df 91       	pop	r29
    34a4:	08 95       	ret

000034a6 <Time_Count_GreenLedToggle>:

void Time_Count_GreenLedToggle(void)
{
    34a6:	df 93       	push	r29
    34a8:	cf 93       	push	r28
    34aa:	cd b7       	in	r28, 0x3d	; 61
    34ac:	de b7       	in	r29, 0x3e	; 62
	static u32 L_u32Counter=0;
	L_u32Counter++;
    34ae:	80 91 b0 01 	lds	r24, 0x01B0
    34b2:	90 91 b1 01 	lds	r25, 0x01B1
    34b6:	a0 91 b2 01 	lds	r26, 0x01B2
    34ba:	b0 91 b3 01 	lds	r27, 0x01B3
    34be:	01 96       	adiw	r24, 0x01	; 1
    34c0:	a1 1d       	adc	r26, r1
    34c2:	b1 1d       	adc	r27, r1
    34c4:	80 93 b0 01 	sts	0x01B0, r24
    34c8:	90 93 b1 01 	sts	0x01B1, r25
    34cc:	a0 93 b2 01 	sts	0x01B2, r26
    34d0:	b0 93 b3 01 	sts	0x01B3, r27
	if(L_u32Counter==5000)
    34d4:	80 91 b0 01 	lds	r24, 0x01B0
    34d8:	90 91 b1 01 	lds	r25, 0x01B1
    34dc:	a0 91 b2 01 	lds	r26, 0x01B2
    34e0:	b0 91 b3 01 	lds	r27, 0x01B3
    34e4:	88 38       	cpi	r24, 0x88	; 136
    34e6:	23 e1       	ldi	r18, 0x13	; 19
    34e8:	92 07       	cpc	r25, r18
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	a2 07       	cpc	r26, r18
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	b2 07       	cpc	r27, r18
    34f2:	71 f4       	brne	.+28     	; 0x3510 <Time_Count_GreenLedToggle+0x6a>
	{
		MDIO_void_PinToggle(DIO_PORTC,PINC6);
    34f4:	82 e0       	ldi	r24, 0x02	; 2
    34f6:	66 e0       	ldi	r22, 0x06	; 6
    34f8:	0e 94 47 10 	call	0x208e	; 0x208e <MDIO_void_PinToggle>
		L_u32Counter=0;
    34fc:	10 92 b0 01 	sts	0x01B0, r1
    3500:	10 92 b1 01 	sts	0x01B1, r1
    3504:	10 92 b2 01 	sts	0x01B2, r1
    3508:	10 92 b3 01 	sts	0x01B3, r1
		TMR0_VoidOCMInterruptDisable();
    350c:	0e 94 48 0a 	call	0x1490	; 0x1490 <TMR0_VoidOCMInterruptDisable>
	}
}
    3510:	cf 91       	pop	r28
    3512:	df 91       	pop	r29
    3514:	08 95       	ret

00003516 <main>:
 *      Author: DELL
 */
#include "app.h"

int main()
{
    3516:	df 93       	push	r29
    3518:	cf 93       	push	r28
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
	MUART_voidUartInit();
    351e:	0e 94 47 07 	call	0xe8e	; 0xe8e <MUART_voidUartInit>
	//test();
	E2PROMStorePass();
    3522:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <E2PROMStorePass>
	CheckPass();
    3526:	0e 94 2e 18 	call	0x305c	; 0x305c <CheckPass>
    352a:	ff cf       	rjmp	.-2      	; 0x352a <main+0x14>

0000352c <__udivmodsi4>:
    352c:	a1 e2       	ldi	r26, 0x21	; 33
    352e:	1a 2e       	mov	r1, r26
    3530:	aa 1b       	sub	r26, r26
    3532:	bb 1b       	sub	r27, r27
    3534:	fd 01       	movw	r30, r26
    3536:	0d c0       	rjmp	.+26     	; 0x3552 <__udivmodsi4_ep>

00003538 <__udivmodsi4_loop>:
    3538:	aa 1f       	adc	r26, r26
    353a:	bb 1f       	adc	r27, r27
    353c:	ee 1f       	adc	r30, r30
    353e:	ff 1f       	adc	r31, r31
    3540:	a2 17       	cp	r26, r18
    3542:	b3 07       	cpc	r27, r19
    3544:	e4 07       	cpc	r30, r20
    3546:	f5 07       	cpc	r31, r21
    3548:	20 f0       	brcs	.+8      	; 0x3552 <__udivmodsi4_ep>
    354a:	a2 1b       	sub	r26, r18
    354c:	b3 0b       	sbc	r27, r19
    354e:	e4 0b       	sbc	r30, r20
    3550:	f5 0b       	sbc	r31, r21

00003552 <__udivmodsi4_ep>:
    3552:	66 1f       	adc	r22, r22
    3554:	77 1f       	adc	r23, r23
    3556:	88 1f       	adc	r24, r24
    3558:	99 1f       	adc	r25, r25
    355a:	1a 94       	dec	r1
    355c:	69 f7       	brne	.-38     	; 0x3538 <__udivmodsi4_loop>
    355e:	60 95       	com	r22
    3560:	70 95       	com	r23
    3562:	80 95       	com	r24
    3564:	90 95       	com	r25
    3566:	9b 01       	movw	r18, r22
    3568:	ac 01       	movw	r20, r24
    356a:	bd 01       	movw	r22, r26
    356c:	cf 01       	movw	r24, r30
    356e:	08 95       	ret

00003570 <__prologue_saves__>:
    3570:	2f 92       	push	r2
    3572:	3f 92       	push	r3
    3574:	4f 92       	push	r4
    3576:	5f 92       	push	r5
    3578:	6f 92       	push	r6
    357a:	7f 92       	push	r7
    357c:	8f 92       	push	r8
    357e:	9f 92       	push	r9
    3580:	af 92       	push	r10
    3582:	bf 92       	push	r11
    3584:	cf 92       	push	r12
    3586:	df 92       	push	r13
    3588:	ef 92       	push	r14
    358a:	ff 92       	push	r15
    358c:	0f 93       	push	r16
    358e:	1f 93       	push	r17
    3590:	cf 93       	push	r28
    3592:	df 93       	push	r29
    3594:	cd b7       	in	r28, 0x3d	; 61
    3596:	de b7       	in	r29, 0x3e	; 62
    3598:	ca 1b       	sub	r28, r26
    359a:	db 0b       	sbc	r29, r27
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	de bf       	out	0x3e, r29	; 62
    35a2:	0f be       	out	0x3f, r0	; 63
    35a4:	cd bf       	out	0x3d, r28	; 61
    35a6:	09 94       	ijmp

000035a8 <__epilogue_restores__>:
    35a8:	2a 88       	ldd	r2, Y+18	; 0x12
    35aa:	39 88       	ldd	r3, Y+17	; 0x11
    35ac:	48 88       	ldd	r4, Y+16	; 0x10
    35ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    35b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    35b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    35b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    35b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    35b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    35ba:	b9 84       	ldd	r11, Y+9	; 0x09
    35bc:	c8 84       	ldd	r12, Y+8	; 0x08
    35be:	df 80       	ldd	r13, Y+7	; 0x07
    35c0:	ee 80       	ldd	r14, Y+6	; 0x06
    35c2:	fd 80       	ldd	r15, Y+5	; 0x05
    35c4:	0c 81       	ldd	r16, Y+4	; 0x04
    35c6:	1b 81       	ldd	r17, Y+3	; 0x03
    35c8:	aa 81       	ldd	r26, Y+2	; 0x02
    35ca:	b9 81       	ldd	r27, Y+1	; 0x01
    35cc:	ce 0f       	add	r28, r30
    35ce:	d1 1d       	adc	r29, r1
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	de bf       	out	0x3e, r29	; 62
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	cd bf       	out	0x3d, r28	; 61
    35da:	ed 01       	movw	r28, r26
    35dc:	08 95       	ret

000035de <_exit>:
    35de:	f8 94       	cli

000035e0 <__stop_program>:
    35e0:	ff cf       	rjmp	.-2      	; 0x35e0 <__stop_program>
